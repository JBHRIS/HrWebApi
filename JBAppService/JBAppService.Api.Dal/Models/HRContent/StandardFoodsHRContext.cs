using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace JBAppService.Api.Dal.Models.HRContent
{
    public partial class JBHRContext : DbContext
    {
        public JBHRContext()
        {
        }

        public JBHRContext(DbContextOptions<JBHRContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Abaset> Abaset { get; set; }
        public virtual DbSet<Abs> Abs { get; set; }
        public virtual DbSet<Abs1> Abs1 { get; set; }
        public virtual DbSet<Abs1Basetts> Abs1Basetts { get; set; }
        public virtual DbSet<AbsAttend> AbsAttend { get; set; }
        public virtual DbSet<AbsBasetts> AbsBasetts { get; set; }
        public virtual DbSet<AbsEntitle> AbsEntitle { get; set; }
        public virtual DbSet<AbsExt> AbsExt { get; set; }
        public virtual DbSet<AbsHcode> AbsHcode { get; set; }
        public virtual DbSet<Absc> Absc { get; set; }
        public virtual DbSet<Absd> Absd { get; set; }
        public virtual DbSet<Abspre> Abspre { get; set; }
        public virtual DbSet<Abst> Abst { get; set; }
        public virtual DbSet<Acccd> Acccd { get; set; }
        public virtual DbSet<Acccdattr> Acccdattr { get; set; }
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<Accounttype> Accounttype { get; set; }
        public virtual DbSet<Accsal> Accsal { get; set; }
        public virtual DbSet<Acgroup> Acgroup { get; set; }
        public virtual DbSet<ActimeZones> ActimeZones { get; set; }
        public virtual DbSet<AcunlockComb> AcunlockComb { get; set; }
        public virtual DbSet<AlarmLog> AlarmLog { get; set; }
        public virtual DbSet<AppConfig> AppConfig { get; set; }
        public virtual DbSet<AppSettingConfiguration> AppSettingConfiguration { get; set; }
        public virtual DbSet<ApplicationInfo> ApplicationInfo { get; set; }
        public virtual DbSet<ApplicationStructure> ApplicationStructure { get; set; }
        public virtual DbSet<ApplicationUserRule> ApplicationUserRule { get; set; }
        public virtual DbSet<Army> Army { get; set; }
        public virtual DbSet<Assess> Assess { get; set; }
        public virtual DbSet<AssessCat> AssessCat { get; set; }
        public virtual DbSet<AttParam> AttParam { get; set; }
        public virtual DbSet<Attbak> Attbak { get; set; }
        public virtual DbSet<Attcard> Attcard { get; set; }
        public virtual DbSet<Attend> Attend { get; set; }
        public virtual DbSet<AttendBasetts> AttendBasetts { get; set; }
        public virtual DbSet<AuditedExc> AuditedExc { get; set; }
        public virtual DbSet<Authdevice> Authdevice { get; set; }
        public virtual DbSet<Award> Award { get; set; }
        public virtual DbSet<Awardcd> Awardcd { get; set; }
        public virtual DbSet<BankCode> BankCode { get; set; }
        public virtual DbSet<Base> Base { get; set; }
        public virtual DbSet<BaseBak20140912> BaseBak20140912 { get; set; }
        public virtual DbSet<BaseOld> BaseOld { get; set; }
        public virtual DbSet<Basebak> Basebak { get; set; }
        public virtual DbSet<Basecd> Basecd { get; set; }
        public virtual DbSet<Basetts> Basetts { get; set; }
        public virtual DbSet<Blood> Blood { get; set; }
        public virtual DbSet<BonusDeptAmt> BonusDeptAmt { get; set; }
        public virtual DbSet<BonusEmpNum> BonusEmpNum { get; set; }
        public virtual DbSet<BonusEmpSet> BonusEmpSet { get; set; }
        public virtual DbSet<BonusGroup> BonusGroup { get; set; }
        public virtual DbSet<BounsEmpAmt> BounsEmpAmt { get; set; }
        public virtual DbSet<CalFreq> CalFreq { get; set; }
        public virtual DbSet<CalType> CalType { get; set; }
        public virtual DbSet<CalcCondition> CalcCondition { get; set; }
        public virtual DbSet<Car> Car { get; set; }
        public virtual DbSet<CarRentRecord> CarRentRecord { get; set; }
        public virtual DbSet<Carcd> Carcd { get; set; }
        public virtual DbSet<Card> Card { get; set; }
        public virtual DbSet<CardAppDetails> CardAppDetails { get; set; }
        public virtual DbSet<CardAppImages> CardAppImages { get; set; }
        public virtual DbSet<CardSignImages> CardSignImages { get; set; }
        public virtual DbSet<CardSignLog> CardSignLog { get; set; }
        public virtual DbSet<Cardapp> Cardapp { get; set; }
        public virtual DbSet<Cardcd> Cardcd { get; set; }
        public virtual DbSet<CardcdDamt> CardcdDamt { get; set; }
        public virtual DbSet<Cardlosd> Cardlosd { get; set; }
        public virtual DbSet<Cardtmp> Cardtmp { get; set; }
        public virtual DbSet<Cartime> Cartime { get; set; }
        public virtual DbSet<CheckId> CheckId { get; set; }
        public virtual DbSet<Checkexact> Checkexact { get; set; }
        public virtual DbSet<Checkinout> Checkinout { get; set; }
        public virtual DbSet<ChkOtNightFood> ChkOtNightFood { get; set; }
        public virtual DbSet<Chkidno> Chkidno { get; set; }
        public virtual DbSet<Citycd> Citycd { get; set; }
        public virtual DbSet<CodeFilter> CodeFilter { get; set; }
        public virtual DbSet<Comp> Comp { get; set; }
        public virtual DbSet<CompDatagroup> CompDatagroup { get; set; }
        public virtual DbSet<Contract> Contract { get; set; }
        public virtual DbSet<ContractBak20151117> ContractBak20151117 { get; set; }
        public virtual DbSet<ContractType> ContractType { get; set; }
        public virtual DbSet<Cost> Cost { get; set; }
        public virtual DbSet<CostType> CostType { get; set; }
        public virtual DbSet<Countcd> Countcd { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<DataPa> DataPa { get; set; }
        public virtual DbSet<DataPass> DataPass { get; set; }
        public virtual DbSet<Datagroup> Datagroup { get; set; }
        public virtual DbSet<Departments> Departments { get; set; }
        public virtual DbSet<Dept> Dept { get; set; }
        public virtual DbSet<DeptSupervisor> DeptSupervisor { get; set; }
        public virtual DbSet<DeptUsedSchs> DeptUsedSchs { get; set; }
        public virtual DbSet<Depta> Depta { get; set; }
        public virtual DbSet<Deptg> Deptg { get; set; }
        public virtual DbSet<Deptlevel> Deptlevel { get; set; }
        public virtual DbSet<Depts> Depts { get; set; }
        public virtual DbSet<Di> Di { get; set; }
        public virtual DbSet<Dispatch> Dispatch { get; set; }
        public virtual DbSet<DocItem> DocItem { get; set; }
        public virtual DbSet<DormitoryBed> DormitoryBed { get; set; }
        public virtual DbSet<DormitoryManagement> DormitoryManagement { get; set; }
        public virtual DbSet<DormitoryRoom> DormitoryRoom { get; set; }
        public virtual DbSet<Eatitem> Eatitem { get; set; }
        public virtual DbSet<EatitemCard> EatitemCard { get; set; }
        public virtual DbSet<EatitemSp> EatitemSp { get; set; }
        public virtual DbSet<Eatitemset> Eatitemset { get; set; }
        public virtual DbSet<Eatitemsettime> Eatitemsettime { get; set; }
        public virtual DbSet<Educode> Educode { get; set; }
        public virtual DbSet<Effect> Effect { get; set; }
        public virtual DbSet<Effemploy> Effemploy { get; set; }
        public virtual DbSet<Efflvl> Efflvl { get; set; }
        public virtual DbSet<EffsAdmin> EffsAdmin { get; set; }
        public virtual DbSet<EffsAppr> EffsAppr { get; set; }
        public virtual DbSet<EffsApprs> EffsApprs { get; set; }
        public virtual DbSet<EffsApprsMangCheck> EffsApprsMangCheck { get; set; }
        public virtual DbSet<EffsApprtts> EffsApprtts { get; set; }
        public virtual DbSet<EffsAssignappend> EffsAssignappend { get; set; }
        public virtual DbSet<EffsAttend> EffsAttend { get; set; }
        public virtual DbSet<EffsBase> EffsBase { get; set; }
        public virtual DbSet<EffsCate> EffsCate { get; set; }
        public virtual DbSet<EffsCateitem> EffsCateitem { get; set; }
        public virtual DbSet<EffsEducate> EffsEducate { get; set; }
        public virtual DbSet<EffsEducateitem> EffsEducateitem { get; set; }
        public virtual DbSet<EffsEffsMangCheck> EffsEffsMangCheck { get; set; }
        public virtual DbSet<EffsFun> EffsFun { get; set; }
        public virtual DbSet<EffsGroup> EffsGroup { get; set; }
        public virtual DbSet<EffsGroupitem> EffsGroupitem { get; set; }
        public virtual DbSet<EffsHrNum> EffsHrNum { get; set; }
        public virtual DbSet<EffsInterview> EffsInterview { get; set; }
        public virtual DbSet<EffsJobLosView> EffsJobLosView { get; set; }
        public virtual DbSet<EffsLearnplan> EffsLearnplan { get; set; }
        public virtual DbSet<EffsMangCheck> EffsMangCheck { get; set; }
        public virtual DbSet<EffsMangFnums> EffsMangFnums { get; set; }
        public virtual DbSet<EffsMangNum> EffsMangNum { get; set; }
        public virtual DbSet<EffsMangappend> EffsMangappend { get; set; }
        public virtual DbSet<EffsMangapprcate> EffsMangapprcate { get; set; }
        public virtual DbSet<EffsMangapprwork> EffsMangapprwork { get; set; }
        public virtual DbSet<EffsMangfinishnote> EffsMangfinishnote { get; set; }
        public virtual DbSet<EffsManginterview> EffsManginterview { get; set; }
        public virtual DbSet<EffsManglearnplan> EffsManglearnplan { get; set; }
        public virtual DbSet<EffsMangrate> EffsMangrate { get; set; }
        public virtual DbSet<EffsNote> EffsNote { get; set; }
        public virtual DbSet<EffsNum> EffsNum { get; set; }
        public virtual DbSet<EffsNumitem> EffsNumitem { get; set; }
        public virtual DbSet<EffsOther> EffsOther { get; set; }
        public virtual DbSet<EffsOutNum> EffsOutNum { get; set; }
        public virtual DbSet<EffsPersonality> EffsPersonality { get; set; }
        public virtual DbSet<EffsPersonalityItem> EffsPersonalityItem { get; set; }
        public virtual DbSet<EffsRecord> EffsRecord { get; set; }
        public virtual DbSet<EffsRecorda> EffsRecorda { get; set; }
        public virtual DbSet<EffsRecordb> EffsRecordb { get; set; }
        public virtual DbSet<EffsRecordc> EffsRecordc { get; set; }
        public virtual DbSet<EffsRecords> EffsRecords { get; set; }
        public virtual DbSet<EffsReportA> EffsReportA { get; set; }
        public virtual DbSet<EffsReportB> EffsReportB { get; set; }
        public virtual DbSet<EffsSMang> EffsSMang { get; set; }
        public virtual DbSet<EffsSNobr> EffsSNobr { get; set; }
        public virtual DbSet<EffsSelfcate> EffsSelfcate { get; set; }
        public virtual DbSet<EffsSelfedu> EffsSelfedu { get; set; }
        public virtual DbSet<EffsSelfinterview> EffsSelfinterview { get; set; }
        public virtual DbSet<EffsSelflearnplan> EffsSelflearnplan { get; set; }
        public virtual DbSet<EffsSelfplan> EffsSelfplan { get; set; }
        public virtual DbSet<EffsSelfwork> EffsSelfwork { get; set; }
        public virtual DbSet<EffsSpApprs> EffsSpApprs { get; set; }
        public virtual DbSet<EffsTNum1> EffsTNum1 { get; set; }
        public virtual DbSet<EffsTNum2> EffsTNum2 { get; set; }
        public virtual DbSet<EffsTNum3> EffsTNum3 { get; set; }
        public virtual DbSet<EffsTNum4> EffsTNum4 { get; set; }
        public virtual DbSet<EffsTemplet> EffsTemplet { get; set; }
        public virtual DbSet<EffsTempletcate> EffsTempletcate { get; set; }
        public virtual DbSet<EffsTempletcateitem> EffsTempletcateitem { get; set; }
        public virtual DbSet<EffsTempletinterview> EffsTempletinterview { get; set; }
        public virtual DbSet<EffsTempletlearnplan> EffsTempletlearnplan { get; set; }
        public virtual DbSet<EffsTemplettype> EffsTemplettype { get; set; }
        public virtual DbSet<EffsTitle> EffsTitle { get; set; }
        public virtual DbSet<EffsTitleitem> EffsTitleitem { get; set; }
        public virtual DbSet<EffsTrMangCheck> EffsTrMangCheck { get; set; }
        public virtual DbSet<EffsType> EffsType { get; set; }
        public virtual DbSet<EffsUpfile> EffsUpfile { get; set; }
        public virtual DbSet<EffsView> EffsView { get; set; }
        public virtual DbSet<EffsWorkSet> EffsWorkSet { get; set; }
        public virtual DbSet<EffstempAa> EffstempAa { get; set; }
        public virtual DbSet<EfftempBb> EfftempBb { get; set; }
        public virtual DbSet<Efftype> Efftype { get; set; }
        public virtual DbSet<EmOpLog> EmOpLog { get; set; }
        public virtual DbSet<EmpConfiguration> EmpConfiguration { get; set; }
        public virtual DbSet<Empcd> Empcd { get; set; }
        public virtual DbSet<EmployeeParameter> EmployeeParameter { get; set; }
        public virtual DbSet<Enrich> Enrich { get; set; }
        public virtual DbSet<Exchange> Exchange { get; set; }
        public virtual DbSet<Excnotes> Excnotes { get; set; }
        public virtual DbSet<Explab> Explab { get; set; }
        public virtual DbSet<ExplabCn> ExplabCn { get; set; }
        public virtual DbSet<ExplabCn1> ExplabCn1 { get; set; }
        public virtual DbSet<Expsup> Expsup { get; set; }
        public virtual DbSet<ExtHcode> ExtHcode { get; set; }
        public virtual DbSet<ExtendedHolidays> ExtendedHolidays { get; set; }
        public virtual DbSet<Exttable> Exttable { get; set; }
        public virtual DbSet<FaceTemp> FaceTemp { get; set; }
        public virtual DbSet<Family> Family { get; set; }
        public virtual DbSet<FefcToSpmDept> FefcToSpmDept { get; set; }
        public virtual DbSet<FefcToSpmDeptMang> FefcToSpmDeptMang { get; set; }
        public virtual DbSet<FefcToSpmEmp> FefcToSpmEmp { get; set; }
        public virtual DbSet<FencePoints> FencePoints { get; set; }
        public virtual DbSet<FileGroup> FileGroup { get; set; }
        public virtual DbSet<FileGroupRole> FileGroupRole { get; set; }
        public virtual DbSet<FileStreamInfo> FileStreamInfo { get; set; }
        public virtual DbSet<FileStructure> FileStructure { get; set; }
        public virtual DbSet<FileStructureGroup> FileStructureGroup { get; set; }
        public virtual DbSet<FileStructureRole> FileStructureRole { get; set; }
        public virtual DbSet<Food> Food { get; set; }
        public virtual DbSet<FoodCard> FoodCard { get; set; }
        public virtual DbSet<FoodCard201704281> FoodCard201704281 { get; set; }
        public virtual DbSet<FoodItem> FoodItem { get; set; }
        public virtual DbSet<Foodtimecd> Foodtimecd { get; set; }
        public virtual DbSet<Foodwage> Foodwage { get; set; }
        public virtual DbSet<Freq> Freq { get; set; }
        public virtual DbSet<FreqStart> FreqStart { get; set; }
        public virtual DbSet<Frm211d> Frm211d { get; set; }
        public virtual DbSet<Frm211dSalcode> Frm211dSalcode { get; set; }
        public virtual DbSet<Frm22> Frm22 { get; set; }
        public virtual DbSet<Frm23> Frm23 { get; set; }
        public virtual DbSet<Frm24> Frm24 { get; set; }
        public virtual DbSet<Frm26> Frm26 { get; set; }
        public virtual DbSet<Frm27> Frm27 { get; set; }
        public virtual DbSet<Frm271> Frm271 { get; set; }
        public virtual DbSet<Frm272> Frm272 { get; set; }
        public virtual DbSet<Frm28> Frm28 { get; set; }
        public virtual DbSet<Frm29> Frm29 { get; set; }
        public virtual DbSet<Frm2b> Frm2b { get; set; }
        public virtual DbSet<Frm2j> Frm2j { get; set; }
        public virtual DbSet<Frm2p> Frm2p { get; set; }
        public virtual DbSet<Frm2t> Frm2t { get; set; }
        public virtual DbSet<Frm41> Frm41 { get; set; }
        public virtual DbSet<Frm42> Frm42 { get; set; }
        public virtual DbSet<Frm43> Frm43 { get; set; }
        public virtual DbSet<Frm46> Frm46 { get; set; }
        public virtual DbSet<Frm46a> Frm46a { get; set; }
        public virtual DbSet<Frm46b> Frm46b { get; set; }
        public virtual DbSet<Frm46c> Frm46c { get; set; }
        public virtual DbSet<Frm47> Frm47 { get; set; }
        public virtual DbSet<Frm48> Frm48 { get; set; }
        public virtual DbSet<Frm49> Frm49 { get; set; }
        public virtual DbSet<Frm4itype> Frm4itype { get; set; }
        public virtual DbSet<Frm4l> Frm4l { get; set; }
        public virtual DbSet<Frm4pPrinttype> Frm4pPrinttype { get; set; }
        public virtual DbSet<Frm83> Frm83 { get; set; }
        public virtual DbSet<GetHoliCodeList> GetHoliCodeList { get; set; }
        public virtual DbSet<Grprelcd> Grprelcd { get; set; }
        public virtual DbSet<Harcode> Harcode { get; set; }
        public virtual DbSet<Hcode> Hcode { get; set; }
        public virtual DbSet<HcodeRule> HcodeRule { get; set; }
        public virtual DbSet<HcodeType> HcodeType { get; set; }
        public virtual DbSet<Hcodes> Hcodes { get; set; }
        public virtual DbSet<Hcodesrate> Hcodesrate { get; set; }
        public virtual DbSet<Health> Health { get; set; }
        public virtual DbSet<HolDay> HolDay { get; set; }
        public virtual DbSet<Holi> Holi { get; set; }
        public virtual DbSet<Holicd> Holicd { get; set; }
        public virtual DbSet<Holidays> Holidays { get; set; }
        public virtual DbSet<HrFile> HrFile { get; set; }
        public virtual DbSet<HrPortalAbs> HrPortalAbs { get; set; }
        public virtual DbSet<HrPortalAttend> HrPortalAttend { get; set; }
        public virtual DbSet<HrPortalEmpInfo> HrPortalEmpInfo { get; set; }
        public virtual DbSet<HrPortalEmpInfoLe> HrPortalEmpInfoLe { get; set; }
        public virtual DbSet<HrPortalOt> HrPortalOt { get; set; }
        public virtual DbSet<HrdMessage> HrdMessage { get; set; }
        public virtual DbSet<IdType> IdType { get; set; }
        public virtual DbSet<ImportType> ImportType { get; set; }
        public virtual DbSet<InOutLog> InOutLog { get; set; }
        public virtual DbSet<Inholi> Inholi { get; set; }
        public virtual DbSet<Inpolab> Inpolab { get; set; }
        public virtual DbSet<InsCnCodeTts> InsCnCodeTts { get; set; }
        public virtual DbSet<InsCnComp> InsCnComp { get; set; }
        public virtual DbSet<InsCnType> InsCnType { get; set; }
        public virtual DbSet<Inscomp> Inscomp { get; set; }
        public virtual DbSet<Inscountry> Inscountry { get; set; }
        public virtual DbSet<Insglv> Insglv { get; set; }
        public virtual DbSet<Insgrf> Insgrf { get; set; }
        public virtual DbSet<Insgrp> Insgrp { get; set; }
        public virtual DbSet<Inslab> Inslab { get; set; }
        public virtual DbSet<InslabCn> InslabCn { get; set; }
        public virtual DbSet<Insname> Insname { get; set; }
        public virtual DbSet<InsurCnCode> InsurCnCode { get; set; }
        public virtual DbSet<InsurCnWorkCd> InsurCnWorkCd { get; set; }
        public virtual DbSet<InsurType> InsurType { get; set; }
        public virtual DbSet<Insurcd> Insurcd { get; set; }
        public virtual DbSet<Insurlv> Insurlv { get; set; }
        public virtual DbSet<JbGetCardDataView> JbGetCardDataView { get; set; }
        public virtual DbSet<JbHrAbs> JbHrAbs { get; set; }
        public virtual DbSet<JbHrAbs1> JbHrAbs1 { get; set; }
        public virtual DbSet<JbHrAbsUnion> JbHrAbsUnion { get; set; }
        public virtual DbSet<JbHrAbst> JbHrAbst { get; set; }
        public virtual DbSet<JbHrAttCard> JbHrAttCard { get; set; }
        public virtual DbSet<JbHrAttend> JbHrAttend { get; set; }
        public virtual DbSet<JbHrBase> JbHrBase { get; set; }
        public virtual DbSet<JbHrBaseTts> JbHrBaseTts { get; set; }
        public virtual DbSet<JbHrCard> JbHrCard { get; set; }
        public virtual DbSet<JbHrCardApp> JbHrCardApp { get; set; }
        public virtual DbSet<JbHrDataPa> JbHrDataPa { get; set; }
        public virtual DbSet<JbHrDataPass> JbHrDataPass { get; set; }
        public virtual DbSet<JbHrDept> JbHrDept { get; set; }
        public virtual DbSet<JbHrDeptLevel> JbHrDeptLevel { get; set; }
        public virtual DbSet<JbHrDeptm> JbHrDeptm { get; set; }
        public virtual DbSet<JbHrDepts> JbHrDepts { get; set; }
        public virtual DbSet<JbHrExtTable> JbHrExtTable { get; set; }
        public virtual DbSet<JbHrHcode> JbHrHcode { get; set; }
        public virtual DbSet<JbHrHoli> JbHrHoli { get; set; }
        public virtual DbSet<JbHrHolicd> JbHrHolicd { get; set; }
        public virtual DbSet<JbHrJob> JbHrJob { get; set; }
        public virtual DbSet<JbHrJobl> JbHrJobl { get; set; }
        public virtual DbSet<JbHrLockWage> JbHrLockWage { get; set; }
        public virtual DbSet<JbHrOt> JbHrOt { get; set; }
        public virtual DbSet<JbHrOtRate> JbHrOtRate { get; set; }
        public virtual DbSet<JbHrOtrcd> JbHrOtrcd { get; set; }
        public virtual DbSet<JbHrReason> JbHrReason { get; set; }
        public virtual DbSet<JbHrRote> JbHrRote { get; set; }
        public virtual DbSet<JbHrRotechg> JbHrRotechg { get; set; }
        public virtual DbSet<JbHrRotet> JbHrRotet { get; set; }
        public virtual DbSet<JbHrSalbasd> JbHrSalbasd { get; set; }
        public virtual DbSet<JbHrTmTable> JbHrTmTable { get; set; }
        public virtual DbSet<JbHrTtsCode> JbHrTtsCode { get; set; }
        public virtual DbSet<JbHrTtscd> JbHrTtscd { get; set; }
        public virtual DbSet<Job> Job { get; set; }
        public virtual DbSet<Jobl> Jobl { get; set; }
        public virtual DbSet<Jobo> Jobo { get; set; }
        public virtual DbSet<Jobs> Jobs { get; set; }
        public virtual DbSet<JqColumn> JqColumn { get; set; }
        public virtual DbSet<JqCondition> JqCondition { get; set; }
        public virtual DbSet<JqForeignKey> JqForeignKey { get; set; }
        public virtual DbSet<JqPreCondition> JqPreCondition { get; set; }
        public virtual DbSet<JqSetting> JqSetting { get; set; }
        public virtual DbSet<JqSqlQueryField> JqSqlQueryField { get; set; }
        public virtual DbSet<JqTable> JqTable { get; set; }
        public virtual DbSet<JqUserColumn> JqUserColumn { get; set; }
        public virtual DbSet<Ks1> Ks1 { get; set; }
        public virtual DbSet<Larcode> Larcode { get; set; }
        public virtual DbSet<LeaveClass> LeaveClass { get; set; }
        public virtual DbSet<LeaveClass1> LeaveClass1 { get; set; }
        public virtual DbSet<Lican> Lican { get; set; }
        public virtual DbSet<LicanType> LicanType { get; set; }
        public virtual DbSet<LockWage> LockWage { get; set; }
        public virtual DbSet<MaFood> MaFood { get; set; }
        public virtual DbSet<Machines> Machines { get; set; }
        public virtual DbSet<Mailqueue> Mailqueue { get; set; }
        public virtual DbSet<Marquee> Marquee { get; set; }
        public virtual DbSet<Marry> Marry { get; set; }
        public virtual DbSet<Master> Master { get; set; }
        public virtual DbSet<MeetingRoom> MeetingRoom { get; set; }
        public virtual DbSet<MeetingRoomRentAttendee> MeetingRoomRentAttendee { get; set; }
        public virtual DbSet<MeetingRoomRentRecord> MeetingRoomRentRecord { get; set; }
        public virtual DbSet<Menugroup> Menugroup { get; set; }
        public virtual DbSet<Menustripstructure> Menustripstructure { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<MidOrgDepartment> MidOrgDepartment { get; set; }
        public virtual DbSet<MidOrgGroup> MidOrgGroup { get; set; }
        public virtual DbSet<MidOrgJob> MidOrgJob { get; set; }
        public virtual DbSet<MidOrgPerson> MidOrgPerson { get; set; }
        public virtual DbSet<MidOrgPersonBase> MidOrgPersonBase { get; set; }
        public virtual DbSet<MidOrgPersonPart> MidOrgPersonPart { get; set; }
        public virtual DbSet<MidOrgPost> MidOrgPost { get; set; }
        public virtual DbSet<MidOrgUnit> MidOrgUnit { get; set; }
        public virtual DbSet<MonthType> MonthType { get; set; }
        public virtual DbSet<Mtcode> Mtcode { get; set; }
        public virtual DbSet<MtcodeEntitleType> MtcodeEntitleType { get; set; }
        public virtual DbSet<Nation> Nation { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NewsBrowsing> NewsBrowsing { get; set; }
        public virtual DbSet<NewsComp> NewsComp { get; set; }
        public virtual DbSet<NewsTarget> NewsTarget { get; set; }
        public virtual DbSet<NumRun> NumRun { get; set; }
        public virtual DbSet<NumRunDeil> NumRunDeil { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<Orgtree> Orgtree { get; set; }
        public virtual DbSet<Ot> Ot { get; set; }
        public virtual DbSet<Ot1> Ot1 { get; set; }
        public virtual DbSet<OtAttend> OtAttend { get; set; }
        public virtual DbSet<OtB> OtB { get; set; }
        public virtual DbSet<OtBasetts> OtBasetts { get; set; }
        public virtual DbSet<Othcode> Othcode { get; set; }
        public virtual DbSet<Otpre> Otpre { get; set; }
        public virtual DbSet<OtrateType> OtrateType { get; set; }
        public virtual DbSet<Otratecd> Otratecd { get; set; }
        public virtual DbSet<Otrcd> Otrcd { get; set; }
        public virtual DbSet<OutPost> OutPost { get; set; }
        public virtual DbSet<Outcd> Outcd { get; set; }
        public virtual DbSet<Parameter> Parameter { get; set; }
        public virtual DbSet<ParameterTree> ParameterTree { get; set; }
        public virtual DbSet<PayDoc> PayDoc { get; set; }
        public virtual DbSet<Provcd> Provcd { get; set; }
        public virtual DbSet<PunchCardRecord> PunchCardRecord { get; set; }
        public virtual DbSet<PunchCardType> PunchCardType { get; set; }
        public virtual DbSet<QaAbsence> QaAbsence { get; set; }
        public virtual DbSet<QaAttendanceInfo> QaAttendanceInfo { get; set; }
        public virtual DbSet<QaContractInfo> QaContractInfo { get; set; }
        public virtual DbSet<QaEmployeeInfo> QaEmployeeInfo { get; set; }
        public virtual DbSet<QaOverTime> QaOverTime { get; set; }
        public virtual DbSet<QaPublished> QaPublished { get; set; }
        public virtual DbSet<Qadetail> Qadetail { get; set; }
        public virtual DbSet<Qamaster> Qamaster { get; set; }
        public virtual DbSet<Qcategory> Qcategory { get; set; }
        public virtual DbSet<Qdetail> Qdetail { get; set; }
        public virtual DbSet<Qqitem> Qqitem { get; set; }
        public virtual DbSet<Qqmcq> Qqmcq { get; set; }
        public virtual DbSet<QqmcqDetail> QqmcqDetail { get; set; }
        public virtual DbSet<QqmcqDetailTpl> QqmcqDetailTpl { get; set; }
        public virtual DbSet<Qqtype> Qqtype { get; set; }
        public virtual DbSet<Qtpl> Qtpl { get; set; }
        public virtual DbSet<QtplCategory> QtplCategory { get; set; }
        public virtual DbSet<RangeSet> RangeSet { get; set; }
        public virtual DbSet<Rba> Rba { get; set; }
        public virtual DbSet<Relaytable> Relaytable { get; set; }
        public virtual DbSet<Relcode> Relcode { get; set; }
        public virtual DbSet<Relishcd> Relishcd { get; set; }
        public virtual DbSet<Repair> Repair { get; set; }
        public virtual DbSet<ReportEmp> ReportEmp { get; set; }
        public virtual DbSet<ReportItem> ReportItem { get; set; }
        public virtual DbSet<Retchoo> Retchoo { get; set; }
        public virtual DbSet<Rote> Rote { get; set; }
        public virtual DbSet<RoteBonus> RoteBonus { get; set; }
        public virtual DbSet<Rotechg> Rotechg { get; set; }
        public virtual DbSet<Rotet> Rotet { get; set; }
        public virtual DbSet<RptEnrich> RptEnrich { get; set; }
        public virtual DbSet<Salabs> Salabs { get; set; }
        public virtual DbSet<Saladr> Saladr { get; set; }
        public virtual DbSet<SalaryPassWord> SalaryPassWord { get; set; }
        public virtual DbSet<Salatt> Salatt { get; set; }
        public virtual DbSet<Salattr> Salattr { get; set; }
        public virtual DbSet<Salbasd> Salbasd { get; set; }
        public virtual DbSet<Salbasd1> Salbasd1 { get; set; }
        public virtual DbSet<Salbase> Salbase { get; set; }
        public virtual DbSet<Salbasnd> Salbasnd { get; set; }
        public virtual DbSet<Salbastd> Salbastd { get; set; }
        public virtual DbSet<Salcode> Salcode { get; set; }
        public virtual DbSet<SalcodeBak> SalcodeBak { get; set; }
        public virtual DbSet<SalcodeGroup> SalcodeGroup { get; set; }
        public virtual DbSet<Salfunction> Salfunction { get; set; }
        public virtual DbSet<Salpw> Salpw { get; set; }
        public virtual DbSet<Saltaxitem> Saltaxitem { get; set; }
        public virtual DbSet<Saltycd> Saltycd { get; set; }
        public virtual DbSet<SaltycdDays> SaltycdDays { get; set; }
        public virtual DbSet<SaltycdDiv> SaltycdDiv { get; set; }
        public virtual DbSet<SaltycdHours> SaltycdHours { get; set; }
        public virtual DbSet<SchClass> SchClass { get; set; }
        public virtual DbSet<Schl> Schl { get; set; }
        public virtual DbSet<Securitydetails> Securitydetails { get; set; }
        public virtual DbSet<ServerLog> ServerLog { get; set; }
        public virtual DbSet<Sex> Sex { get; set; }
        public virtual DbSet<Shift> Shift { get; set; }
        public virtual DbSet<SosId> SosId { get; set; }
        public virtual DbSet<Sptyp> Sptyp { get; set; }
        public virtual DbSet<Sqlupdatetable> Sqlupdatetable { get; set; }
        public virtual DbSet<Subs> Subs { get; set; }
        public virtual DbSet<SysDataStructure> SysDataStructure { get; set; }
        public virtual DbSet<SysDefault> SysDefault { get; set; }
        public virtual DbSet<SysLoginPw> SysLoginPw { get; set; }
        public virtual DbSet<SysLoginTime> SysLoginTime { get; set; }
        public virtual DbSet<SysPage> SysPage { get; set; }
        public virtual DbSet<SysRole> SysRole { get; set; }
        public virtual DbSet<SysRolePage> SysRolePage { get; set; }
        public virtual DbSet<SysUserRole> SysUserRole { get; set; }
        public virtual DbSet<Syslog> Syslog { get; set; }
        public virtual DbSet<SystemLog> SystemLog { get; set; }
        public virtual DbSet<TableAtt> TableAtt { get; set; }
        public virtual DbSet<TaxType> TaxType { get; set; }
        public virtual DbSet<Taxcn> Taxcn { get; set; }
        public virtual DbSet<Taxcnlvl> Taxcnlvl { get; set; }
        public virtual DbSet<Taxlvl> Taxlvl { get; set; }
        public virtual DbSet<Tbase> Tbase { get; set; }
        public virtual DbSet<Tbkey> Tbkey { get; set; }
        public virtual DbSet<Tbsmsallot> Tbsmsallot { get; set; }
        public virtual DbSet<Tbsmsinfo> Tbsmsinfo { get; set; }
        public virtual DbSet<Template> Template { get; set; }
        public virtual DbSet<TmpRotechg20150901> TmpRotechg20150901 { get; set; }
        public virtual DbSet<TmpWage> TmpWage { get; set; }
        public virtual DbSet<Tmtable> Tmtable { get; set; }
        public virtual DbSet<TmtableImport> TmtableImport { get; set; }
        public virtual DbSet<TmtableTmp> TmtableTmp { get; set; }
        public virtual DbSet<Ttdhum049805> Ttdhum049805 { get; set; }
        public virtual DbSet<Ttdhum049992> Ttdhum049992 { get; set; }
        public virtual DbSet<Ttdhum049995> Ttdhum049995 { get; set; }
        public virtual DbSet<Ttscd> Ttscd { get; set; }
        public virtual DbSet<Ttscode> Ttscode { get; set; }
        public virtual DbSet<Twaged> Twaged { get; set; }
        public virtual DbSet<UCode> UCode { get; set; }
        public virtual DbSet<UDatagroup> UDatagroup { get; set; }
        public virtual DbSet<UDataid> UDataid { get; set; }
        public virtual DbSet<UError> UError { get; set; }
        public virtual DbSet<UFilter> UFilter { get; set; }
        public virtual DbSet<UFldlst> UFldlst { get; set; }
        public virtual DbSet<UGroup> UGroup { get; set; }
        public virtual DbSet<ULogin> ULogin { get; set; }
        public virtual DbSet<UOrder> UOrder { get; set; }
        public virtual DbSet<UPrg> UPrg { get; set; }
        public virtual DbSet<UPrgid> UPrgid { get; set; }
        public virtual DbSet<UQuery> UQuery { get; set; }
        public virtual DbSet<USys> USys { get; set; }
        public virtual DbSet<USys1> USys1 { get; set; }
        public virtual DbSet<USys10> USys10 { get; set; }
        public virtual DbSet<USys2> USys2 { get; set; }
        public virtual DbSet<USys3> USys3 { get; set; }
        public virtual DbSet<USys4> USys4 { get; set; }
        public virtual DbSet<USys5> USys5 { get; set; }
        public virtual DbSet<USys6> USys6 { get; set; }
        public virtual DbSet<USys7> USys7 { get; set; }
        public virtual DbSet<USys7a> USys7a { get; set; }
        public virtual DbSet<USys8> USys8 { get; set; }
        public virtual DbSet<USys9> USys9 { get; set; }
        public virtual DbSet<UTts> UTts { get; set; }
        public virtual DbSet<UUser> UUser { get; set; }
        public virtual DbSet<UUsercomp> UUsercomp { get; set; }
        public virtual DbSet<UWkid> UWkid { get; set; }
        public virtual DbSet<Unit> Unit { get; set; }
        public virtual DbSet<UpBaseRecord> UpBaseRecord { get; set; }
        public virtual DbSet<Upfile> Upfile { get; set; }
        public virtual DbSet<Uptype> Uptype { get; set; }
        public virtual DbSet<UserAcmachines> UserAcmachines { get; set; }
        public virtual DbSet<UserAcprivilege> UserAcprivilege { get; set; }
        public virtual DbSet<UserDefine> UserDefine { get; set; }
        public virtual DbSet<UserFoodCardNumber> UserFoodCardNumber { get; set; }
        public virtual DbSet<UserMessage> UserMessage { get; set; }
        public virtual DbSet<UserOfRun> UserOfRun { get; set; }
        public virtual DbSet<UserSpeday> UserSpeday { get; set; }
        public virtual DbSet<UserTempSch> UserTempSch { get; set; }
        public virtual DbSet<UserUpdates> UserUpdates { get; set; }
        public virtual DbSet<UserUsedSclasses> UserUsedSclasses { get; set; }
        public virtual DbSet<Userdefinegroup> Userdefinegroup { get; set; }
        public virtual DbSet<Userdefinelayout> Userdefinelayout { get; set; }
        public virtual DbSet<Userdefinesource> Userdefinesource { get; set; }
        public virtual DbSet<Userdefinevalue> Userdefinevalue { get; set; }
        public virtual DbSet<Userinfo> Userinfo { get; set; }
        public virtual DbSet<UsersMachines> UsersMachines { get; set; }
        public virtual DbSet<VBase> VBase { get; set; }
        public virtual DbSet<VDept> VDept { get; set; }
        public virtual DbSet<VDeptTest> VDeptTest { get; set; }
        public virtual DbSet<VDepta> VDepta { get; set; }
        public virtual DbSet<VDeptaTest> VDeptaTest { get; set; }
        public virtual DbSet<VGetInsurCnCodeByWorkcd> VGetInsurCnCodeByWorkcd { get; set; }
        public virtual DbSet<ViewAbswriteoff> ViewAbswriteoff { get; set; }
        public virtual DbSet<ViewDept> ViewDept { get; set; }
        public virtual DbSet<ViewDepta> ViewDepta { get; set; }
        public virtual DbSet<ViewEmpInfo> ViewEmpInfo { get; set; }
        public virtual DbSet<ViewJobs> ViewJobs { get; set; }
        public virtual DbSet<ViewRbaOt> ViewRbaOt { get; set; }
        public virtual DbSet<ViewRotechg> ViewRotechg { get; set; }
        public virtual DbSet<ViewSalarycorrection> ViewSalarycorrection { get; set; }
        public virtual DbSet<Wage> Wage { get; set; }
        public virtual DbSet<WageB> WageB { get; set; }
        public virtual DbSet<Waged> Waged { get; set; }
        public virtual DbSet<WagedB> WagedB { get; set; }
        public virtual DbSet<WagedSal> WagedSal { get; set; }
        public virtual DbSet<Wagedd> Wagedd { get; set; }
        public virtual DbSet<Wagesos> Wagesos { get; set; }
        public virtual DbSet<Wbsptyp> Wbsptyp { get; set; }
        public virtual DbSet<Wcode> Wcode { get; set; }
        public virtual DbSet<Websalbasd> Websalbasd { get; set; }
        public virtual DbSet<Welf> Welf { get; set; }
        public virtual DbSet<WfAppShiftShort> WfAppShiftShort { get; set; }
        public virtual DbSet<WorkadrSalary> WorkadrSalary { get; set; }
        public virtual DbSet<Workcd> Workcd { get; set; }
        public virtual DbSet<Works> Works { get; set; }
        public virtual DbSet<YearHoliday> YearHoliday { get; set; }
        public virtual DbSet<YearRest> YearRest { get; set; }
        public virtual DbSet<Yrermak> Yrermak { get; set; }
        public virtual DbSet<Yrerr> Yrerr { get; set; }
        public virtual DbSet<Yrfomat> Yrfomat { get; set; }
        public virtual DbSet<Yrformat> Yrformat { get; set; }
        public virtual DbSet<Yrforsub> Yrforsub { get; set; }
        public virtual DbSet<Yrhsn> Yrhsn { get; set; }
        public virtual DbSet<Yrid> Yrid { get; set; }
        public virtual DbSet<Yrina> Yrina { get; set; }
        public virtual DbSet<Yrinsur> Yrinsur { get; set; }
        public virtual DbSet<Yrmark> Yrmark { get; set; }
        public virtual DbSet<Yrtax> Yrtax { get; set; }
        public virtual DbSet<Yrwel> Yrwel { get; set; }
        public virtual DbSet<人事系統加班資料表> 人事系統加班資料表 { get; set; }
        public virtual DbSet<人事系統員工基本資料表> 人事系統員工基本資料表 { get; set; }
        public virtual DbSet<人事系統員工基本資料表需加異動日> 人事系統員工基本資料表需加異動日 { get; set; }
        public virtual DbSet<人事系統員工異動資料表> 人事系統員工異動資料表 { get; set; }
        public virtual DbSet<人事系統留停人員報表> 人事系統留停人員報表 { get; set; }
        public virtual DbSet<人事系統留停復職日期> 人事系統留停復職日期 { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                //optionsBuilder.UseSqlServer("Data Source =(local);Initial Catalog =StandardFoodsHR; User ID = jb;Password =JB8421;");
                optionsBuilder.UseSqlServer("Data Source=10.34.1.26;Initial Catalog=SYANGHR_T;Persist Security Info=True;User ID=jb;Password=JB8421;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Abaset>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm });

                entity.ToTable("ABASET");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Maxhrs)
                    .HasColumnName("MAXHRS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Abs>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime, e.HCode });

                entity.ToTable("ABS");

                entity.HasIndex(e => e.Bdate)
                    .HasName("BDATE");

                entity.HasIndex(e => e.Btime)
                    .HasName("BTIME");

                entity.HasIndex(e => e.Etime)
                    .HasName("ETIME");

                entity.HasIndex(e => e.HCode)
                    .HasName("HCODE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("IX_ABS_1");

                entity.HasIndex(e => e.Notedit)
                    .HasName("NOTEDIT");

                entity.HasIndex(e => e.TolHours)
                    .HasName("TOL_HOURS");

                entity.HasIndex(e => e.Yymm)
                    .HasName("YYMM");

                entity.HasIndex(e => new { e.Nobr, e.Bdate })
                    .HasName("IX_ABS_2");

                entity.HasIndex(e => new { e.Nocalc, e.Edate, e.Etime, e.Guid, e.Balance })
                    .HasName("IX_ABS");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AName)
                    .IsRequired()
                    .HasColumnName("A_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Balance).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Guid).HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LeaveHours).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Memo).HasMaxLength(2000);

                entity.Property(e => e.Nocalc).HasColumnName("nocalc");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notedit).HasColumnName("NOTEDIT");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Syscreate).HasColumnName("SYSCREATE");

                entity.Property(e => e.Syscreate1).HasColumnName("SYSCREATE1");

                entity.Property(e => e.TolDay)
                    .HasColumnName("TOL_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Attend)
                    .WithMany(p => p.AbsNavigation)
                    .HasForeignKey(d => new { d.Nobr, d.Bdate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ABS_ATTEND");
            });

            modelBuilder.Entity<Abs1>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime, e.HCode });

                entity.ToTable("ABS1");

                entity.HasIndex(e => e.Bdate)
                    .HasName("BDATE");

                entity.HasIndex(e => e.Btime)
                    .HasName("BTIME");

                entity.HasIndex(e => e.Edate)
                    .HasName("EDATE");

                entity.HasIndex(e => e.Etime)
                    .HasName("ETIME");

                entity.HasIndex(e => e.GoType)
                    .HasName("GO_TYPE");

                entity.HasIndex(e => e.HCode)
                    .HasName("H_CODE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.TolHours)
                    .HasName("TOL_HOURS");

                entity.HasIndex(e => e.Yymm)
                    .HasName("YYMM");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Abord).HasColumnName("ABORD");

                entity.Property(e => e.Bdate2)
                    .HasColumnName("BDATE2")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime2)
                    .IsRequired()
                    .HasColumnName("BTIME2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Btime3)
                    .IsRequired()
                    .HasColumnName("BTIME3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CfmMan)
                    .IsRequired()
                    .HasColumnName("CFM_MAN ")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cust)
                    .IsRequired()
                    .HasColumnName("CUST")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Edate2)
                    .HasColumnName("EDATE2")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Etime2)
                    .IsRequired()
                    .HasColumnName("ETIME2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Etime3)
                    .IsRequired()
                    .HasColumnName("ETIME3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoType)
                    .IsRequired()
                    .HasColumnName("GO_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NotDisp).HasColumnName("NOT_DISP");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Onetomany).HasColumnName("ONETOMANY");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Target)
                    .IsRequired()
                    .HasColumnName("TARGET")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Abs1Basetts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Abs1Basetts");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AbsAttend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AbsAttend");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrs)
                    .HasColumnName("WK_HRS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<AbsBasetts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AbsBasetts");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NotSum).HasColumnName("NOT_SUM");

                entity.Property(e => e.Rotet)
                    .IsRequired()
                    .HasColumnName("ROTET")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);

                entity.Property(e => e.YearRest)
                    .IsRequired()
                    .HasColumnName("YEAR_REST")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AbsEntitle>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("ABS_ENTITLE");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.AbsType)
                    .IsRequired()
                    .HasColumnName("ABS_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Entitle)
                    .HasColumnName("ENTITLE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasColumnName("REMARK")
                    .HasMaxLength(50);

                entity.Property(e => e.Trans).HasColumnName("TRANS");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AbsExt>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Hcode });

                entity.ToTable("ABS_EXT");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hcode)
                    .HasColumnName("HCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CashHours)
                    .HasColumnName("CASH_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.ExtHours)
                    .HasColumnName("EXT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HName)
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.Property(e => e.Ntrans).HasColumnName("NTRANS");

                entity.Property(e => e.Ptrans).HasColumnName("PTRANS");

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Sno)
                    .HasColumnName("SNO")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AbsHcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AbsHcode");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HEname)
                    .IsRequired()
                    .HasColumnName("H_ENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Syscreate).HasColumnName("SYSCREATE");

                entity.Property(e => e.TolDay)
                    .HasColumnName("TOL_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);

                entity.Property(e => e.YearRest)
                    .IsRequired()
                    .HasColumnName("YEAR_REST")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Absc>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("ABSC");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.AName)
                    .IsRequired()
                    .HasColumnName("A_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nocalc).HasColumnName("nocalc");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notedit).HasColumnName("NOTEDIT");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Syscreate).HasColumnName("SYSCREATE");

                entity.Property(e => e.TolDay)
                    .HasColumnName("TOL_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Absd>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("ABSD");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Absadd)
                    .IsRequired()
                    .HasColumnName("ABSADD")
                    .HasMaxLength(50);

                entity.Property(e => e.Abssubtract)
                    .IsRequired()
                    .HasColumnName("ABSSUBTRACT")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Usehour)
                    .HasColumnName("USEHOUR")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Abspre>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Btime, e.Etime });

                entity.ToTable("ABSPRE");

                entity.HasIndex(e => e.Abs1Hrs)
                    .HasName("ABS1_HRS");

                entity.HasIndex(e => e.AbsHrs)
                    .HasName("ABS_HRS");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.Btime)
                    .HasName("BTIME");

                entity.HasIndex(e => e.Etime)
                    .HasName("ETIME");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.SugHrs)
                    .HasName("SUG_HRS");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Abs1Hrs)
                    .HasColumnName("ABS1_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Abs2Hrs)
                    .HasColumnName("ABS2_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AbsHrs)
                    .HasColumnName("ABS_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.SugHrs)
                    .HasColumnName("SUG_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Trans).HasColumnName("TRANS");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Attend)
                    .WithMany(p => p.Abspre)
                    .HasForeignKey(d => new { d.Nobr, d.Adate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ABSPRE_ATTEND");
            });

            modelBuilder.Entity<Abst>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Edate, e.HCode });

                entity.ToTable("ABST");

                entity.HasIndex(e => e.Bdate)
                    .HasName("BDATE");

                entity.HasIndex(e => e.Edate)
                    .HasName("EDATE");

                entity.HasIndex(e => e.HCode)
                    .HasName("H_CODE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.TCode1)
                    .HasName("T_COD1");

                entity.HasIndex(e => e.TCode2)
                    .HasName("T_CODE2");

                entity.HasIndex(e => e.TCode3)
                    .HasName("T_CODE3");

                entity.HasIndex(e => e.TolHours)
                    .HasName("TOL_HOURS");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AName)
                    .IsRequired()
                    .HasColumnName("A_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TCode1)
                    .IsRequired()
                    .HasColumnName("T_CODE1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TCode2)
                    .IsRequired()
                    .HasColumnName("T_CODE2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TCode3)
                    .IsRequired()
                    .HasColumnName("T_CODE3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Acccd>(entity =>
            {
                entity.HasKey(e => e.Acccd1);

                entity.ToTable("ACCCD");

                entity.HasIndex(e => e.AccTr)
                    .HasName("ACC_TR");

                entity.HasIndex(e => e.Acccd1)
                    .HasName("IX_ACCCD");

                entity.HasIndex(e => e.Accname)
                    .HasName("ACCNAME");

                entity.Property(e => e.Acccd1)
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50);

                entity.Property(e => e.AccTr)
                    .IsRequired()
                    .HasColumnName("ACC_TR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AcccdDisp)
                    .HasColumnName("ACCCD_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Acccr)
                    .IsRequired()
                    .HasColumnName("ACCCR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Accdr)
                    .IsRequired()
                    .HasColumnName("ACCDR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Accname)
                    .IsRequired()
                    .HasColumnName("ACCNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.AccnameE)
                    .IsRequired()
                    .HasColumnName("ACCNAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Acccdattr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ACCCDATTR");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasKey(e => new { e.AccountType, e.Nobr });

                entity.ToTable("ACCOUNT");

                entity.Property(e => e.AccountType)
                    .HasColumnName("ACCOUNT_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.BankCode)
                    .IsRequired()
                    .HasColumnName("BANK_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Accounttype>(entity =>
            {
                entity.HasKey(e => e.AccountType1);

                entity.ToTable("ACCOUNTTYPE");

                entity.Property(e => e.AccountType1)
                    .HasColumnName("ACCOUNT_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.CurrencyType)
                    .IsRequired()
                    .HasColumnName("CURRENCY_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(500);

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasColumnName("TYPE_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Accsal>(entity =>
            {
                entity.HasKey(e => new { e.DNo, e.Acccd })
                    .HasName("PK__ACCSAL__7B4181088D0D5463");

                entity.ToTable("ACCSAL");

                entity.Property(e => e.DNo)
                    .HasColumnName("D_NO")
                    .HasMaxLength(50)
                    .HasComment("費用代碼");

                entity.Property(e => e.Acccd)
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50)
                    .HasComment("科目代碼");

                entity.Property(e => e.CodeC)
                    .HasColumnName("CODE_C")
                    .HasMaxLength(50)
                    .HasComment("貸方科目");

                entity.Property(e => e.CodeD)
                    .HasColumnName("CODE_D")
                    .HasMaxLength(50)
                    .HasComment("借方科目");

                entity.Property(e => e.DispCostname).HasColumnName("DISP_COSTNAME");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasComment("建檔日期");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasComment("建檔人員");
            });

            modelBuilder.Entity<Acgroup>(entity =>
            {
                entity.HasKey(e => e.GroupId)
                    .HasName("PK__ACGroup__149AF30A0A495B77");

                entity.ToTable("ACGroup");

                entity.Property(e => e.GroupId)
                    .HasColumnName("GroupID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Holidayvaild).HasColumnName("holidayvaild");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TimeZone1).HasDefaultValueSql("((0))");

                entity.Property(e => e.TimeZone2).HasDefaultValueSql("((0))");

                entity.Property(e => e.TimeZone3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Verifystyle).HasColumnName("verifystyle");
            });

            modelBuilder.Entity<ActimeZones>(entity =>
            {
                entity.HasKey(e => e.TimeZoneId)
                    .HasName("PK__ACTimeZo__78D387CF0678CA93");

                entity.ToTable("ACTimeZones");

                entity.Property(e => e.TimeZoneId)
                    .HasColumnName("TimeZoneID")
                    .ValueGeneratedNever();

                entity.Property(e => e.FriEnd).HasColumnType("datetime");

                entity.Property(e => e.FriStart).HasColumnType("datetime");

                entity.Property(e => e.MonEnd).HasColumnType("datetime");

                entity.Property(e => e.MonStart).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SatEnd).HasColumnType("datetime");

                entity.Property(e => e.SatStart).HasColumnType("datetime");

                entity.Property(e => e.SunEnd).HasColumnType("datetime");

                entity.Property(e => e.SunStart).HasColumnType("datetime");

                entity.Property(e => e.ThursEnd).HasColumnType("datetime");

                entity.Property(e => e.ThursStart).HasColumnType("datetime");

                entity.Property(e => e.TuesEnd).HasColumnType("datetime");

                entity.Property(e => e.TuesStart).HasColumnType("datetime");

                entity.Property(e => e.WedEnd).HasColumnType("datetime");

                entity.Property(e => e.WedStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<AcunlockComb>(entity =>
            {
                entity.HasKey(e => e.UnlockCombId)
                    .HasName("PK__ACUnlock__1F6C45702220E508");

                entity.ToTable("ACUnlockComb");

                entity.Property(e => e.UnlockCombId)
                    .HasColumnName("UnlockCombID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AlarmLog>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EnrollNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LogTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MachineAlias)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppConfig>(entity =>
            {
                entity.HasKey(e => new { e.Category, e.Code, e.Comp });

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.ControlType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DataType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameP)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(2000);
            });

            modelBuilder.Entity<AppSettingConfiguration>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("AppSetting_Configuration");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan).HasMaxLength(50);

                entity.Property(e => e.SettingItem).HasMaxLength(50);

                entity.Property(e => e.SettingValue).HasMaxLength(50);
            });

            modelBuilder.Entity<ApplicationInfo>(entity =>
            {
                entity.HasKey(e => e.ApplicationId);

                entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");

                entity.Property(e => e.ApplicationCategory)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AssemblyName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ClassName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark).IsRequired();
            });

            modelBuilder.Entity<ApplicationStructure>(entity =>
            {
                entity.HasKey(e => e.NodeId);

                entity.Property(e => e.NodeId).HasColumnName("NodeID");

                entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ApplicationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CustomizeSetting).IsRequired();

                entity.Property(e => e.DataAdapterId).HasColumnName("DataAdapterID");

                entity.Property(e => e.Field01).HasMaxLength(50);

                entity.Property(e => e.Field02).HasMaxLength(50);

                entity.Property(e => e.Field03).HasMaxLength(50);

                entity.Property(e => e.Field04).HasMaxLength(50);

                entity.Property(e => e.Field05).HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Tag)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ApplicationUserRule>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");

                entity.Property(e => e.ApplicationType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Field01).HasMaxLength(50);

                entity.Property(e => e.Field02).HasMaxLength(50);

                entity.Property(e => e.Field03).HasMaxLength(50);

                entity.Property(e => e.Field04).HasMaxLength(50);

                entity.Property(e => e.Field05).HasMaxLength(50);

                entity.Property(e => e.Tag)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("UserID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Army>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ARMY");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Assess>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.HasIndex(e => new { e.AssessCatSCode, e.SCode })
                    .HasName("uc_AssessID")
                    .IsUnique();

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.AssessCatSCode)
                    .IsRequired()
                    .HasColumnName("AssessCat_sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasMaxLength(50);

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SFraction)
                    .IsRequired()
                    .HasColumnName("sFraction")
                    .HasMaxLength(50);

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(500);

                entity.Property(e => e.SOrder).HasColumnName("sOrder");
            });

            modelBuilder.Entity<AssessCat>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.HasIndex(e => new { e.STemplateCode, e.SCode })
                    .HasName("uc_AssessCatID")
                    .IsUnique();

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(200);

                entity.Property(e => e.STemplateCode)
                    .IsRequired()
                    .HasColumnName("sTemplateCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AttParam>(entity =>
            {
                entity.HasKey(e => e.Paraname)
                    .HasName("PK__AttParam__889D235F4B5804C5");

                entity.Property(e => e.Paraname)
                    .HasColumnName("PARANAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Paratype)
                    .HasColumnName("PARATYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Paravalue)
                    .IsRequired()
                    .HasColumnName("PARAVALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Attbak>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate });

                entity.ToTable("ATTBAK");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Attcard>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.T1 })
                    .HasName("PK_ATTCARD_1");

                entity.ToTable("ATTCARD");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.Code)
                    .HasName("CODE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.Ser)
                    .HasName("SER");

                entity.HasIndex(e => e.T1)
                    .HasName("T1");

                entity.HasIndex(e => e.T2)
                    .HasName("T2");

                entity.HasIndex(e => new { e.Nobr, e.Adate })
                    .HasName("IX_ATTCARD");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.T1).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Dd1)
                    .IsRequired()
                    .HasColumnName("DD1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dd2)
                    .IsRequired()
                    .HasColumnName("DD2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dt1)
                    .HasColumnName("DT1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dt2)
                    .HasColumnName("DT2")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Lost1).HasColumnName("LOST1");

                entity.Property(e => e.Lost2).HasColumnName("LOST2");

                entity.Property(e => e.Nomody).HasColumnName("NOMODY");

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.T2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tt1)
                    .IsRequired()
                    .HasColumnName("TT1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tt2)
                    .IsRequired()
                    .HasColumnName("TT2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Attend)
                    .WithMany(p => p.Attcard)
                    .HasForeignKey(d => new { d.Nobr, d.Adate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ATTCARD_ATTEND");
            });

            modelBuilder.Entity<Attend>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate });

                entity.ToTable("ATTEND");

                entity.HasIndex(e => e.Abs)
                    .HasName("ABS");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.AttHrs)
                    .HasName("ATT_HRS");

                entity.HasIndex(e => e.EMins)
                    .HasName("E_MINS");

                entity.HasIndex(e => e.Forget)
                    .HasName("FORGET");

                entity.HasIndex(e => e.LateMins)
                    .HasName("LEATE_MINS");

                entity.HasIndex(e => e.NightHrs)
                    .HasName("NIGHT_HRS");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.Rote)
                    .HasName("ROTE");

                entity.HasIndex(e => new { e.Nobr, e.Adate })
                    .HasName("IX_ATTEND_1");

                entity.HasIndex(e => new { e.Abs, e.Rote, e.EMins, e.LateMins })
                    .HasName("IX_ATTEND");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Abs).HasColumnName("ABS");

                entity.Property(e => e.AdjCode)
                    .IsRequired()
                    .HasColumnName("ADJ_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AttHrs)
                    .HasColumnName("ATT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.DelayMins).HasColumnName("DELAY_MINS");

                entity.Property(e => e.EMins)
                    .HasColumnName("E_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.EarlyMins).HasColumnName("EARLY_MINS");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodsalcd)
                    .IsRequired()
                    .HasColumnName("FOODSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Forget)
                    .HasColumnName("FORGET")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LateMins)
                    .HasColumnName("LATE_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nigamt)
                    .HasColumnName("NIGAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NightHrs)
                    .HasColumnName("NIGHT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.RoteH)
                    .HasColumnName("ROTE_H")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasColumnType("decimal(16, 2)");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.Attend)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ATTEND_BASE");

                entity.HasOne(d => d.RoteNavigation)
                    .WithMany(p => p.Attend)
                    .HasForeignKey(d => d.Rote)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ATTEND_ROTE");
            });

            modelBuilder.Entity<AttendBasetts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AttendBasetts");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.HoliCode)
                    .IsRequired()
                    .HasColumnName("HOLI_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.NightHrs)
                    .HasColumnName("NIGHT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotet)
                    .IsRequired()
                    .HasColumnName("ROTET")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.WkHrs)
                    .HasColumnName("WK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Workcd)
                    .IsRequired()
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AuditedExc>(entity =>
            {
                entity.HasKey(e => e.Aeid)
                    .HasName("PK__AuditedE__40737CF36EA14102");

                entity.Property(e => e.Aeid).HasColumnName("AEID");

                entity.Property(e => e.CheckTime).HasColumnType("datetime");

                entity.Property(e => e.NewExcId).HasColumnName("NewExcID");

                entity.Property(e => e.Uname)
                    .HasColumnName("UName")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Utime)
                    .HasColumnName("UTime")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Authdevice>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.MachineId })
                    .HasName("AUTHKEY");

                entity.ToTable("AUTHDEVICE");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.MachineId).HasColumnName("MachineID");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Award>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate });

                entity.ToTable("AWARD");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => new { e.Nobr, e.Adate })
                    .HasName("IX_AWARD");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwChk).HasColumnName("AW_CHK");

                entity.Property(e => e.AwChk1).HasColumnName("AW_CHK1");

                entity.Property(e => e.AwChk2).HasColumnName("AW_CHK2");

                entity.Property(e => e.AwChk3).HasColumnName("AW_CHK3");

                entity.Property(e => e.Award1)
                    .HasColumnName("AWARD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Award2)
                    .HasColumnName("AWARD2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Award3)
                    .HasColumnName("AWARD3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Award4)
                    .HasColumnName("AWARD4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Award5).HasColumnName("AWARD5");

                entity.Property(e => e.AwardCode)
                    .IsRequired()
                    .HasColumnName("AWARD_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Fault1)
                    .HasColumnName("FAULT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fault2)
                    .HasColumnName("FAULT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fault3)
                    .HasColumnName("FAULT3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fault4)
                    .HasColumnName("FAULT4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FileNo)
                    .HasColumnName("File_no")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Up1File)
                    .HasColumnName("up1_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up1Name)
                    .HasColumnName("up1_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up2File)
                    .HasColumnName("up2_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up2Name)
                    .HasColumnName("up2_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up3File)
                    .HasColumnName("up3_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up3Name)
                    .HasColumnName("up3_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up4File)
                    .HasColumnName("up4_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up4Name)
                    .HasColumnName("up4_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up5File)
                    .HasColumnName("up5_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up5Name)
                    .HasColumnName("up5_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.Award)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AWARD_BASE");
            });

            modelBuilder.Entity<Awardcd>(entity =>
            {
                entity.HasKey(e => e.AwardCode);

                entity.ToTable("AWARDCD");

                entity.HasIndex(e => e.AwardCode)
                    .HasName("IX_AWARDCD");

                entity.HasIndex(e => e.Descr)
                    .HasName("DESCR");

                entity.Property(e => e.AwardCode)
                    .HasColumnName("AWARD_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AwardCodeDisp)
                    .HasColumnName("AWARD_CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<BankCode>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CodeDisp)
                    .HasColumnName("CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Base>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.ToTable("BASE");

                entity.HasIndex(e => e.AccountMa)
                    .HasName("IX_BASE_4");

                entity.HasIndex(e => e.Addr1)
                    .HasName("IX_BASE_3");

                entity.HasIndex(e => e.Birdt)
                    .HasName("BIRDT");

                entity.HasIndex(e => e.NameC)
                    .HasName("IX_BASE_1");

                entity.HasIndex(e => e.NameE)
                    .HasName("IX_BASE_2");

                entity.HasIndex(e => e.Nobr)
                    .HasName("IX_BASE");

                entity.HasIndex(e => e.Sex)
                    .HasName("SEX");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountCn)
                    .HasColumnName("ACCOUNT_CN")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountMa)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_MA")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountNa)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NA")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountUs)
                    .HasColumnName("ACCOUNT_US")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasColumnName("ADDR1")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR2")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AgentNobr1).HasMaxLength(50);

                entity.Property(e => e.AgentNobr2).HasMaxLength(50);

                entity.Property(e => e.Army)
                    .IsRequired()
                    .HasColumnName("ARMY")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ArmyType)
                    .IsRequired()
                    .HasColumnName("ARMY_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankCode)
                    .IsRequired()
                    .HasColumnName("BANK_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bankno)
                    .IsRequired()
                    .HasColumnName("BANKNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Basecd)
                    .HasColumnName("BASECD")
                    .HasMaxLength(50);

                entity.Property(e => e.Bbcall)
                    .IsRequired()
                    .HasColumnName("BBCALL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Birdt)
                    .HasColumnName("BIRDT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Blood)
                    .IsRequired()
                    .HasColumnName("BLOOD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BornAddr)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CandidatesWays).HasMaxLength(50);

                entity.Property(e => e.ContGsm)
                    .IsRequired()
                    .HasColumnName("CONT_GSM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContGsm2)
                    .IsRequired()
                    .HasColumnName("CONT_GSM2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContMan)
                    .IsRequired()
                    .HasColumnName("CONT_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContMan2)
                    .IsRequired()
                    .HasColumnName("CONT_MAN2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContRel1)
                    .IsRequired()
                    .HasColumnName("CONT_REL1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContRel2)
                    .IsRequired()
                    .HasColumnName("CONT_REL2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContTel)
                    .IsRequired()
                    .HasColumnName("CONT_TEL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContTel2)
                    .IsRequired()
                    .HasColumnName("CONT_TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdType)
                    .IsRequired()
                    .HasColumnName("ID_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Marry)
                    .IsRequired()
                    .HasColumnName("MARRY")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'''')");

                entity.Property(e => e.Matno)
                    .IsRequired()
                    .HasColumnName("MATNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NNobr)
                    .IsRequired()
                    .HasColumnName("N_NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NameAd)
                    .HasColumnName("NAME_AD")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NameP)
                    .IsRequired()
                    .HasColumnName("NAME_P")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nation)
                    .HasColumnName("NATION")
                    .HasMaxLength(50);

                entity.Property(e => e.NhiId)
                    .HasColumnName("NHI_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.NobrB)
                    .IsRequired()
                    .HasColumnName("NOBR_B")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Photo)
                    .HasColumnName("PHOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Postcode1)
                    .IsRequired()
                    .HasColumnName("POSTCODE1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Postcode2)
                    .IsRequired()
                    .HasColumnName("POSTCODE2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Pretax)
                    .HasColumnName("PRETAX")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ProAddr1)
                    .IsRequired()
                    .HasColumnName("PRO_ADDR1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProAddr2)
                    .IsRequired()
                    .HasColumnName("PRO_ADDR2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProId1)
                    .IsRequired()
                    .HasColumnName("PRO_ID1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProId2)
                    .IsRequired()
                    .HasColumnName("PRO_ID2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProMan1)
                    .IsRequired()
                    .HasColumnName("PRO_MAN1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProMan2)
                    .IsRequired()
                    .HasColumnName("PRO_MAN2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProTel1)
                    .IsRequired()
                    .HasColumnName("PRO_TEL1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProTel2)
                    .IsRequired()
                    .HasColumnName("PRO_TEL2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("SEX")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Subtel)
                    .IsRequired()
                    .HasColumnName("SUBTEL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Taxcnt)
                    .HasColumnName("TAXCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxno)
                    .IsRequired()
                    .HasColumnName("TAXNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasColumnName("TEL2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Up1File)
                    .HasColumnName("up1_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up1Name)
                    .HasColumnName("up1_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up2File)
                    .HasColumnName("up2_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up2Name)
                    .HasColumnName("up2_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up3File)
                    .HasColumnName("up3_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up3Name)
                    .HasColumnName("up3_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up4File)
                    .HasColumnName("up4_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up4Name)
                    .HasColumnName("up4_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up5File)
                    .HasColumnName("up5_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up5Name)
                    .HasColumnName("up5_name")
                    .HasMaxLength(50);

                entity.Property(e => e.YearDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<BaseBak20140912>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_BAK_20140912");

                entity.Property(e => e.AccountCn)
                    .HasColumnName("ACCOUNT_CN")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountMa)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_MA")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountNa)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NA")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountUs)
                    .HasColumnName("ACCOUNT_US")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasColumnName("ADDR1")
                    .HasMaxLength(60);

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR2")
                    .HasMaxLength(60);

                entity.Property(e => e.Army)
                    .IsRequired()
                    .HasColumnName("ARMY")
                    .HasMaxLength(50);

                entity.Property(e => e.ArmyType)
                    .IsRequired()
                    .HasColumnName("ARMY_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.BankCode)
                    .IsRequired()
                    .HasColumnName("BANK_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Bankno)
                    .IsRequired()
                    .HasColumnName("BANKNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Basecd)
                    .HasColumnName("BASECD")
                    .HasMaxLength(50);

                entity.Property(e => e.Bbcall)
                    .IsRequired()
                    .HasColumnName("BBCALL")
                    .HasMaxLength(50);

                entity.Property(e => e.Birdt)
                    .HasColumnName("BIRDT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Blood)
                    .IsRequired()
                    .HasColumnName("BLOOD")
                    .HasMaxLength(50);

                entity.Property(e => e.BornAddr)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm)
                    .IsRequired()
                    .HasColumnName("CONT_GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm2)
                    .IsRequired()
                    .HasColumnName("CONT_GSM2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan)
                    .IsRequired()
                    .HasColumnName("CONT_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan2)
                    .IsRequired()
                    .HasColumnName("CONT_MAN2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContRel1)
                    .IsRequired()
                    .HasColumnName("CONT_REL1")
                    .HasMaxLength(50);

                entity.Property(e => e.ContRel2)
                    .IsRequired()
                    .HasColumnName("CONT_REL2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel)
                    .IsRequired()
                    .HasColumnName("CONT_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel2)
                    .IsRequired()
                    .HasColumnName("CONT_TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.IdType)
                    .IsRequired()
                    .HasColumnName("ID_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Marry)
                    .IsRequired()
                    .HasColumnName("MARRY")
                    .HasMaxLength(50);

                entity.Property(e => e.Matno)
                    .IsRequired()
                    .HasColumnName("MATNO")
                    .HasMaxLength(50);

                entity.Property(e => e.NNobr)
                    .IsRequired()
                    .HasColumnName("N_NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NameAd)
                    .HasColumnName("NAME_AD")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.NameP)
                    .IsRequired()
                    .HasColumnName("NAME_P")
                    .HasMaxLength(50);

                entity.Property(e => e.Nation)
                    .HasColumnName("NATION")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NobrB)
                    .IsRequired()
                    .HasColumnName("NOBR_B")
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(50);

                entity.Property(e => e.Photo)
                    .HasColumnName("PHOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Postcode1)
                    .IsRequired()
                    .HasColumnName("POSTCODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode2)
                    .IsRequired()
                    .HasColumnName("POSTCODE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Pretax)
                    .HasColumnName("PRETAX")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ProAddr1)
                    .IsRequired()
                    .HasColumnName("PRO_ADDR1")
                    .HasMaxLength(50);

                entity.Property(e => e.ProAddr2)
                    .IsRequired()
                    .HasColumnName("PRO_ADDR2")
                    .HasMaxLength(50);

                entity.Property(e => e.ProId1)
                    .IsRequired()
                    .HasColumnName("PRO_ID1")
                    .HasMaxLength(50);

                entity.Property(e => e.ProId2)
                    .IsRequired()
                    .HasColumnName("PRO_ID2")
                    .HasMaxLength(50);

                entity.Property(e => e.ProMan1)
                    .IsRequired()
                    .HasColumnName("PRO_MAN1")
                    .HasMaxLength(50);

                entity.Property(e => e.ProMan2)
                    .IsRequired()
                    .HasColumnName("PRO_MAN2")
                    .HasMaxLength(50);

                entity.Property(e => e.ProTel1)
                    .IsRequired()
                    .HasColumnName("PRO_TEL1")
                    .HasMaxLength(50);

                entity.Property(e => e.ProTel2)
                    .IsRequired()
                    .HasColumnName("PRO_TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("SEX")
                    .HasMaxLength(50);

                entity.Property(e => e.Subtel)
                    .IsRequired()
                    .HasColumnName("SUBTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxcnt)
                    .HasColumnName("TAXCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxno)
                    .IsRequired()
                    .HasColumnName("TAXNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasColumnName("TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.Up1File)
                    .HasColumnName("up1_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up1Name)
                    .HasColumnName("up1_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up2File)
                    .HasColumnName("up2_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up2Name)
                    .HasColumnName("up2_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up3File)
                    .HasColumnName("up3_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up3Name)
                    .HasColumnName("up3_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up4File)
                    .HasColumnName("up4_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up4Name)
                    .HasColumnName("up4_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up5File)
                    .HasColumnName("up5_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up5Name)
                    .HasColumnName("up5_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<BaseOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("base_old");

                entity.Property(e => e.AccountCn)
                    .HasColumnName("ACCOUNT_CN")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountMa)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_MA")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountNa)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NA")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountUs)
                    .HasColumnName("ACCOUNT_US")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasColumnName("ADDR1")
                    .HasMaxLength(60);

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR2")
                    .HasMaxLength(60);

                entity.Property(e => e.AgentNobr1).HasMaxLength(50);

                entity.Property(e => e.AgentNobr2).HasMaxLength(50);

                entity.Property(e => e.Army)
                    .IsRequired()
                    .HasColumnName("ARMY")
                    .HasMaxLength(50);

                entity.Property(e => e.ArmyType)
                    .IsRequired()
                    .HasColumnName("ARMY_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.BankCode)
                    .IsRequired()
                    .HasColumnName("BANK_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Bankno)
                    .IsRequired()
                    .HasColumnName("BANKNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Basecd)
                    .HasColumnName("BASECD")
                    .HasMaxLength(50);

                entity.Property(e => e.Bbcall)
                    .IsRequired()
                    .HasColumnName("BBCALL")
                    .HasMaxLength(50);

                entity.Property(e => e.Birdt)
                    .HasColumnName("BIRDT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Blood)
                    .IsRequired()
                    .HasColumnName("BLOOD")
                    .HasMaxLength(50);

                entity.Property(e => e.BornAddr)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm)
                    .IsRequired()
                    .HasColumnName("CONT_GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm2)
                    .IsRequired()
                    .HasColumnName("CONT_GSM2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan)
                    .IsRequired()
                    .HasColumnName("CONT_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan2)
                    .IsRequired()
                    .HasColumnName("CONT_MAN2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContRel1)
                    .IsRequired()
                    .HasColumnName("CONT_REL1")
                    .HasMaxLength(50);

                entity.Property(e => e.ContRel2)
                    .IsRequired()
                    .HasColumnName("CONT_REL2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel)
                    .IsRequired()
                    .HasColumnName("CONT_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel2)
                    .IsRequired()
                    .HasColumnName("CONT_TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.IdType)
                    .IsRequired()
                    .HasColumnName("ID_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Marry)
                    .IsRequired()
                    .HasColumnName("MARRY")
                    .HasMaxLength(50);

                entity.Property(e => e.Matno)
                    .IsRequired()
                    .HasColumnName("MATNO")
                    .HasMaxLength(50);

                entity.Property(e => e.NNobr)
                    .IsRequired()
                    .HasColumnName("N_NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NameAd)
                    .HasColumnName("NAME_AD")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.NameP)
                    .IsRequired()
                    .HasColumnName("NAME_P")
                    .HasMaxLength(50);

                entity.Property(e => e.Nation)
                    .HasColumnName("NATION")
                    .HasMaxLength(50);

                entity.Property(e => e.NhiId)
                    .HasColumnName("NHI_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NobrB)
                    .IsRequired()
                    .HasColumnName("NOBR_B")
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(50);

                entity.Property(e => e.Photo)
                    .HasColumnName("PHOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Postcode1)
                    .IsRequired()
                    .HasColumnName("POSTCODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode2)
                    .IsRequired()
                    .HasColumnName("POSTCODE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Pretax)
                    .HasColumnName("PRETAX")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ProAddr1)
                    .IsRequired()
                    .HasColumnName("PRO_ADDR1")
                    .HasMaxLength(50);

                entity.Property(e => e.ProAddr2)
                    .IsRequired()
                    .HasColumnName("PRO_ADDR2")
                    .HasMaxLength(50);

                entity.Property(e => e.ProId1)
                    .IsRequired()
                    .HasColumnName("PRO_ID1")
                    .HasMaxLength(50);

                entity.Property(e => e.ProId2)
                    .IsRequired()
                    .HasColumnName("PRO_ID2")
                    .HasMaxLength(50);

                entity.Property(e => e.ProMan1)
                    .IsRequired()
                    .HasColumnName("PRO_MAN1")
                    .HasMaxLength(50);

                entity.Property(e => e.ProMan2)
                    .IsRequired()
                    .HasColumnName("PRO_MAN2")
                    .HasMaxLength(50);

                entity.Property(e => e.ProTel1)
                    .IsRequired()
                    .HasColumnName("PRO_TEL1")
                    .HasMaxLength(50);

                entity.Property(e => e.ProTel2)
                    .IsRequired()
                    .HasColumnName("PRO_TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("SEX")
                    .HasMaxLength(50);

                entity.Property(e => e.Subtel)
                    .IsRequired()
                    .HasColumnName("SUBTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxcnt)
                    .HasColumnName("TAXCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxno)
                    .IsRequired()
                    .HasColumnName("TAXNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasColumnName("TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.Up1File)
                    .HasColumnName("up1_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up1Name)
                    .HasColumnName("up1_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up2File)
                    .HasColumnName("up2_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up2Name)
                    .HasColumnName("up2_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up3File)
                    .HasColumnName("up3_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up3Name)
                    .HasColumnName("up3_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up4File)
                    .HasColumnName("up4_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up4Name)
                    .HasColumnName("up4_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up5File)
                    .HasColumnName("up5_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up5Name)
                    .HasColumnName("up5_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Basebak>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate });

                entity.ToTable("BASEBAK");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Basecd>(entity =>
            {
                entity.HasKey(e => e.Basecd1);

                entity.ToTable("BASECD");

                entity.Property(e => e.Basecd1)
                    .HasColumnName("BASECD")
                    .HasMaxLength(50);

                entity.Property(e => e.Basecdname)
                    .HasColumnName("BASECDNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.SupType)
                    .HasColumnName("SUP_TYPE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Basetts>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Ttscode })
                    .HasName("PK_BASETTS_1");

                entity.ToTable("BASETTS");

                entity.HasIndex(e => e.Calot)
                    .HasName("IX_BASETTS_13");

                entity.HasIndex(e => e.Comp)
                    .HasName("IX_BASETTS_14");

                entity.HasIndex(e => e.Dept)
                    .HasName("IX_BASETTS_4");

                entity.HasIndex(e => e.Depts)
                    .HasName("IX_BASETTS_5");

                entity.HasIndex(e => e.Di)
                    .HasName("IX_BASETTS_10");

                entity.HasIndex(e => e.Indt)
                    .HasName("IX_BASETTS_2");

                entity.HasIndex(e => e.Job)
                    .HasName("IX_BASETTS_6");

                entity.HasIndex(e => e.Jobl)
                    .HasName("IX_BASETTS_7");

                entity.HasIndex(e => e.Jobs)
                    .HasName("IX_BASETTS_12");

                entity.HasIndex(e => e.Nobr)
                    .HasName("IX_BASETTS_8");

                entity.HasIndex(e => e.Oudt)
                    .HasName("IX_BASETTS_3");

                entity.HasIndex(e => e.Saladr)
                    .HasName("IX_BASETTS_15");

                entity.HasIndex(e => e.Saltp)
                    .HasName("IX_BASETTS_11");

                entity.HasIndex(e => e.Ttscode)
                    .HasName("IX_BASETTS_9");

                entity.HasIndex(e => new { e.Dept, e.Calabs, e.Ttscode })
                    .HasName("IX_BASETTS");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ttscode)
                    .HasColumnName("TTSCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ApDate)
                    .HasColumnName("AP_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Apgrpcd)
                    .IsRequired()
                    .HasColumnName("APGRPCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BonusGroup)
                    .HasColumnName("BONUS_GROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.Calabs).HasColumnName("CALABS");

                entity.Property(e => e.CalcSalType).HasMaxLength(50);

                entity.Property(e => e.Calot)
                    .IsRequired()
                    .HasColumnName("CALOT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Carcd)
                    .IsRequired()
                    .HasColumnName("CARCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Card)
                    .IsRequired()
                    .HasColumnName("CARD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CardId)
                    .HasColumnName("CardID")
                    .HasMaxLength(50);

                entity.Property(e => e.Cindt)
                    .HasColumnName("CINDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CountPass).HasColumnName("COUNT_PASS");

                entity.Property(e => e.Currency)
                    .HasColumnName("CURRENCY")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Deptm)
                    .IsRequired()
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DoorGuard).HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fixrate).HasColumnName("FIXRATE");

                entity.Property(e => e.Fulatt).HasColumnName("FULATT");

                entity.Property(e => e.GrpAmt)
                    .HasColumnName("GRP_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HoliCode)
                    .IsRequired()
                    .HasColumnName("HOLI_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InsgType)
                    .IsRequired()
                    .HasColumnName("INSG_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsSelfout).HasColumnName("IS_SELFOUT");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Jobl)
                    .IsRequired()
                    .HasColumnName("JOBL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Jobo)
                    .IsRequired()
                    .HasColumnName("JOBO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Jobs)
                    .IsRequired()
                    .HasColumnName("JOBS")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.Mang1).HasColumnName("MANG1");

                entity.Property(e => e.Mange).HasColumnName("MANGE");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(180)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nocard).HasColumnName("NOCARD");

                entity.Property(e => e.Noeat).HasColumnName("NOEAT");

                entity.Property(e => e.Noot).HasColumnName("NOOT");

                entity.Property(e => e.Noret).HasColumnName("NORET");

                entity.Property(e => e.Nospamt).HasColumnName("NOSPAMT");

                entity.Property(e => e.Nospec).HasColumnName("NOSPEC");

                entity.Property(e => e.Noter).HasColumnName("NOTER");

                entity.Property(e => e.Notlate).HasColumnName("NOTLATE");

                entity.Property(e => e.Nowage).HasColumnName("NOWAGE");

                entity.Property(e => e.Nowel).HasColumnName("NOWEL");

                entity.Property(e => e.OilSubsidy).HasMaxLength(50);

                entity.Property(e => e.Onlyontime).HasColumnName("ONLYONTIME");

                entity.Property(e => e.Oudt)
                    .HasColumnName("OUDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OutPost).HasMaxLength(50);

                entity.Property(e => e.Outcd)
                    .IsRequired()
                    .HasColumnName("OUTCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PassDate)
                    .HasColumnName("PASS_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReinstateDate).HasColumnType("datetime");

                entity.Property(e => e.Retchoo)
                    .IsRequired()
                    .HasColumnName("RETCHOO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Retdate)
                    .HasColumnName("RETDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Retdate1)
                    .HasColumnName("RETDATE1")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Retrate)
                    .HasColumnName("RETRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Rotet)
                    .IsRequired()
                    .HasColumnName("ROTET")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Saltp)
                    .IsRequired()
                    .HasColumnName("SALTP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Stdt)
                    .HasColumnName("STDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Stindt)
                    .HasColumnName("STINDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Stoudt)
                    .HasColumnName("STOUDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TaxDate)
                    .HasColumnName("TAX_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TaxEdate)
                    .HasColumnName("TAX_EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Taxcn)
                    .HasColumnName("TAXCN")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscd)
                    .IsRequired()
                    .HasColumnName("TTSCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WkYrs)
                    .HasColumnName("WK_YRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Workcd)
                    .IsRequired()
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.YrDays)
                    .HasColumnName("YR_DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ytaxcn)
                    .HasColumnName("YTAXCN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('YRCN')");
            });

            modelBuilder.Entity<Blood>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BLOOD");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<BonusDeptAmt>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("bonus_deptAmt");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Amt).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasMaxLength(50);

                entity.Property(e => e.GroupId)
                    .HasColumnName("groupID")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<BonusEmpNum>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("bonus_empNum");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num1)
                    .HasColumnName("num1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num2)
                    .HasColumnName("num2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num3)
                    .HasColumnName("num3")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<BonusEmpSet>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("bonus_empSet");

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasMaxLength(50);

                entity.Property(e => e.GroupId)
                    .HasColumnName("groupID")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<BonusGroup>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Temp1).HasMaxLength(50);

                entity.Property(e => e.Temp2).HasMaxLength(50);

                entity.Property(e => e.Temp3).HasMaxLength(50);
            });

            modelBuilder.Entity<BounsEmpAmt>(entity =>
            {
                entity.HasKey(e => e.AutoKey)
                    .HasName("PK_bountEmpAmt");

                entity.ToTable("bouns_EmpAmt");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Amt1).HasColumnName("amt1");

                entity.Property(e => e.Amt2).HasColumnName("amt2");

                entity.Property(e => e.Amt3).HasColumnName("amt3");

                entity.Property(e => e.Amt4).HasColumnName("amt4");

                entity.Property(e => e.Amt5).HasColumnName("amt5");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<CalFreq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CAL_FREQ");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<CalType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CAL_TYPE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<CalcCondition>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("CALC_CONDITION");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.CondType)
                    .IsRequired()
                    .HasColumnName("COND_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Condition)
                    .IsRequired()
                    .HasColumnName("CONDITION")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasColumnName("SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Value1)
                    .IsRequired()
                    .HasColumnName("VALUE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Value2)
                    .IsRequired()
                    .HasColumnName("VALUE2")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Car>(entity =>
            {
                entity.Property(e => e.CanRent)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CarId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LicensePlate).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CarRentRecord>(entity =>
            {
                entity.Property(e => e.Canceler).HasMaxLength(50);

                entity.Property(e => e.Contents).HasMaxLength(2000);

                entity.Property(e => e.Destination).HasMaxLength(1000);

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.Property(e => e.WritedBy).HasMaxLength(50);

                entity.Property(e => e.WritedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Carcd>(entity =>
            {
                entity.HasKey(e => e.Carcd1);

                entity.ToTable("CARCD");

                entity.HasIndex(e => e.Carcd1)
                    .HasName("IX_CARCD");

                entity.Property(e => e.Carcd1)
                    .HasColumnName("CARCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Carname)
                    .IsRequired()
                    .HasColumnName("CARNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Card>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Ontime });

                entity.ToTable("CARD");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.Cardno)
                    .HasName("CARDNO");

                entity.HasIndex(e => e.Code)
                    .HasName("CODE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.Ontime)
                    .HasName("ONTME");

                entity.HasIndex(e => new { e.Code, e.Nobr, e.Adate, e.Ontime })
                    .HasName("IX_CARD");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ontime)
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.CardAppDetailsId).HasColumnName("CardAppDetailsID");

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fulltime)
                    .HasColumnName("FULLTIME")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ipadd)
                    .IsRequired()
                    .HasColumnName("IPADD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Los).HasColumnName("LOS");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NotTran).HasColumnName("NOT_TRAN");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Attend)
                    .WithMany(p => p.Card)
                    .HasForeignKey(d => new { d.Nobr, d.Adate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CARD_ATTEND");
            });

            modelBuilder.Entity<CardAppDetails>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.AppRegistryKey)
                    .HasColumnName("APP_RegistryKey")
                    .HasMaxLength(50);

                entity.Property(e => e.Bssid)
                    .HasColumnName("BSSID")
                    .HasMaxLength(50);

                entity.Property(e => e.CardProcess).HasColumnType("datetime");

                entity.Property(e => e.CardSend).HasColumnType("datetime");

                entity.Property(e => e.CardStart).HasColumnType("datetime");

                entity.Property(e => e.CardTypeCode).HasMaxLength(50);

                entity.Property(e => e.IpAddress)
                    .HasColumnName("IP_Address")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.Latitude).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Mac)
                    .HasColumnName("MAC")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr).HasMaxLength(50);

                entity.Property(e => e.Ssid)
                    .HasColumnName("SSID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CardAppImages>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.CardAppDetailsId).HasColumnName("CardAppDetailsID");

                entity.Property(e => e.Nobr).HasMaxLength(50);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CardSignImages>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CardSignLog>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.AppRegistryKey).HasColumnName("APP_RegistryKey");

                entity.Property(e => e.CardProcess).HasColumnType("datetime");

                entity.Property(e => e.CardSend).HasColumnType("datetime");

                entity.Property(e => e.CardStart).HasColumnType("datetime");

                entity.Property(e => e.IpAddress).HasColumnName("IP_Address");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.Latitude).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Mac).HasColumnName("MAC");

                entity.Property(e => e.Qrcode).HasColumnName("QRCode");

                entity.Property(e => e.Ssid).HasColumnName("SSID");
            });

            modelBuilder.Entity<Cardapp>(entity =>
            {
                entity.HasKey(e => e.Cardno)
                    .HasName("PK_CARDAPP_1");

                entity.ToTable("CARDAPP");

                entity.HasIndex(e => e.Bdate)
                    .HasName("BDATE");

                entity.HasIndex(e => e.Cardno)
                    .HasName("CARDNO");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => new { e.Nobr, e.Cardno, e.Bdate })
                    .HasName("IX_CARDAPP");

                entity.Property(e => e.Cardno)
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Temps).HasColumnName("TEMPS");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.Cardapp)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CARDAPP_BASE");
            });

            modelBuilder.Entity<Cardcd>(entity =>
            {
                entity.HasKey(e => e.Cardcd1);

                entity.ToTable("CARDCD");

                entity.Property(e => e.Cardcd1)
                    .HasColumnName("CARDCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.Carddesc)
                    .IsRequired()
                    .HasColumnName("CARDDESC")
                    .HasMaxLength(50);

                entity.Property(e => e.Food).HasColumnName("FOOD");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CardcdDamt>(entity =>
            {
                entity.HasKey(e => e.Auto)
                    .HasName("PK_CARDCD_DAMT_1");

                entity.ToTable("CARDCD_DAMT");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Cardcd)
                    .IsRequired()
                    .HasColumnName("CARDCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Check1).HasColumnName("CHECK1");

                entity.Property(e => e.Check2).HasColumnName("CHECK2");

                entity.Property(e => e.Check3).HasColumnName("CHECK3");

                entity.Property(e => e.Check4).HasColumnName("CHECK4");

                entity.Property(e => e.Check5).HasColumnName("CHECK5");

                entity.Property(e => e.Check6).HasColumnName("CHECK6");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Salfunction)
                    .HasColumnName("SALFUNCTION")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.StrB)
                    .IsRequired()
                    .HasColumnName("STR_B")
                    .HasMaxLength(50);

                entity.Property(e => e.StrE)
                    .IsRequired()
                    .HasColumnName("STR_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Value1)
                    .HasColumnName("VALUE1")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Value2)
                    .HasColumnName("VALUE2")
                    .HasColumnType("decimal(14, 4)");

                entity.HasOne(d => d.CardcdNavigation)
                    .WithMany(p => p.CardcdDamt)
                    .HasForeignKey(d => d.Cardcd)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CARDCD_DAMT_CARDCD");

                entity.HasOne(d => d.SalCodeNavigation)
                    .WithMany(p => p.CardcdDamt)
                    .HasForeignKey(d => d.SalCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CARDCD_DAMT_SALCODE");
            });

            modelBuilder.Entity<Cardlosd>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("CARDLOSD");

                entity.HasIndex(e => e.Att)
                    .HasName("ATT");

                entity.HasIndex(e => e.Code)
                    .HasName("IX_CARDLOSD");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Cardtmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CARDTMP");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.Cardno)
                    .HasName("CARDNO");

                entity.HasIndex(e => e.Cardno1)
                    .HasName("CARDNO1");

                entity.HasIndex(e => e.Ontime)
                    .HasName("ONTIME");

                entity.HasIndex(e => e.Ser)
                    .HasName("SER");

                entity.HasIndex(e => new { e.Cardno, e.Adate, e.Ontime })
                    .HasName("IX_CARDTMP")
                    .IsUnique();

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardno1)
                    .IsRequired()
                    .HasColumnName("CARDNO1")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Ontime)
                    .IsRequired()
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Warn)
                    .IsRequired()
                    .HasColumnName("WARN")
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<Cartime>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CARTIME");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.Carcd)
                    .HasName("CARDCE");

                entity.HasIndex(e => e.Ontime)
                    .HasName("ONTIME");

                entity.HasIndex(e => new { e.Carcd, e.Adate, e.Ontime })
                    .HasName("IX_CARTIME")
                    .IsUnique();

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carcd)
                    .IsRequired()
                    .HasColumnName("CARCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Ontime)
                    .IsRequired()
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CheckId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECK_ID");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Checkexact>(entity =>
            {
                entity.HasKey(e => e.Exactid)
                    .HasName("EXACTID");

                entity.ToTable("CHECKEXACT");

                entity.Property(e => e.Exactid).HasColumnName("EXACTID");

                entity.Property(e => e.Checktime)
                    .HasColumnName("CHECKTIME")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checktype)
                    .HasColumnName("CHECKTYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Date)
                    .HasColumnName("DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Incount)
                    .HasColumnName("INCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Isadd)
                    .HasColumnName("ISADD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Iscount)
                    .HasColumnName("ISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Isdelete)
                    .HasColumnName("ISDELETE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ismodify)
                    .HasColumnName("ISMODIFY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Modifyby)
                    .HasColumnName("MODIFYBY")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Userid)
                    .HasColumnName("USERID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Yuyin)
                    .HasColumnName("YUYIN")
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Checkinout>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.Checktime })
                    .HasName("USERCHECKTIME");

                entity.ToTable("CHECKINOUT");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.Checktime)
                    .HasColumnName("CHECKTIME")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Checktype)
                    .HasColumnName("CHECKTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('I')");

                entity.Property(e => e.Memoinfo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sensorid)
                    .HasColumnName("SENSORID")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Sn)
                    .HasColumnName("sn")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserExtFmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.Verifycode)
                    .HasColumnName("VERIFYCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WorkCode)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ChkOtNightFood>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("chk_OT_night_food");

                entity.Property(e => e.Abs).HasColumnName("ABS");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AdjCode)
                    .IsRequired()
                    .HasColumnName("ADJ_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AftNightamt)
                    .HasColumnName("AFT_NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Alllates)
                    .HasColumnName("ALLLATES")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Alllates1)
                    .HasColumnName("ALLLATES1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AttEnd)
                    .IsRequired()
                    .HasColumnName("ATT_END")
                    .HasMaxLength(50);

                entity.Property(e => e.AttHrs)
                    .HasColumnName("ATT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Bcolor)
                    .HasColumnName("BCOLOR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.BefNightamt)
                    .HasColumnName("BEF_NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Calot)
                    .IsRequired()
                    .HasColumnName("CALOT")
                    .HasMaxLength(50);

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.Dd)
                    .IsRequired()
                    .HasColumnName("DD")
                    .HasMaxLength(50);

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DkHrs)
                    .HasColumnName("DK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.EMins)
                    .HasColumnName("E_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Earaward).HasColumnName("EARAWARD");

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr11).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr4).HasColumnType("datetime");

                entity.Property(e => e.Expr6).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Expr7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr9).HasColumnType("datetime");

                entity.Property(e => e.Fcolor)
                    .HasColumnName("FCOLOR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FixAmt).HasColumnName("FIX_AMT");

                entity.Property(e => e.FoodCnt)
                    .HasColumnName("FOOD_CNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FoodPri)
                    .HasColumnName("FOOD_PRI")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt1)
                    .HasColumnName("FOODAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamto)
                    .HasColumnName("FOODAMTO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodrule)
                    .HasColumnName("FOODRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Foodsalcd)
                    .IsRequired()
                    .HasColumnName("FOODSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Forget)
                    .HasColumnName("FORGET")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FstHours)
                    .HasColumnName("FST_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Helf).HasColumnName("HELF");

                entity.Property(e => e.HoliMins)
                    .HasColumnName("HOLI_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LateMins)
                    .HasColumnName("LATE_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.MoHrs)
                    .HasColumnName("MO_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nigamt)
                    .HasColumnName("NIGAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Night).HasColumnName("NIGHT");

                entity.Property(e => e.NightHrs)
                    .HasColumnName("NIGHT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightamt)
                    .HasColumnName("NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightamt1)
                    .HasColumnName("NIGHTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightrule)
                    .HasColumnName("NIGHTRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nightsalcd)
                    .IsRequired()
                    .HasColumnName("NIGHTSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH100)
                    .HasColumnName("NOP_H_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH133)
                    .HasColumnName("NOP_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH167)
                    .HasColumnName("NOP_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW133)
                    .HasColumnName("NOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW167)
                    .HasColumnName("NOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW200)
                    .HasColumnName("NOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Notfood).HasColumnName("NOTFOOD");

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OffTime)
                    .IsRequired()
                    .HasColumnName("OFF_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Offtime2)
                    .IsRequired()
                    .HasColumnName("OFFTIME2")
                    .HasMaxLength(50);

                entity.Property(e => e.OnTime)
                    .IsRequired()
                    .HasColumnName("ON_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ot).HasColumnName("OT");

                entity.Property(e => e.OtBegin)
                    .IsRequired()
                    .HasColumnName("OT_BEGIN")
                    .HasMaxLength(50);

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtEdate)
                    .HasColumnName("OT_EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otno)
                    .IsRequired()
                    .HasColumnName("OTNO")
                    .HasMaxLength(50);

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrcd)
                    .IsRequired()
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.OverTime)
                    .IsRequired()
                    .HasColumnName("OVER_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Overday).HasColumnName("OVERDAY");

                entity.Property(e => e.Rate2).HasColumnName("RATE2");

                entity.Property(e => e.Rec)
                    .HasColumnName("REC")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.ResB1Time)
                    .IsRequired()
                    .HasColumnName("RES_B1_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB2Time)
                    .IsRequired()
                    .HasColumnName("RES_B2_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB3Time)
                    .IsRequired()
                    .HasColumnName("RES_B3_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB4Time)
                    .IsRequired()
                    .HasColumnName("RES_B4_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResBTime)
                    .IsRequired()
                    .HasColumnName("RES_B_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE1Time)
                    .IsRequired()
                    .HasColumnName("RES_E1_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE2Time)
                    .IsRequired()
                    .HasColumnName("RES_E2_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE3Time)
                    .IsRequired()
                    .HasColumnName("RES_E3_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE4Time)
                    .IsRequired()
                    .HasColumnName("RES_E4_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResETime)
                    .IsRequired()
                    .HasColumnName("RES_E_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.RestExp)
                    .HasColumnName("REST_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotename)
                    .IsRequired()
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Specamt)
                    .HasColumnName("SPECAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specamt1)
                    .HasColumnName("SPECAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specamt2)
                    .HasColumnName("SPECAMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specrule)
                    .HasColumnName("SPECRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Specsalcd)
                    .IsRequired()
                    .HasColumnName("SPECSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.StrTime)
                    .IsRequired()
                    .HasColumnName("STR_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotH200)
                    .HasColumnName("TOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW100)
                    .HasColumnName("TOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrs)
                    .HasColumnName("WK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrsa)
                    .HasColumnName("WK_HRSA")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrsb)
                    .HasColumnName("WK_HRSB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WrHrsa)
                    .HasColumnName("WR_HRSA")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WrHrsb)
                    .HasColumnName("WR_HRSB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.YrrestHrs)
                    .HasColumnName("YRREST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.實際金額).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.差異金額).HasColumnType("numeric(28, 8)");

                entity.Property(e => e.應給金額).HasColumnType("numeric(27, 8)");
            });

            modelBuilder.Entity<Chkidno>(entity =>
            {
                entity.HasKey(e => e.Idno);

                entity.ToTable("CHKIDNO");

                entity.Property(e => e.Idno)
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr)
                    .IsRequired()
                    .HasColumnName("ADDR")
                    .HasMaxLength(100);

                entity.Property(e => e.Birdt)
                    .HasColumnName("BIRDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Chkdate)
                    .HasColumnName("CHKDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ethnic)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IdAdate)
                    .HasColumnName("ID_ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdDdate)
                    .HasColumnName("ID_DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdTime)
                    .IsRequired()
                    .HasColumnName("ID_TIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Organ)
                    .IsRequired()
                    .HasColumnName("ORGAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Photo)
                    .HasColumnName("PHOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("SEX")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Citycd>(entity =>
            {
                entity.HasKey(e => e.CtCode);

                entity.ToTable("CITYCD");

                entity.Property(e => e.CtCode)
                    .HasColumnName("CT_CODE")
                    .HasMaxLength(10);

                entity.Property(e => e.Ctname)
                    .HasColumnName("CTNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CodeFilter>(entity =>
            {
                entity.HasKey(e => new { e.Source, e.Code, e.Codegroup });

                entity.ToTable("CODE_FILTER");

                entity.Property(e => e.Source)
                    .HasColumnName("SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Codegroup)
                    .HasColumnName("CODEGROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Comp>(entity =>
            {
                entity.HasKey(e => e.Comp1);

                entity.ToTable("COMP");

                entity.HasIndex(e => e.Comp1)
                    .HasName("IX_COMP");

                entity.Property(e => e.Comp1)
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Account)
                    .HasColumnName("ACCOUNT")
                    .HasMaxLength(50);

                entity.Property(e => e.Accr)
                    .HasColumnName("ACCR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Addr)
                    .IsRequired()
                    .HasColumnName("ADDR")
                    .HasMaxLength(120);

                entity.Property(e => e.AddrE)
                    .HasColumnName("ADDR_E")
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankCode).HasMaxLength(50);

                entity.Property(e => e.Calcgroup)
                    .HasColumnName("CALCGROUP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'‘’')");

                entity.Property(e => e.Chairman)
                    .IsRequired()
                    .HasColumnName("CHAIRMAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Compid)
                    .IsRequired()
                    .HasColumnName("COMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compname)
                    .IsRequired()
                    .HasColumnName("COMPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dblcnt).HasColumnName("DBLCNT");

                entity.Property(e => e.Defa)
                    .HasColumnName("DEFA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.F0103).HasMaxLength(50);

                entity.Property(e => e.F0407).HasMaxLength(50);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasColumnName("FAX")
                    .HasMaxLength(50);

                entity.Property(e => e.Houseid)
                    .IsRequired()
                    .HasColumnName("HOUSEID")
                    .HasMaxLength(50);

                entity.Property(e => e.Inscomp)
                    .IsRequired()
                    .HasColumnName("INSCOMP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Menugroupid).HasColumnName("MENUGROUPID");

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.Taxid)
                    .HasColumnName("TAXID")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel)
                    .IsRequired()
                    .HasColumnName("TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Userdefinegroupid).HasColumnName("USERDEFINEGROUPID");

                entity.Property(e => e.Workcd)
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CompDatagroup>(entity =>
            {
                entity.HasKey(e => new { e.Comp, e.Datagroup });

                entity.ToTable("COMP_DATAGROUP");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Datagroup)
                    .HasColumnName("DATAGROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.HasOne(d => d.CompNavigation)
                    .WithMany(p => p.CompDatagroup)
                    .HasForeignKey(d => d.Comp)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COMP_DATAGROUP_COMP");

                entity.HasOne(d => d.DatagroupNavigation)
                    .WithMany(p => p.CompDatagroup)
                    .HasForeignKey(d => d.Datagroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COMP_DATAGROUP_DATAGROUP");
            });

            modelBuilder.Entity<Contract>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.Adate).HasColumnType("datetime");

                entity.Property(e => e.ContractType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Ddate).HasColumnType("datetime");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.NotifyMessageGuid).HasMaxLength(50);

                entity.Property(e => e.WorkAdr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.ContractTypeNavigation)
                    .WithMany(p => p.Contract)
                    .HasForeignKey(d => d.ContractType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contract_ContractType1");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.Contract)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contract_BASE");
            });

            modelBuilder.Entity<ContractBak20151117>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Contract_Bak20151117");

                entity.Property(e => e.Adate).HasColumnType("datetime");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.ContractType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Ddate).HasColumnType("datetime");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.NotifyMessageGuid).HasMaxLength(50);

                entity.Property(e => e.WorkAdr)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContractType>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_ContractType_1");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Cost>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Depts });

                entity.ToTable("COST");

                entity.HasIndex(e => e.Cadate)
                    .HasName("CADATE");

                entity.HasIndex(e => e.Cddate)
                    .HasName("CDDATE");

                entity.HasIndex(e => e.Depts)
                    .HasName("DEPTS");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.Rate)
                    .HasName("RATE");

                entity.HasIndex(e => new { e.Nobr, e.Depts, e.Rate })
                    .HasName("IX_COST");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.Cadate)
                    .HasColumnName("CADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Cddate)
                    .HasColumnName("CDDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(16, 2)");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.Cost)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COST_BASE");
            });

            modelBuilder.Entity<CostType>(entity =>
            {
                entity.HasKey(e => e.CostTypeCode);

                entity.Property(e => e.CostTypeCode).HasMaxLength(50);

                entity.Property(e => e.CostTypeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Countcd>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("COUNTCD");

                entity.HasIndex(e => e.Code)
                    .HasName("CODE");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.ToTable("COUNTRY");

                entity.HasIndex(e => e.NameC)
                    .HasName("NAME_C");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.BornAddr)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Country1)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasKey(e => e.CurrencyCode);

                entity.ToTable("CURRENCY");

                entity.Property(e => e.CurrencyCode)
                    .HasColumnName("CURRENCY_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.CurrencyName)
                    .IsRequired()
                    .HasColumnName("CURRENCY_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .IsRequired()
                    .HasColumnName("KEY_DATE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DataPa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DATA_PA");

                entity.HasIndex(e => e.DataPass)
                    .HasName("DATA_PASS");

                entity.Property(e => e.DataPass)
                    .HasColumnName("DATA_PASS")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<DataPass>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DATA_PASS");

                entity.HasIndex(e => e.DataPass1)
                    .HasName("DATA_PASS");

                entity.Property(e => e.DataPass1)
                    .HasColumnName("DATA_PASS")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDat4e)
                    .HasColumnName("KEY_DAT4E")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Datagroup>(entity =>
            {
                entity.HasKey(e => e.Datagroup1);

                entity.ToTable("DATAGROUP");

                entity.Property(e => e.Datagroup1)
                    .HasColumnName("DATAGROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Groupname)
                    .IsRequired()
                    .HasColumnName("GROUPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Departments>(entity =>
            {
                entity.HasKey(e => e.Deptid)
                    .HasName("DEPTID");

                entity.ToTable("DEPARTMENTS");

                entity.HasIndex(e => e.Deptname)
                    .HasName("DEPTNAME");

                entity.Property(e => e.Deptid).HasColumnName("DEPTID");

                entity.Property(e => e.Att)
                    .HasColumnName("ATT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoSchPlan).HasDefaultValueSql("((1))");

                entity.Property(e => e.DefaultSchId).HasDefaultValueSql("((1))");

                entity.Property(e => e.Deptname)
                    .HasColumnName("DEPTNAME")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Holiday).HasDefaultValueSql("((1))");

                entity.Property(e => e.InLate).HasDefaultValueSql("((1))");

                entity.Property(e => e.InheritDeptRule).HasDefaultValueSql("((1))");

                entity.Property(e => e.InheritDeptSch).HasDefaultValueSql("((1))");

                entity.Property(e => e.InheritDeptSchClass).HasDefaultValueSql("((1))");

                entity.Property(e => e.InheritParentSch).HasDefaultValueSql("((1))");

                entity.Property(e => e.MinAutoSchInterval).HasDefaultValueSql("((24))");

                entity.Property(e => e.OutEarly).HasDefaultValueSql("((1))");

                entity.Property(e => e.OverTime).HasDefaultValueSql("((1))");

                entity.Property(e => e.RegisterOt)
                    .HasColumnName("RegisterOT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Supdeptid)
                    .HasColumnName("SUPDEPTID")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Dept>(entity =>
            {
                entity.HasKey(e => e.DNo);

                entity.ToTable("DEPT");

                entity.HasIndex(e => e.Adate)
                    .HasName("IX_DEPT_1");

                entity.HasIndex(e => e.DNo)
                    .HasName("IX_DEPT_3");

                entity.HasIndex(e => e.DNoDisp)
                    .HasName("IX_DEPT");

                entity.HasIndex(e => e.Ddate)
                    .HasName("IX_DEPT_2");

                entity.HasIndex(e => e.DeptTree)
                    .HasName("DEPT_TREE");

                entity.Property(e => e.DNo)
                    .HasColumnName("D_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DEname)
                    .IsRequired()
                    .HasColumnName("D_ENAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DNoDisp)
                    .HasColumnName("D_NO_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeptCate)
                    .HasColumnName("dept_cate")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptGroup)
                    .HasColumnName("DEPT_GROUP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeptTree)
                    .HasColumnName("DEPT_TREE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(500);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewDept)
                    .HasColumnName("NEW_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OldDept)
                    .HasColumnName("OLD_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Pns)
                    .HasColumnName("PNS")
                    .HasColumnType("decimal(16, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Res)
                    .HasColumnName("RES")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<DeptSupervisor>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.AddOrDel)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_No")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan).HasMaxLength(50);

                entity.Property(e => e.SupervisorNobr)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeptUsedSchs>(entity =>
            {
                entity.HasKey(e => new { e.DeptId, e.SchId })
                    .HasName("DEPT_USED_SCH");
            });

            modelBuilder.Entity<Depta>(entity =>
            {
                entity.HasKey(e => e.DNo);

                entity.ToTable("DEPTA");

                entity.HasIndex(e => e.DName)
                    .HasName("D_NAME");

                entity.HasIndex(e => e.DNo)
                    .HasName("D_NO");

                entity.Property(e => e.DNo)
                    .HasColumnName("D_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DEname)
                    .IsRequired()
                    .HasColumnName("D_ENAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DNoDisp)
                    .HasColumnName("D_NO_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeptCate)
                    .HasColumnName("dept_cate")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptGroup)
                    .HasColumnName("DEPT_GROUP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeptTree)
                    .HasColumnName("DEPT_TREE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(500);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mangemail)
                    .HasColumnName("MANGEMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OldDept)
                    .HasColumnName("OLD_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Passm).HasColumnName("PASSM");
            });

            modelBuilder.Entity<Deptg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DEPTG");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.JobType)
                    .IsRequired()
                    .HasColumnName("JOB_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Pno)
                    .HasColumnName("PNO")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Deptlevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DEPTLEVEL");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sorting).HasColumnName("SORTING");
            });

            modelBuilder.Entity<Depts>(entity =>
            {
                entity.HasKey(e => e.DNo);

                entity.ToTable("DEPTS");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.CrAcno)
                    .HasName("CR_ACNO");

                entity.HasIndex(e => e.DName)
                    .HasName("D_NAME");

                entity.HasIndex(e => e.DNo)
                    .HasName("IX_DEPTS");

                entity.HasIndex(e => e.Ddate)
                    .HasName("DDATE");

                entity.HasIndex(e => e.DrAcno)
                    .HasName("DR_ACNO");

                entity.Property(e => e.DNo)
                    .HasColumnName("D_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CrAcno)
                    .HasColumnName("CR_ACNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DCode)
                    .HasColumnName("D_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DNoDisp)
                    .HasColumnName("D_NO_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DrAcno)
                    .HasColumnName("DR_ACNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ICode)
                    .HasColumnName("I_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note).HasColumnName("NOTE");

                entity.Property(e => e.OldDept)
                    .HasColumnName("OLD_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Orderid)
                    .HasColumnName("ORDERID")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Subs)
                    .HasColumnName("SUBS")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Di>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DI");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Dispatch>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("DISPATCH");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AmtApply)
                    .HasColumnName("AMT_APPLY")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.AmtCharity)
                    .HasColumnName("AMT_CHARITY")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.AmtPay)
                    .HasColumnName("AMT_PAY")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.AmtTax)
                    .HasColumnName("AMT_TAX")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasColumnName("CURRENCY")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.YymmB)
                    .IsRequired()
                    .HasColumnName("YYMM_B")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DocItem>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("DOC_ITEM");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.CateGory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .HasColumnName("MEMO")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DormitoryBed>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.BedId)
                    .IsRequired()
                    .HasColumnName("BedID")
                    .HasMaxLength(50);

                entity.Property(e => e.BedName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Cost).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.RoomNavigation)
                    .WithMany(p => p.DormitoryBed)
                    .HasForeignKey(d => d.Room)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DormitoryBed_DormitoryRoom");
            });

            modelBuilder.Entity<DormitoryManagement>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CheckOutReasonCode).HasMaxLength(50);

                entity.Property(e => e.Cost).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.HasOne(d => d.BedNavigation)
                    .WithMany(p => p.DormitoryManagement)
                    .HasForeignKey(d => d.Bed)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DormitoryManagement_DormitoryBed");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.DormitoryManagement)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DormitoryManagement_BASE");
            });

            modelBuilder.Entity<DormitoryRoom>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RoomId)
                    .IsRequired()
                    .HasColumnName("RoomID")
                    .HasMaxLength(50);

                entity.Property(e => e.RoomName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Eatitem>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("EATITEM");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Eattype)
                    .HasColumnName("EATTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Isok).HasColumnName("ISOK");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Sp1).HasColumnName("SP1");

                entity.Property(e => e.Sp1note)
                    .HasColumnName("SP1NOTE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EatitemCard>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Ontime });

                entity.ToTable("EATITEM_CARD");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ontime)
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ipadd)
                    .IsRequired()
                    .HasColumnName("IPADD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Los).HasColumnName("LOS");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NotTran).HasColumnName("NOT_TRAN");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EatitemSp>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("EATITEM_SP");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Depts)
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptsname)
                    .HasColumnName("DEPTSNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Eatamt)
                    .HasColumnName("EATAMT")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Eatnum).HasColumnName("EATNUM");

                entity.Property(e => e.Eattype)
                    .HasColumnName("EATTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasColumnName("NOTE");

                entity.Property(e => e.Workcd)
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Eatitemset>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("EATITEMSET");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Aamt)
                    .HasColumnName("AAMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Abtime)
                    .HasColumnName("ABTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Abtimelose)
                    .HasColumnName("ABTIMELOSE")
                    .HasMaxLength(50);

                entity.Property(e => e.Aetime)
                    .HasColumnName("AETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Asp1amt)
                    .HasColumnName("ASP1AMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Aspamt)
                    .HasColumnName("ASPAMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bamt)
                    .HasColumnName("BAMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bbtimelose)
                    .HasColumnName("BBTIMELOSE")
                    .HasMaxLength(50);

                entity.Property(e => e.Betime)
                    .HasColumnName("BETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Bsp1amt)
                    .HasColumnName("BSP1AMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bspamt)
                    .HasColumnName("BSPAMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Camt)
                    .HasColumnName("CAMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cbtime)
                    .HasColumnName("CBTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Cbtimelose)
                    .HasColumnName("CBTIMELOSE")
                    .HasMaxLength(50);

                entity.Property(e => e.Cetime)
                    .HasColumnName("CETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Csp1amt)
                    .HasColumnName("CSP1AMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cspamt)
                    .HasColumnName("CSPAMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Damt)
                    .HasColumnName("DAMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Dbtime)
                    .HasColumnName("DBTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dbtimelose)
                    .HasColumnName("DBTIMELOSE")
                    .HasMaxLength(50);

                entity.Property(e => e.Detime)
                    .HasColumnName("DETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dsp1amt)
                    .HasColumnName("DSP1AMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Dspamt)
                    .HasColumnName("DSPAMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Eamt)
                    .HasColumnName("EAMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Ebtime)
                    .HasColumnName("EBTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ebtimelose)
                    .HasColumnName("EBTIMELOSE")
                    .HasMaxLength(50);

                entity.Property(e => e.Eetime)
                    .HasColumnName("EETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Esp1amt)
                    .HasColumnName("ESP1AMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Espamt)
                    .HasColumnName("ESPAMT")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Espamt1)
                    .HasColumnName("ESPAMT1")
                    .HasColumnType("decimal(5, 2)");
            });

            modelBuilder.Entity<Eatitemsettime>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EATITEMSETTIME");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Workcd)
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Educode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EDUCODE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Effect>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFECT");

                entity.Property(e => e.Apcd)
                    .IsRequired()
                    .HasColumnName("APCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Apcdname)
                    .IsRequired()
                    .HasColumnName("APCDNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Effb)
                    .HasColumnName("EFFB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Effe)
                    .HasColumnName("EFFE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Effemploy>(entity =>
            {
                entity.HasKey(e => e.Autokey)
                    .HasName("PK__EFFEMPLO__FE925FC17C3CFE69");

                entity.ToTable("EFFEMPLOY");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Efflvl)
                    .IsRequired()
                    .HasColumnName("EFFLVL")
                    .HasMaxLength(50);

                entity.Property(e => e.Effscore)
                    .HasColumnName("EFFSCORE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Efftype)
                    .HasColumnName("EFFTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Efflvl>(entity =>
            {
                entity.HasKey(e => e.Efflvl1)
                    .HasName("PK__EFFLVL__C4D0AFD270D52C29");

                entity.ToTable("EFFLVL");

                entity.Property(e => e.Efflvl1)
                    .HasColumnName("EFFLVL")
                    .HasMaxLength(50);

                entity.Property(e => e.Effb)
                    .HasColumnName("EFFB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Effe)
                    .HasColumnName("EFFE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.EfflvlDisp)
                    .IsRequired()
                    .HasColumnName("EFFLVL_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.EfflvlName)
                    .IsRequired()
                    .HasColumnName("EFFLVL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsAdmin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_Admin");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("auto_key")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffsAppr>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_APPR");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Appr)
                    .HasColumnName("appr")
                    .HasColumnType("ntext");

                entity.Property(e => e.Bespeak)
                    .HasColumnName("bespeak")
                    .HasColumnType("ntext");

                entity.Property(e => e.Included).HasColumnName("included");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangCheck).HasColumnName("mangCheck");

                entity.Property(e => e.MangcheckDate)
                    .HasColumnName("mangcheckDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangname)
                    .HasColumnName("mangname")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasMaxLength(50);

                entity.Property(e => e.Reality)
                    .HasColumnName("reality")
                    .HasMaxLength(200);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Standard)
                    .HasColumnName("standard")
                    .HasColumnType("ntext");

                entity.Property(e => e.Works)
                    .HasColumnName("works")
                    .HasColumnType("ntext");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsApprs>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_APPRs");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Adate)
                    .HasColumnName("adate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Appr)
                    .HasColumnName("appr")
                    .HasColumnType("ntext");

                entity.Property(e => e.Bespeak)
                    .HasColumnName("bespeak")
                    .HasColumnType("ntext");

                entity.Property(e => e.Cate)
                    .HasColumnName("cate")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("ddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Del).HasColumnName("del");

                entity.Property(e => e.Included).HasColumnName("included");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangCheck).HasColumnName("mangCheck");

                entity.Property(e => e.MangcheckDate)
                    .HasColumnName("mangcheckDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangname)
                    .HasColumnName("mangname")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasMaxLength(50);

                entity.Property(e => e.Reality)
                    .HasColumnName("reality")
                    .HasMaxLength(200);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Standard)
                    .HasColumnName("standard")
                    .HasColumnType("ntext");

                entity.Property(e => e.Works)
                    .HasColumnName("works")
                    .HasColumnType("ntext");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsApprsMangCheck>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_APPRS_MangCheck");

                entity.Property(e => e.AppDate)
                    .HasColumnName("appDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffsCount).HasColumnName("effsCount");

                entity.Property(e => e.IsApproved).HasColumnName("isApproved");

                entity.Property(e => e.Mangname)
                    .HasColumnName("mangname")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangtitle)
                    .HasColumnName("mangtitle")
                    .HasMaxLength(50);

                entity.Property(e => e.Mm).HasColumnName("mm");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.Tp)
                    .HasColumnName("TP")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsApprtts>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_APPRTTS");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Adate)
                    .HasColumnName("adate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Appr)
                    .HasColumnName("appr")
                    .HasColumnType("ntext");

                entity.Property(e => e.Bespeak)
                    .HasColumnName("bespeak")
                    .HasColumnType("ntext");

                entity.Property(e => e.Ddate)
                    .HasColumnName("ddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffSApprid).HasColumnName("EffS_APPRID");

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Original)
                    .HasColumnName("original")
                    .HasMaxLength(10);

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasMaxLength(50);

                entity.Property(e => e.Reality)
                    .HasColumnName("reality")
                    .HasMaxLength(200);

                entity.Property(e => e.Standard)
                    .HasColumnName("standard")
                    .HasColumnType("ntext");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(10);

                entity.Property(e => e.Works)
                    .HasColumnName("works")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsAssignappend>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_ASSIGNAPPEND");

                entity.Property(e => e.Assignnobr)
                    .HasColumnName("assignnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Extendday).HasColumnName("extendday");

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(10);

                entity.Property(e => e.Mangjob)
                    .HasColumnName("mangjob")
                    .HasMaxLength(10);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsAttend>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_ATTEND");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.NSeq).HasColumnName("n_seq");

                entity.Property(e => e.NYy).HasColumnName("n_yy");

                entity.Property(e => e.SSeq).HasColumnName("s_seq");

                entity.Property(e => e.SYy).HasColumnName("s_yy");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.StdDate).HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(10);

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsBase>(entity =>
            {
                entity.HasKey(e => e.EffbaseId);

                entity.ToTable("EFFS_BASE");

                entity.Property(e => e.EffbaseId)
                    .HasColumnName("effbaseID")
                    .HasMaxLength(20);

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasMaxLength(10);

                entity.Property(e => e.Depta)
                    .HasColumnName("depta")
                    .HasMaxLength(10);

                entity.Property(e => e.Deptorder)
                    .HasColumnName("deptorder")
                    .HasMaxLength(4);

                entity.Property(e => e.Depts)
                    .HasColumnName("depts")
                    .HasMaxLength(10);

                entity.Property(e => e.Effsfinally)
                    .HasColumnName("effsfinally")
                    .HasMaxLength(6);

                entity.Property(e => e.EffsgroupId)
                    .HasColumnName("effsgroupID")
                    .HasMaxLength(4);

                entity.Property(e => e.Enddate)
                    .HasColumnName("enddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Firstdate)
                    .HasColumnName("firstdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Isdeff).HasColumnName("isdeff");

                entity.Property(e => e.Job)
                    .HasColumnName("JOB")
                    .HasMaxLength(10);

                entity.Property(e => e.Jobl)
                    .HasColumnName("jobl")
                    .HasMaxLength(10);

                entity.Property(e => e.Jobplan)
                    .HasColumnName("jobplan")
                    .HasColumnType("ntext");

                entity.Property(e => e.Mangfinish).HasColumnName("mangfinish");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(1);

                entity.Property(e => e.Stddate)
                    .HasColumnName("stddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TempletId)
                    .HasColumnName("templetID")
                    .HasMaxLength(4);

                entity.Property(e => e.Yy)
                    .HasColumnName("yy")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsCate>(entity =>
            {
                entity.HasKey(e => e.EffcateId);

                entity.ToTable("EFFS_CATE");

                entity.Property(e => e.EffcateId)
                    .HasColumnName("effcateID")
                    .HasMaxLength(200);

                entity.Property(e => e.EffcateName)
                    .IsRequired()
                    .HasColumnName("effcateName")
                    .HasMaxLength(200);

                entity.Property(e => e.Effcatenote)
                    .HasColumnName("effcatenote")
                    .HasColumnType("ntext");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TypeId)
                    .HasColumnName("TypeID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsCateitem>(entity =>
            {
                entity.HasKey(e => e.EffsId);

                entity.ToTable("EFFS_CATEITEM");

                entity.Property(e => e.EffsId)
                    .HasColumnName("effsID")
                    .HasMaxLength(50);

                entity.Property(e => e.EffcateId)
                    .HasColumnName("effcateID")
                    .HasMaxLength(50);

                entity.Property(e => e.Effnote)
                    .HasColumnName("effnote")
                    .HasColumnType("ntext");

                entity.Property(e => e.EffsName)
                    .HasColumnName("effsName")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsEducate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_EDUCATE");

                entity.Property(e => e.CateName)
                    .HasColumnName("cateName")
                    .HasMaxLength(200);

                entity.Property(e => e.EduCateId)
                    .IsRequired()
                    .HasColumnName("eduCateID")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffsEducateitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_EDUCATEITEM");

                entity.Property(e => e.CateItemName).HasMaxLength(200);

                entity.Property(e => e.EduCateId)
                    .HasColumnName("eduCateID")
                    .HasMaxLength(10);

                entity.Property(e => e.EduCateItemId)
                    .IsRequired()
                    .HasColumnName("eduCateItemID")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffsEffsMangCheck>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_EFFS_MangCheck");

                entity.Property(e => e.AppDate)
                    .HasColumnName("appDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffsCount).HasColumnName("effsCount");

                entity.Property(e => e.IsApproved).HasColumnName("isApproved");

                entity.Property(e => e.Mangname)
                    .HasColumnName("mangname")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangtitle)
                    .HasColumnName("mangtitle")
                    .HasMaxLength(50);

                entity.Property(e => e.Mm).HasColumnName("mm");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsFun>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_Fun");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("auto_key")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Fun1).HasColumnName("fun1");

                entity.Property(e => e.Fun10).HasColumnName("fun10");

                entity.Property(e => e.Fun11).HasColumnName("fun11");

                entity.Property(e => e.Fun12).HasColumnName("fun12");

                entity.Property(e => e.Fun13).HasColumnName("fun13");

                entity.Property(e => e.Fun14).HasColumnName("fun14");

                entity.Property(e => e.Fun15).HasColumnName("fun15");

                entity.Property(e => e.Fun1Name)
                    .HasColumnName("fun1_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun2).HasColumnName("fun2");

                entity.Property(e => e.Fun2Name)
                    .HasColumnName("fun2_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun3).HasColumnName("fun3");

                entity.Property(e => e.Fun3Name)
                    .HasColumnName("fun3_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun4).HasColumnName("fun4");

                entity.Property(e => e.Fun4Name)
                    .HasColumnName("fun4_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun5).HasColumnName("fun5");

                entity.Property(e => e.Fun5Name)
                    .HasColumnName("fun5_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun6).HasColumnName("fun6");

                entity.Property(e => e.Fun6Name)
                    .HasColumnName("fun6_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun7).HasColumnName("fun7");

                entity.Property(e => e.Fun7Name)
                    .HasColumnName("fun7_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun8).HasColumnName("fun8");

                entity.Property(e => e.Fun8Name)
                    .HasColumnName("fun8_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun9).HasColumnName("fun9");

                entity.Property(e => e.Fun9Name)
                    .HasColumnName("fun9_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Selfcheck).HasColumnName("selfcheck");

                entity.Property(e => e.TempletId)
                    .HasColumnName("templetID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_GROUP");

                entity.Property(e => e.Effsgroup1)
                    .HasColumnName("effsgroup")
                    .HasMaxLength(2);

                entity.Property(e => e.EffsgroupId)
                    .IsRequired()
                    .HasColumnName("effsgroupID")
                    .HasMaxLength(4);

                entity.Property(e => e.Effsgroupname)
                    .HasColumnName("effsgroupname")
                    .HasMaxLength(20);

                entity.Property(e => e.IsmangRate).HasColumnName("ismangRate");

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsGroupitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_GROUPITEM");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.EffsgroupId)
                    .HasColumnName("effsgroupID")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobl)
                    .HasColumnName("jobl")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsHrNum>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_HR_Num");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("key_man")
                    .HasMaxLength(50);

                entity.Property(e => e.Nor)
                    .HasColumnName("nor")
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.Num1)
                    .HasColumnName("num1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num2)
                    .HasColumnName("num2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num3)
                    .HasColumnName("num3")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num4)
                    .HasColumnName("num4")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsInterview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_INTERVIEW");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(4);

                entity.Property(e => e.Interview)
                    .IsRequired()
                    .HasColumnName("interview")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsJobLosView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Effs_JobLos_View");

                entity.Property(e => e.Effcate).HasColumnName("effcate");

                entity.Property(e => e.Effcateitmes).HasColumnName("effcateitmes");

                entity.Property(e => e.Effsfinally)
                    .HasColumnName("effsfinally")
                    .HasMaxLength(50);

                entity.Property(e => e.Effsfinallynum)
                    .HasColumnName("effsfinallynum")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Los).HasColumnName("los");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsLearnplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_LEARNPLAN");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<EffsMangCheck>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_Mang_Check");

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnName("rate");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangFnums>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MangFNums");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.O1).HasColumnType("ntext");

                entity.Property(e => e.O2).HasMaxLength(50);

                entity.Property(e => e.Sql).HasColumnName("sql");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangNum>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_MangNum");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mm).HasColumnName("mm");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasColumnName("NOTE");

                entity.Property(e => e.Num1)
                    .HasColumnName("num1")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Num10)
                    .HasColumnName("num10")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num2)
                    .HasColumnName("num2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num3)
                    .HasColumnName("num3")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num4)
                    .HasColumnName("num4")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num5)
                    .HasColumnName("num5")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num6)
                    .HasColumnName("num6")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num7)
                    .HasColumnName("num7")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num8)
                    .HasColumnName("num8")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num9)
                    .HasColumnName("num9")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangappend>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGAPPEND");

                entity.Property(e => e.Appenddate)
                    .HasColumnName("appenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Appendfinish).HasColumnName("appendfinish");

                entity.Property(e => e.Appstddate)
                    .HasColumnName("appstddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Apptype)
                    .HasColumnName("apptype")
                    .HasMaxLength(10);

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangjob)
                    .HasColumnName("mangjob")
                    .HasMaxLength(10);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangapprcate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGAPPRCATE");

                entity.Property(e => e.ApprId)
                    .HasColumnName("apprID")
                    .HasMaxLength(10);

                entity.Property(e => e.AuotKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(10);

                entity.Property(e => e.Mangjob)
                    .HasColumnName("mangjob")
                    .HasMaxLength(10);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.O1)
                    .HasColumnName("o1")
                    .HasColumnType("ntext");

                entity.Property(e => e.O2)
                    .HasColumnName("o2")
                    .HasColumnType("ntext");

                entity.Property(e => e.O3)
                    .HasColumnName("o3")
                    .HasColumnType("ntext");

                entity.Property(e => e.O4)
                    .HasColumnName("o4")
                    .HasColumnType("ntext");

                entity.Property(e => e.O5)
                    .HasColumnName("o5")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangapprwork>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGAPPRWORK");

                entity.Property(e => e.ApprId).HasColumnName("apprID");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(10);

                entity.Property(e => e.Mangjob)
                    .HasColumnName("mangjob")
                    .HasMaxLength(10);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.O1)
                    .HasColumnName("o1")
                    .HasColumnType("ntext");

                entity.Property(e => e.O2)
                    .HasColumnName("o2")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangfinishnote>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGFINISHNOTE");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasMaxLength(50);

                entity.Property(e => e.IsOk).HasColumnName("isOK");

                entity.Property(e => e.Job)
                    .HasColumnName("job")
                    .HasMaxLength(50);

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsManginterview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGINTERVIEW");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Interid)
                    .HasColumnName("INTERID")
                    .HasMaxLength(10);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("keyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsManglearnplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGLEARNPLAN");

                entity.Property(e => e.AuotKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(10);

                entity.Property(e => e.Mangjob)
                    .HasColumnName("mangjob")
                    .HasMaxLength(10);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Note1)
                    .HasColumnName("note1")
                    .HasMaxLength(1000);

                entity.Property(e => e.Note2)
                    .HasColumnName("note2")
                    .HasMaxLength(1000);

                entity.Property(e => e.Note3)
                    .HasColumnName("note3")
                    .HasMaxLength(1000);

                entity.Property(e => e.Note4)
                    .HasColumnName("note4")
                    .HasMaxLength(1000);

                entity.Property(e => e.Note5)
                    .HasColumnName("note5")
                    .HasMaxLength(1000);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangrate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGRATE");

                entity.Property(e => e.Arrprate)
                    .HasColumnName("arrprate")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Caterate)
                    .HasColumnName("caterate")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_NOTE");

                entity.Property(e => e.App)
                    .HasColumnName("app")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsNum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_NUM");

                entity.Property(e => e.NumDesc)
                    .HasColumnName("numDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.NumId)
                    .IsRequired()
                    .HasColumnName("numID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsNumitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_NUMITEM");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.MaxNum)
                    .HasColumnName("maxNum")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.MaxRate)
                    .HasColumnName("maxRate")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.MinNum)
                    .HasColumnName("minNum")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.MinRate)
                    .HasColumnName("minRate")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.NumId)
                    .IsRequired()
                    .HasColumnName("numID")
                    .HasMaxLength(4);

                entity.Property(e => e.NumName)
                    .IsRequired()
                    .HasColumnName("numName")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffsOther>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("effs_other");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Cate)
                    .HasColumnName("cate")
                    .HasMaxLength(500);

                entity.Property(e => e.KeyData)
                    .HasColumnName("key_data")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.O1)
                    .HasColumnName("o1")
                    .HasColumnType("ntext");

                entity.Property(e => e.O2)
                    .HasColumnName("o2")
                    .HasColumnType("ntext");

                entity.Property(e => e.O3)
                    .HasColumnName("o3")
                    .HasColumnType("ntext");

                entity.Property(e => e.O4)
                    .HasColumnName("o4")
                    .HasColumnType("ntext");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsOutNum>(entity =>
            {
                entity.HasKey(e => e.AuotKey);

                entity.ToTable("EFFS_OutNum");

                entity.Property(e => e.AuotKey).HasColumnName("auotKey");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 1)");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsPersonality>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_personality");

                entity.Property(e => e.EffcateId)
                    .IsRequired()
                    .HasColumnName("effcateID")
                    .HasMaxLength(4);

                entity.Property(e => e.EffcateName)
                    .IsRequired()
                    .HasColumnName("effcateName")
                    .HasMaxLength(200);

                entity.Property(e => e.Effcatenote)
                    .HasColumnName("effcatenote")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsPersonalityItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_personalityITEM");

                entity.Property(e => e.EffcateId)
                    .HasColumnName("effcateID")
                    .HasMaxLength(4);

                entity.Property(e => e.Effnote)
                    .HasColumnName("effnote")
                    .HasColumnType("ntext");

                entity.Property(e => e.EffsId)
                    .IsRequired()
                    .HasColumnName("effsID")
                    .HasMaxLength(4);

                entity.Property(e => e.EffsName)
                    .HasColumnName("effsName")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_RECORD");

                entity.Property(e => e.Adate)
                    .HasColumnName("adate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Effscate)
                    .HasColumnName("effscate")
                    .HasMaxLength(10);

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangname)
                    .HasColumnName("mangname")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Record)
                    .HasColumnName("record")
                    .HasColumnType("ntext");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<EffsRecorda>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_RECORDA");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Mang1Name)
                    .HasColumnName("mang1Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang1Nobr)
                    .HasColumnName("mang1Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang1Note).HasColumnName("mang1Note");

                entity.Property(e => e.Mang1isOk).HasColumnName("mang1isOk");

                entity.Property(e => e.Mang2Name)
                    .HasColumnName("mang2Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang2Nobr)
                    .HasColumnName("mang2Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang2Note).HasColumnName("mang2Note");

                entity.Property(e => e.Mang2isOk).HasColumnName("mang2isOk");

                entity.Property(e => e.Mang3Name)
                    .HasColumnName("mang3Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang3Nobr)
                    .HasColumnName("mang3Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang3Note).HasColumnName("mang3Note");

                entity.Property(e => e.Mang3isOk).HasColumnName("mang3isOk");

                entity.Property(e => e.Mang4Name)
                    .HasColumnName("mang4Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang4Nobr)
                    .HasColumnName("mang4Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang4Note).HasColumnName("mang4Note");

                entity.Property(e => e.Mang4isOk).HasColumnName("mang4isOk");

                entity.Property(e => e.Mang5Name)
                    .HasColumnName("mang5Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang5Nobr)
                    .HasColumnName("mang5Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang5Note).HasColumnName("mang5Note");

                entity.Property(e => e.Mang5isOk).HasColumnName("mang5isOk");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(6, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Recode).HasColumnName("recode");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsRecordb>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_RECORDB");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Mang1Name)
                    .HasColumnName("mang1Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang1Nobr)
                    .HasColumnName("mang1Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang1Note).HasColumnName("mang1Note");

                entity.Property(e => e.Mang1isOk).HasColumnName("mang1isOk");

                entity.Property(e => e.Mang2Name)
                    .HasColumnName("mang2Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang2Nobr)
                    .HasColumnName("mang2Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang2Note).HasColumnName("mang2Note");

                entity.Property(e => e.Mang2isOk).HasColumnName("mang2isOk");

                entity.Property(e => e.Mang3Name)
                    .HasColumnName("mang3Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang3Nobr)
                    .HasColumnName("mang3Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang3Note).HasColumnName("mang3Note");

                entity.Property(e => e.Mang3isOk).HasColumnName("mang3isOk");

                entity.Property(e => e.Mang4Name)
                    .HasColumnName("mang4Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang4Nobr)
                    .HasColumnName("mang4Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang4Note).HasColumnName("mang4Note");

                entity.Property(e => e.Mang4isOk).HasColumnName("mang4isOk");

                entity.Property(e => e.Mang5Name)
                    .HasColumnName("mang5Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang5Nobr)
                    .HasColumnName("mang5Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang5Note).HasColumnName("mang5Note");

                entity.Property(e => e.Mang5isOk).HasColumnName("mang5isOk");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(6, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Recode).HasColumnName("recode");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsRecordc>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_RECORDC");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mang1Name)
                    .HasColumnName("mang1Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang1Nobr)
                    .HasColumnName("mang1Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang1Note).HasColumnName("mang1Note");

                entity.Property(e => e.Mang1isOk).HasColumnName("mang1isOk");

                entity.Property(e => e.Mang2Name)
                    .HasColumnName("mang2Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang2Nobr)
                    .HasColumnName("mang2Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang2Note).HasColumnName("mang2Note");

                entity.Property(e => e.Mang2isOk).HasColumnName("mang2isOk");

                entity.Property(e => e.Mang3Name)
                    .HasColumnName("mang3Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang3Nobr)
                    .HasColumnName("mang3Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang3Note).HasColumnName("mang3Note");

                entity.Property(e => e.Mang3isOk).HasColumnName("mang3isOk");

                entity.Property(e => e.Mang4Name)
                    .HasColumnName("mang4Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang4Nobr)
                    .HasColumnName("mang4Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang4Note).HasColumnName("mang4Note");

                entity.Property(e => e.Mang4isOk).HasColumnName("mang4isOk");

                entity.Property(e => e.Mang5Name)
                    .HasColumnName("mang5Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang5Nobr)
                    .HasColumnName("mang5Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang5Note).HasColumnName("mang5Note");

                entity.Property(e => e.Mang5isOk).HasColumnName("mang5isOk");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(6, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Recode).HasColumnName("recode");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsRecords>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_RECORDs");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Mang1Name)
                    .HasColumnName("mang1Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang1Nobr)
                    .HasColumnName("mang1Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang1Note).HasColumnName("mang1Note");

                entity.Property(e => e.Mang1isOk).HasColumnName("mang1isOk");

                entity.Property(e => e.Mang2Name)
                    .HasColumnName("mang2Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang2Nobr)
                    .HasColumnName("mang2Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang2Note).HasColumnName("mang2Note");

                entity.Property(e => e.Mang2isOk).HasColumnName("mang2isOk");

                entity.Property(e => e.Mang3Name)
                    .HasColumnName("mang3Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang3Nobr)
                    .HasColumnName("mang3Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang3Note).HasColumnName("mang3Note");

                entity.Property(e => e.Mang3isOk).HasColumnName("mang3isOk");

                entity.Property(e => e.Mang4Name)
                    .HasColumnName("mang4Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang4Nobr)
                    .HasColumnName("mang4Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang4Note).HasColumnName("mang4Note");

                entity.Property(e => e.Mang4isOk).HasColumnName("mang4isOk");

                entity.Property(e => e.Mang5Name)
                    .HasColumnName("mang5Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang5Nobr)
                    .HasColumnName("mang5Nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang5Note).HasColumnName("mang5Note");

                entity.Property(e => e.Mang5isOk).HasColumnName("mang5isOk");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(6, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Recode).HasColumnName("recode");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsReportA>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("effs_reportA");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Comp)
                    .HasColumnName("comp")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasMaxLength(50);

                entity.Property(e => e.Effcate).HasColumnName("effcate");

                entity.Property(e => e.Effcateitmes).HasColumnName("effcateitmes");

                entity.Property(e => e.Effsdept)
                    .HasColumnName("effsdept")
                    .HasMaxLength(50);

                entity.Property(e => e.Effsfinally)
                    .HasColumnName("effsfinally")
                    .HasMaxLength(50);

                entity.Property(e => e.Effsfinallynum)
                    .HasColumnName("effsfinallynum")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Effsgroup)
                    .HasColumnName("effsgroup")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .HasColumnName("job")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobl)
                    .HasColumnName("jobl")
                    .HasMaxLength(50);

                entity.Property(e => e.Los)
                    .HasColumnName("los")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Templet)
                    .HasColumnName("templet")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsReportB>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("effs_reportB");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Comp)
                    .HasColumnName("comp")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasMaxLength(50);

                entity.Property(e => e.Effcate).HasColumnName("effcate");

                entity.Property(e => e.Effcateitmes).HasColumnName("effcateitmes");

                entity.Property(e => e.Effsdept)
                    .HasColumnName("effsdept")
                    .HasMaxLength(50);

                entity.Property(e => e.Effsfinally)
                    .HasColumnName("effsfinally")
                    .HasMaxLength(50);

                entity.Property(e => e.Effsfinallynum)
                    .HasColumnName("effsfinallynum")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Effsgroup)
                    .HasColumnName("effsgroup")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .HasColumnName("job")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobl)
                    .HasColumnName("jobl")
                    .HasMaxLength(50);

                entity.Property(e => e.Los)
                    .HasColumnName("los")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num1)
                    .HasColumnName("num1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num2)
                    .HasColumnName("num2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Templet)
                    .HasColumnName("templet")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSMang>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("effs_s_mang");

                entity.Property(e => e.Autokey).HasColumnName("autokey");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.O1)
                    .HasColumnName("o1")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.O2)
                    .HasColumnName("o2")
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EffsSNobr>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("effs_s_nobr");

                entity.Property(e => e.Autokey).HasColumnName("autokey");

                entity.Property(e => e.Adate)
                    .HasColumnName("adate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ddate)
                    .HasColumnName("ddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.O1)
                    .HasColumnName("o1")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.O10)
                    .HasColumnName("o10")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.O2)
                    .HasColumnName("o2")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.O3)
                    .HasColumnName("o3")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.O4)
                    .HasColumnName("o4")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.O5)
                    .HasColumnName("o5")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.O6)
                    .HasColumnName("o6")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.O7)
                    .HasColumnName("o7")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.O8)
                    .HasColumnName("o8")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.O9)
                    .HasColumnName("o9")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EffsSelfcate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFCATE");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.CateId)
                    .HasColumnName("cateID")
                    .HasMaxLength(10);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("keyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangCheck).HasColumnName("mangCheck");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.O1)
                    .HasColumnName("o1")
                    .HasColumnType("ntext");

                entity.Property(e => e.O2)
                    .HasColumnName("o2")
                    .HasColumnType("ntext");

                entity.Property(e => e.O3)
                    .HasColumnName("o3")
                    .HasColumnType("ntext");

                entity.Property(e => e.O4)
                    .HasColumnName("o4")
                    .HasColumnType("ntext");

                entity.Property(e => e.O5)
                    .HasColumnName("o5")
                    .HasColumnType("ntext");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSelfedu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFEDU");

                entity.Property(e => e.EduCateId)
                    .HasColumnName("eduCateID")
                    .HasMaxLength(10);

                entity.Property(e => e.EduCateItemId)
                    .HasColumnName("eduCateItemID")
                    .HasMaxLength(10);

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Other)
                    .HasColumnName("other")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSelfinterview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFINTERVIEW");

                entity.Property(e => e.Interid)
                    .HasColumnName("INTERID")
                    .HasMaxLength(10);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("keyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangCheck).HasColumnName("mangCheck");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSelflearnplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFLEARNPLAN");

                entity.Property(e => e.LearnplanId)
                    .HasColumnName("learnplanID")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSelfplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFPlan");

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangCheck).HasColumnName("mangCheck");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Note1)
                    .HasColumnName("note1")
                    .HasColumnType("ntext");

                entity.Property(e => e.Note2)
                    .HasColumnName("note2")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSelfwork>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFWORK");

                entity.Property(e => e.ApprId).HasColumnName("apprID");

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangCheck).HasColumnName("mangCheck");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSpApprs>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_SP_APPRS");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Adate)
                    .HasColumnName("adate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ddate)
                    .HasColumnName("ddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr).HasColumnName("nobr");

                entity.Property(e => e.O1).HasColumnName("o1");

                entity.Property(e => e.O2).HasColumnName("o2");

                entity.Property(e => e.O3).HasColumnName("o3");

                entity.Property(e => e.O4).HasColumnName("o4");

                entity.Property(e => e.O5).HasColumnName("o5");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsTNum1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_T_NUM_1");

                entity.Property(e => e.AutKey).HasColumnName("autKey");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num1)
                    .HasColumnName("num1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num10)
                    .HasColumnName("num10")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num11)
                    .HasColumnName("num11")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num12)
                    .HasColumnName("num12")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num13)
                    .HasColumnName("num13")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num14)
                    .HasColumnName("num14")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num15)
                    .HasColumnName("num15")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num2)
                    .HasColumnName("num2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num3)
                    .HasColumnName("num3")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num4)
                    .HasColumnName("num4")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num5)
                    .HasColumnName("num5")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num6)
                    .HasColumnName("num6")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num7)
                    .HasColumnName("num7")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num8)
                    .HasColumnName("num8")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num9)
                    .HasColumnName("num9")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank1)
                    .HasColumnName("rank1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank10)
                    .HasColumnName("rank10")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank11)
                    .HasColumnName("rank11")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank12)
                    .HasColumnName("rank12")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank2)
                    .HasColumnName("rank2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank3)
                    .HasColumnName("rank3")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank4)
                    .HasColumnName("rank4")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank5)
                    .HasColumnName("rank5")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank6)
                    .HasColumnName("rank6")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank7)
                    .HasColumnName("rank7")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank8)
                    .HasColumnName("rank8")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rank9)
                    .HasColumnName("rank9")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy)
                    .HasColumnName("yy")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsTNum2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_T_NUM_2");

                entity.Property(e => e.AutKey).HasColumnName("autKey");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num1)
                    .HasColumnName("num1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num10)
                    .HasColumnName("num10")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num11)
                    .HasColumnName("num11")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num12)
                    .HasColumnName("num12")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num13)
                    .HasColumnName("num13")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num14)
                    .HasColumnName("num14")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num15)
                    .HasColumnName("num15")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num16)
                    .HasColumnName("num16")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num17)
                    .HasColumnName("num17")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num18)
                    .HasColumnName("num18")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num19)
                    .HasColumnName("num19")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num2)
                    .HasColumnName("num2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num20)
                    .HasColumnName("num20")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num3)
                    .HasColumnName("num3")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num4)
                    .HasColumnName("num4")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num5)
                    .HasColumnName("num5")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num6)
                    .HasColumnName("num6")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num7)
                    .HasColumnName("num7")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num8)
                    .HasColumnName("num8")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num9)
                    .HasColumnName("num9")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy)
                    .HasColumnName("yy")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsTNum3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_T_NUM_3");

                entity.Property(e => e.AutKey)
                    .HasColumnName("autKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.FlowOrder).HasColumnName("flowOrder");

                entity.Property(e => e.MangName)
                    .HasColumnName("mangName")
                    .HasMaxLength(50);

                entity.Property(e => e.MangNobr)
                    .HasColumnName("mangNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num1)
                    .HasColumnName("num1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num10)
                    .HasColumnName("num10")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num11)
                    .HasColumnName("num11")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num12)
                    .HasColumnName("num12")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num13)
                    .HasColumnName("num13")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num14)
                    .HasColumnName("num14")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num15)
                    .HasColumnName("num15")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num16)
                    .HasColumnName("num16")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num17)
                    .HasColumnName("num17")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num18)
                    .HasColumnName("num18")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num19)
                    .HasColumnName("num19")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num2)
                    .HasColumnName("num2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num20)
                    .HasColumnName("num20")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num3)
                    .HasColumnName("num3")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num4)
                    .HasColumnName("num4")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num5)
                    .HasColumnName("num5")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num6)
                    .HasColumnName("num6")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num7)
                    .HasColumnName("num7")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num8)
                    .HasColumnName("num8")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num9)
                    .HasColumnName("num9")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy)
                    .HasColumnName("yy")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsTNum4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_T_NUM_4");

                entity.Property(e => e.AutKey).HasColumnName("autKey");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num1)
                    .HasColumnName("num1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num10)
                    .HasColumnName("num10")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num11)
                    .HasColumnName("num11")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num12)
                    .HasColumnName("num12")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num13)
                    .HasColumnName("num13")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num14)
                    .HasColumnName("num14")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num15)
                    .HasColumnName("num15")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num16)
                    .HasColumnName("num16")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num17)
                    .HasColumnName("num17")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num18)
                    .HasColumnName("num18")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num19)
                    .HasColumnName("num19")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num2)
                    .HasColumnName("num2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num20)
                    .HasColumnName("num20")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num3)
                    .HasColumnName("num3")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num4)
                    .HasColumnName("num4")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num5)
                    .HasColumnName("num5")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num6)
                    .HasColumnName("num6")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num7)
                    .HasColumnName("num7")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num8)
                    .HasColumnName("num8")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Num9)
                    .HasColumnName("num9")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy)
                    .HasColumnName("yy")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsTemplet>(entity =>
            {
                entity.HasKey(e => e.TempletId);

                entity.ToTable("EFFS_TEMPLET");

                entity.Property(e => e.TempletId)
                    .HasColumnName("templetID")
                    .HasMaxLength(4);

                entity.Property(e => e.IsTitle).HasColumnName("isTitle");

                entity.Property(e => e.TempletName)
                    .IsRequired()
                    .HasColumnName("templetName")
                    .HasMaxLength(30);

                entity.Property(e => e.TitleId)
                    .IsRequired()
                    .HasColumnName("titleID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsTempletcate>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_TEMPLETCATE");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.EffcateId)
                    .IsRequired()
                    .HasColumnName("effcateID")
                    .HasMaxLength(50);

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TempletId)
                    .IsRequired()
                    .HasColumnName("templetID")
                    .HasMaxLength(4);

                entity.Property(e => e.TypeId)
                    .HasColumnName("typeID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsTempletcateitem>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_TEMPLETCATEITEM");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.EffsCateId)
                    .HasColumnName("effsCateID")
                    .HasMaxLength(50);

                entity.Property(e => e.EffsId)
                    .IsRequired()
                    .HasColumnName("effsID")
                    .HasMaxLength(50);

                entity.Property(e => e.EffsMaxNum)
                    .HasColumnName("effsMaxNum")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EffsMinNum)
                    .HasColumnName("effsMinNum")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TempletId)
                    .IsRequired()
                    .HasColumnName("templetID")
                    .HasMaxLength(4);

                entity.Property(e => e.TypeId)
                    .HasColumnName("typeID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsTempletinterview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TEMPLETINTERVIEW");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.InterviewId)
                    .HasColumnName("interviewID")
                    .HasMaxLength(4);

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.TempletId)
                    .HasColumnName("templetID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsTempletlearnplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TEMPLETLEARNPLAN");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LearnplanId)
                    .HasColumnName("learnplanID")
                    .HasMaxLength(10);

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.TempletId)
                    .HasColumnName("templetID")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffsTemplettype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TEMPLETTYPE");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cateitemname)
                    .HasColumnName("cateitemname")
                    .HasColumnType("ntext");

                entity.Property(e => e.Cateitemnote)
                    .HasColumnName("cateitemnote")
                    .HasColumnType("ntext");

                entity.Property(e => e.Catename)
                    .HasColumnName("catename")
                    .HasColumnType("ntext");

                entity.Property(e => e.Catenote)
                    .HasColumnName("catenote")
                    .HasColumnType("ntext");

                entity.Property(e => e.Effsmode)
                    .HasColumnName("effsmode")
                    .HasMaxLength(50);

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Showcateitemname).HasColumnName("showcateitemname");

                entity.Property(e => e.Showcateitemnote).HasColumnName("showcateitemnote");

                entity.Property(e => e.Showcatename).HasColumnName("showcatename");

                entity.Property(e => e.Showcatenote).HasColumnName("showcatenote");

                entity.Property(e => e.TempletId)
                    .HasColumnName("templetID")
                    .HasMaxLength(4);

                entity.Property(e => e.TitleId)
                    .HasColumnName("titleID")
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsTitle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TITLE");

                entity.Property(e => e.TitleDesc)
                    .IsRequired()
                    .HasColumnName("titleDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.TitleId)
                    .IsRequired()
                    .HasColumnName("titleID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsTitleitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TITLEITEM");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Num).HasColumnName("num");

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(10);

                entity.Property(e => e.TitleId)
                    .IsRequired()
                    .HasColumnName("titleID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsTrMangCheck>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_TR_MangCheck");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.MangSeq).HasColumnName("mang_seq");

                entity.Property(e => e.MangYear).HasColumnName("mang_year");

                entity.Property(e => e.TrSeq).HasColumnName("tr_seq");

                entity.Property(e => e.TrYear).HasColumnName("tr_year");
            });

            modelBuilder.Entity<EffsType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TYPE");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("type")
                    .HasMaxLength(4);

                entity.Property(e => e.TypeName)
                    .HasColumnName("typeName")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<EffsUpfile>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_UPFILE");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Filedesc)
                    .HasColumnName("filedesc")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Filesize)
                    .HasColumnName("filesize")
                    .HasMaxLength(100);

                entity.Property(e => e.Filetype)
                    .HasColumnName("filetype")
                    .HasMaxLength(200);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Serverfilename)
                    .HasColumnName("serverfilename")
                    .HasMaxLength(500);

                entity.Property(e => e.Upfiledate)
                    .HasColumnName("upfiledate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upfilename)
                    .HasColumnName("upfilename")
                    .HasMaxLength(500);

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Effs_View");

                entity.Property(e => e.Effba)
                    .HasColumnName("EFFBA")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Effbb)
                    .HasColumnName("EFFBB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Efflvl)
                    .IsRequired()
                    .HasColumnName("EFFLVL")
                    .HasMaxLength(50);

                entity.Property(e => e.Efftype)
                    .IsRequired()
                    .HasColumnName("EFFTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Effvar)
                    .HasColumnName("EFFVAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(56);
            });

            modelBuilder.Entity<EffsWorkSet>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("Effs_WorkSet");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Isopen).HasColumnName("isopen");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(200);

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy)
                    .HasColumnName("yy")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffstempAa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("effstemp_aa");

                entity.Property(e => e._94年考核)
                    .HasColumnName("94年_考核")
                    .HasMaxLength(255);

                entity.Property(e => e._95年考核)
                    .HasColumnName("95年_考核")
                    .HasMaxLength(255);

                entity.Property(e => e._96年考核1)
                    .HasColumnName("96年_考核1")
                    .HasMaxLength(255);

                entity.Property(e => e._96年考核2)
                    .HasColumnName("96年_考核2")
                    .HasMaxLength(255);

                entity.Property(e => e._97年考核)
                    .HasColumnName("97年_考核")
                    .HasMaxLength(255);

                entity.Property(e => e.姓名).HasMaxLength(255);

                entity.Property(e => e.工號).HasMaxLength(255);

                entity.Property(e => e.職稱).HasMaxLength(255);

                entity.Property(e => e.職稱1).HasMaxLength(255);

                entity.Property(e => e.部門代碼).HasMaxLength(255);

                entity.Property(e => e.部門單位).HasMaxLength(255);
            });

            modelBuilder.Entity<EfftempBb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("efftemp_bb");

                entity.Property(e => e._94年考評)
                    .HasColumnName("94年_考評")
                    .HasMaxLength(255);

                entity.Property(e => e._95年考評)
                    .HasColumnName("95年_考評")
                    .HasMaxLength(255);

                entity.Property(e => e._96年考評)
                    .HasColumnName("96年_考評")
                    .HasMaxLength(255);

                entity.Property(e => e._97年考評)
                    .HasColumnName("97年_考評")
                    .HasMaxLength(255);

                entity.Property(e => e.員工編號).HasMaxLength(255);
            });

            modelBuilder.Entity<Efftype>(entity =>
            {
                entity.HasKey(e => e.Efftype1)
                    .HasName("PK__EFFTYPE__18D17E136E2A89DE");

                entity.ToTable("EFFTYPE");

                entity.Property(e => e.Efftype1)
                    .HasColumnName("EFFTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.EfftypeDisp)
                    .IsRequired()
                    .HasColumnName("EFFTYPE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.EfftypeName)
                    .IsRequired()
                    .HasColumnName("EFFTYPE_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EmOpLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ManipulationId).HasColumnName("manipulationID");

                entity.Property(e => e.OperateTime).HasColumnType("datetime");

                entity.Property(e => e.SensorId)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Userid).HasColumnName("USERID");
            });

            modelBuilder.Entity<EmpConfiguration>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan).HasMaxLength(50);

                entity.Property(e => e.Nobr).HasMaxLength(50);

                entity.Property(e => e.SettingItem).HasMaxLength(50);

                entity.Property(e => e.SettingValue).HasMaxLength(50);
            });

            modelBuilder.Entity<Empcd>(entity =>
            {
                entity.HasKey(e => e.Empcd1);

                entity.ToTable("EMPCD");

                entity.HasIndex(e => e.Empcd1)
                    .HasName("IX_EMPCD");

                entity.Property(e => e.Empcd1)
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.EmpcdB)
                    .IsRequired()
                    .HasColumnName("EMPCD_B")
                    .HasMaxLength(50);

                entity.Property(e => e.Empdescr)
                    .IsRequired()
                    .HasColumnName("EMPDESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Formal).HasColumnName("FORMAL");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nempcd)
                    .IsRequired()
                    .HasColumnName("NEMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Oldempcd)
                    .IsRequired()
                    .HasColumnName("OLDEMPCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EmployeeParameter>(entity =>
            {
                entity.ToTable("EMPLOYEE_PARAMETER");

                entity.Property(e => e.EmployeeParameterId).HasColumnName("EMPLOYEE_PARAMETER_ID");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .HasColumnName("CREATE_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EMPLOYEE_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsAllowLeave)
                    .HasColumnName("IS_ALLOW_LEAVE")
                    .HasMaxLength(50);

                entity.Property(e => e.IsDeformation)
                    .HasColumnName("IS_DEFORMATION")
                    .HasMaxLength(50);

                entity.Property(e => e.IsMail)
                    .HasColumnName("IS_MAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.IsRestOver)
                    .HasColumnName("IS_REST_OVER")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateMan)
                    .HasColumnName("UPDATE_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Enrich>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("ENRICH");

                entity.HasIndex(e => e.Amt)
                    .HasName("AMT");

                entity.HasIndex(e => e.FaIdno)
                    .HasName("FA_IDNO");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.SalCode)
                    .HasName("SAL_CODE");

                entity.HasIndex(e => new { e.Yymm, e.Seq })
                    .HasName("YYMM");

                entity.HasIndex(e => new { e.Nobr, e.Yymm, e.Seq, e.SalCode })
                    .HasName("IX_ENRICH");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Exchange>(entity =>
            {
                entity.HasKey(e => new { e.CurrencyFrom, e.CurrencyTo, e.Yymm, e.Seq });

                entity.ToTable("EXCHANGE");

                entity.Property(e => e.CurrencyFrom)
                    .HasColumnName("CURRENCY_FROM")
                    .HasMaxLength(50);

                entity.Property(e => e.CurrencyTo)
                    .HasColumnName("CURRENCY_TO")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(14, 4)");
            });

            modelBuilder.Entity<Excnotes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EXCNOTES");

                entity.HasIndex(e => new { e.Userid, e.Attdate })
                    .HasName("EXCNOTE")
                    .IsUnique();

                entity.Property(e => e.Attdate)
                    .HasColumnName("ATTDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .HasColumnName("NOTES")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Userid).HasColumnName("USERID");
            });

            modelBuilder.Entity<Explab>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.FaIdno, e.Yymm, e.InsurType });

                entity.ToTable("EXPLAB");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.FaIdno)
                    .HasName("FA_IDNO");

                entity.HasIndex(e => e.InsurType)
                    .HasName("INSUR_TYPE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.RateCode)
                    .HasName("RATE_CODE");

                entity.HasIndex(e => e.SalCode)
                    .HasName("SAL_CODE");

                entity.HasIndex(e => e.Yymm)
                    .HasName("YYMM");

                entity.HasIndex(e => new { e.Nobr, e.FaIdno, e.Yymm })
                    .HasName("IX_EXPLAB");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.InsurType)
                    .HasColumnName("INSUR_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Empamt)
                    .HasColumnName("EMPAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Empcomp)
                    .HasColumnName("EMPCOMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp)
                    .HasColumnName("EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fundamt)
                    .HasColumnName("FUNDAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inscd)
                    .HasColumnName("INSCD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Jobamt)
                    .HasColumnName("JOBAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Notedit).HasColumnName("NOTEDIT");

                entity.Property(e => e.RateCode)
                    .IsRequired()
                    .HasColumnName("RATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SNo)
                    .IsRequired()
                    .HasColumnName("S_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalYymm)
                    .IsRequired()
                    .HasColumnName("SAL_YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ExplabCn>(entity =>
            {
                entity.HasKey(e => e.Autokey)
                    .HasName("PK_EXPLABCN");

                entity.ToTable("ExplabCN");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp)
                    .HasColumnName("EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.InsurType)
                    .IsRequired()
                    .HasColumnName("INSUR_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Notedit).HasColumnName("NOTEDIT");

                entity.Property(e => e.SNo)
                    .IsRequired()
                    .HasColumnName("S_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalYymm)
                    .IsRequired()
                    .HasColumnName("SAL_YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ExplabCn1>(entity =>
            {
                entity.HasKey(e => e.Autokey)
                    .HasName("PK_EXPLABCN1");

                entity.ToTable("ExplabCN1");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp)
                    .HasColumnName("EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.InsurType)
                    .IsRequired()
                    .HasColumnName("INSUR_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notedit).HasColumnName("NOTEDIT");

                entity.Property(e => e.SNo)
                    .IsRequired()
                    .HasColumnName("S_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalYymm)
                    .IsRequired()
                    .HasColumnName("SAL_YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Expsup>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq, e.SalCode });

                entity.ToTable("EXPSUP");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.InsHamt)
                    .HasColumnName("INS_HAMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.PayAmt)
                    .HasColumnName("PAY_AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.PayDate)
                    .HasColumnName("PAY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.SNo)
                    .IsRequired()
                    .HasColumnName("S_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.SupAmt)
                    .HasColumnName("SUP_AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.TotalAmt)
                    .HasColumnName("TOTAL_AMT")
                    .HasColumnType("decimal(14, 4)");
            });

            modelBuilder.Entity<ExtHcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EXT_HCODE");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<ExtendedHolidays>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EXTENDED_HOLIDAYS");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Exttable>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("EXTTABLE");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Columndesc)
                    .HasColumnName("COLUMNDESC")
                    .HasMaxLength(200);

                entity.Property(e => e.Columnname)
                    .IsRequired()
                    .HasColumnName("COLUMNNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Columnvalue)
                    .IsRequired()
                    .HasColumnName("COLUMNVALUE")
                    .HasMaxLength(200);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Keycolumnname)
                    .IsRequired()
                    .HasColumnName("KEYCOLUMNNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Keycolumnvalue)
                    .IsRequired()
                    .HasColumnName("KEYCOLUMNVALUE")
                    .HasMaxLength(50);

                entity.Property(e => e.Tablename)
                    .IsRequired()
                    .HasColumnName("TABLENAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FaceTemp>(entity =>
            {
                entity.HasKey(e => e.Templateid)
                    .HasName("PK__FaceTemp__9EE4AD533533B97C");

                entity.HasIndex(e => e.Faceid)
                    .HasName("FACEID");

                entity.HasIndex(e => e.Templateid)
                    .HasName("TEMPLATEID");

                entity.HasIndex(e => e.Userno)
                    .HasName("USERNO");

                entity.HasIndex(e => e.Valid)
                    .HasName("VALID");

                entity.Property(e => e.Templateid).HasColumnName("TEMPLATEID");

                entity.Property(e => e.Activetime)
                    .HasColumnName("ACTIVETIME")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Faceid)
                    .HasColumnName("FACEID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pin)
                    .HasColumnName("pin")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reserve)
                    .HasColumnName("RESERVE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Size)
                    .HasColumnName("SIZE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Template)
                    .HasColumnName("TEMPLATE")
                    .HasColumnType("image");

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Userno)
                    .HasColumnName("USERNO")
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Valid)
                    .HasColumnName("VALID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vfcount)
                    .HasColumnName("VFCOUNT")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Family>(entity =>
            {
                entity.HasKey(e => new { e.FaIdno, e.Nobr });

                entity.ToTable("FAMILY");

                entity.HasIndex(e => e.FaBirdt)
                    .HasName("FA_BIRDT");

                entity.HasIndex(e => e.FaIdno)
                    .HasName("IX_FAMILY");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.RelCode)
                    .HasName("REL_CODE");

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr)
                    .IsRequired()
                    .HasColumnName("ADDR")
                    .HasMaxLength(60);

                entity.Property(e => e.Autoinslab).HasColumnName("AUTOINSLAB");

                entity.Property(e => e.Bbc)
                    .IsRequired()
                    .HasColumnName("BBC")
                    .HasMaxLength(50);

                entity.Property(e => e.Compny)
                    .HasColumnName("COMPNY")
                    .HasMaxLength(50);

                entity.Property(e => e.Educode)
                    .IsRequired()
                    .HasColumnName("EDUCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaBirdt)
                    .HasColumnName("FA_BIRDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.FaName)
                    .IsRequired()
                    .HasColumnName("FA_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Famforn).HasColumnName("FAMFORN");

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Live).HasColumnName("LIVE");

                entity.Property(e => e.RelCode)
                    .IsRequired()
                    .HasColumnName("REL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Tax).HasColumnName("TAX");

                entity.Property(e => e.Tel)
                    .IsRequired()
                    .HasColumnName("TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("TITLE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<FefcToSpmDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FEFC_ToSPM_Dept");

                entity.Property(e => e.BossDept)
                    .HasColumnName("boss_dept")
                    .HasMaxLength(50);

                entity.Property(e => e.Cost)
                    .IsRequired()
                    .HasColumnName("cost_")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Manageradid)
                    .HasColumnName("manageradid")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.UnitCname)
                    .IsRequired()
                    .HasColumnName("unit_cname")
                    .HasMaxLength(50);

                entity.Property(e => e.UnitEname)
                    .IsRequired()
                    .HasColumnName("unit_ename")
                    .HasMaxLength(50);

                entity.Property(e => e.UnitId)
                    .IsRequired()
                    .HasColumnName("unit_id")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FefcToSpmDeptMang>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FEFC_ToSPM_DeptMang");

                entity.Property(e => e.Deptm)
                    .IsRequired()
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.NameAd)
                    .HasColumnName("NAME_AD")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FefcToSpmEmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FEFC_ToSPM_Emp");

                entity.Property(e => e.Adid)
                    .HasColumnName("adid")
                    .HasMaxLength(50);

                entity.Property(e => e.Cellphone)
                    .IsRequired()
                    .HasColumnName("cellphone")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptm)
                    .IsRequired()
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.Employeid)
                    .IsRequired()
                    .HasColumnName("employeid_")
                    .HasMaxLength(50);

                entity.Property(e => e.Extension)
                    .IsRequired()
                    .HasColumnName("extension")
                    .HasMaxLength(50);

                entity.Property(e => e.Groupid)
                    .IsRequired()
                    .HasColumnName("groupid")
                    .HasMaxLength(50);

                entity.Property(e => e.JobEname)
                    .HasColumnName("JOB_ENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.JoblName)
                    .IsRequired()
                    .HasColumnName("JOBL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name_")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Pwd)
                    .IsRequired()
                    .HasColumnName("pwd")
                    .HasMaxLength(50);

                entity.Property(e => e.Reportline)
                    .IsRequired()
                    .HasColumnName("reportline")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscode)
                    .HasColumnName("TTSCODE")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FencePoints>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.KeyDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan).HasMaxLength(50);

                entity.Property(e => e.Latitude).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.PointsGroup).IsUnicode(false);
            });

            modelBuilder.Entity<FileGroup>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FileGroupRole>(entity =>
            {
                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FileStreamInfo>(entity =>
            {
                entity.HasKey(e => e.FileId);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.ExtensionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FileStream).IsRequired();

                entity.Property(e => e.FileTicket)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<FileStructure>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(200);

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.NoticeTitle).HasMaxLength(100);

                entity.Property(e => e.SDescription)
                    .HasColumnName("sDescription")
                    .HasMaxLength(200);

                entity.Property(e => e.SFileName)
                    .HasColumnName("sFileName")
                    .HasMaxLength(255);

                entity.Property(e => e.SFileTitle)
                    .HasColumnName("sFileTitle")
                    .HasMaxLength(50);

                entity.Property(e => e.SIconName)
                    .HasColumnName("sIconName")
                    .HasMaxLength(255);

                entity.Property(e => e.SIconPath)
                    .HasColumnName("sIconPath")
                    .HasMaxLength(255);

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SParentKey)
                    .IsRequired()
                    .HasColumnName("sParentKey")
                    .HasMaxLength(200);

                entity.Property(e => e.SPath)
                    .HasColumnName("sPath")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<FileStructureGroup>(entity =>
            {
                entity.Property(e => e.FileStructureCode)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<FileStructureRole>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.FileStructureKey)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RoleCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Food>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq });

                entity.ToTable("FOOD");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.FoodD)
                    .HasColumnName("FOOD_D")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.FoodF)
                    .HasColumnName("FOOD_F")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.FoodM)
                    .HasColumnName("FOOD_M")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.FoodN)
                    .HasColumnName("FOOD_N")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FoodCard>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Ontime, e.Cardno });

                entity.ToTable("FOOD_CARD");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ontime)
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardno)
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fulltime)
                    .HasColumnName("FULLTIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ipadd)
                    .IsRequired()
                    .HasColumnName("IPADD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Los).HasColumnName("LOS");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50);

                entity.Property(e => e.NotTran).HasColumnName("NOT_TRAN");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FoodCard201704281>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("food_card_20170428_1");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fulltime)
                    .HasColumnName("FULLTIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ipadd)
                    .IsRequired()
                    .HasColumnName("IPADD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Los).HasColumnName("LOS");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NotTran).HasColumnName("NOT_TRAN");

                entity.Property(e => e.Ontime)
                    .IsRequired()
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FoodItem>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Foodcode, e.Adate, e.Ontime });

                entity.ToTable("FOOD_ITEM");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Foodcode)
                    .HasColumnName("FOODCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ontime)
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NotTran).HasColumnName("NOT_TRAN");
            });

            modelBuilder.Entity<Foodtimecd>(entity =>
            {
                entity.HasKey(e => new { e.Code, e.Btime });

                entity.ToTable("FOODTIMECD");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CodeDisp)
                    .IsRequired()
                    .HasColumnName("CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.CodeName)
                    .IsRequired()
                    .HasColumnName("CODE_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Foodwage>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("FOODWAGE");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Ontime)
                    .IsRequired()
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sys).HasColumnName("SYS");

                entity.Property(e => e.T1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Freq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FREQ");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<FreqStart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FREQ_START");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Frm211d>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM211D");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mlssalcode)
                    .IsRequired()
                    .HasColumnName("MLSSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm211dSalcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM211D_SALCODE");

                entity.Property(e => e.Abspay).HasColumnName("ABSPAY");

                entity.Property(e => e.Acccd)
                    .IsRequired()
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Advpay).HasColumnName("ADVPAY");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.Basic).HasColumnName("BASIC");

                entity.Property(e => e.CalFreq)
                    .IsRequired()
                    .HasColumnName("CAL_FREQ")
                    .HasMaxLength(50);

                entity.Property(e => e.CalType)
                    .IsRequired()
                    .HasColumnName("CAL_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Daily).HasColumnName("DAILY");

                entity.Property(e => e.Definedays)
                    .HasColumnName("DEFINEDAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Forbank).HasColumnName("FORBANK");

                entity.Property(e => e.Forcash).HasColumnName("FORCASH");

                entity.Property(e => e.Hrs)
                    .HasColumnName("HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inslab).HasColumnName("INSLAB");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Later).HasColumnName("LATER");

                entity.Property(e => e.MaxAmt)
                    .HasColumnName("MAX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.MinAmt)
                    .HasColumnName("MIN_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Monthtype)
                    .IsRequired()
                    .HasColumnName("MONTHTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Notfreq).HasColumnName("NOTFREQ");

                entity.Property(e => e.Ot).HasColumnName("OT");

                entity.Property(e => e.Retire).HasColumnName("RETIRE");

                entity.Property(e => e.SalAttr)
                    .IsRequired()
                    .HasColumnName("SAL_ATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalEname)
                    .IsRequired()
                    .HasColumnName("SAL_ENAME")
                    .HasMaxLength(60);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.SosId)
                    .IsRequired()
                    .HasColumnName("SOS_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wel).HasColumnName("WEL");

                entity.Property(e => e.Yearpay).HasColumnName("YEARPAY");
            });

            modelBuilder.Entity<Frm22>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM22");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Temps).HasColumnName("TEMPS");
            });

            modelBuilder.Entity<Frm23>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM23");

                entity.Property(e => e.D1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D11)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D12)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D13)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D14)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D15)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D16)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D17)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D18)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D19)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D20)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D21)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D22)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D23)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D24)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D25)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D26)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D27)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D28)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D29)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D30)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D31)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D9)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FreqNo)
                    .HasColumnName("FREQ_NO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Holis)
                    .HasColumnName("HOLIS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm24>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM24");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Descr)
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Ipadd)
                    .IsRequired()
                    .HasColumnName("IPADD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Los).HasColumnName("LOS");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NotTran).HasColumnName("NOT_TRAN");

                entity.Property(e => e.Ontime)
                    .IsRequired()
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm26>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM26");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Dd1)
                    .IsRequired()
                    .HasColumnName("DD1")
                    .HasMaxLength(50);

                entity.Property(e => e.Dd2)
                    .IsRequired()
                    .HasColumnName("DD2")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.EMins)
                    .HasColumnName("E_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LateMins)
                    .HasColumnName("LATE_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lost1).HasColumnName("LOST1");

                entity.Property(e => e.Lost2).HasColumnName("LOST2");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NightHrs)
                    .HasColumnName("NIGHT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Nomody).HasColumnName("NOMODY");

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotename)
                    .IsRequired()
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.T1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.T2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tt1)
                    .IsRequired()
                    .HasColumnName("TT1")
                    .HasMaxLength(50);

                entity.Property(e => e.Tt2)
                    .IsRequired()
                    .HasColumnName("TT2")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm27>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM27");

                entity.Property(e => e.Abs).HasColumnName("ABS");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AdjCode)
                    .IsRequired()
                    .HasColumnName("ADJ_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AttHrs)
                    .HasColumnName("ATT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.EMins)
                    .HasColumnName("E_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodsalcd)
                    .IsRequired()
                    .HasColumnName("FOODSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Forget)
                    .HasColumnName("FORGET")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LateMins)
                    .HasColumnName("LATE_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nigamt)
                    .HasColumnName("NIGAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NightHrs)
                    .HasColumnName("NIGHT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.RoteH)
                    .HasColumnName("ROTE_H")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotename)
                    .IsRequired()
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Frm271>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM271");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm272>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM272");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm28>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM28");

                entity.Property(e => e.AName)
                    .IsRequired()
                    .HasColumnName("A_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Compname)
                    .IsRequired()
                    .HasColumnName("COMPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.DsName)
                    .IsRequired()
                    .HasColumnName("DS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DsNo)
                    .IsRequired()
                    .HasColumnName("DS_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Notedit).HasColumnName("NOTEDIT");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Syscreate).HasColumnName("SYSCREATE");

                entity.Property(e => e.TolDay)
                    .HasColumnName("TOL_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);

                entity.Property(e => e.Unitname)
                    .IsRequired()
                    .HasColumnName("UNITNAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm29>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM29");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DsName)
                    .IsRequired()
                    .HasColumnName("DS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DsNo)
                    .IsRequired()
                    .HasColumnName("DS_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.FixAmt).HasColumnName("FIX_AMT");

                entity.Property(e => e.FoodCnt)
                    .HasColumnName("FOOD_CNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FoodPri)
                    .HasColumnName("FOOD_PRI")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FstHours)
                    .HasColumnName("FST_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IsHoli).HasColumnName("isHoli");

                entity.Property(e => e.Jobs)
                    .IsRequired()
                    .HasColumnName("JOBS")
                    .HasMaxLength(50);

                entity.Property(e => e.JobsName)
                    .HasColumnName("Jobs_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH100)
                    .HasColumnName("NOP_H_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH133)
                    .HasColumnName("NOP_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH167)
                    .HasColumnName("NOP_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW133)
                    .HasColumnName("NOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW167)
                    .HasColumnName("NOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW200)
                    .HasColumnName("NOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtDeptname)
                    .HasColumnName("OT_DEPTNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.OtEdate)
                    .HasColumnName("OT_EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otno)
                    .IsRequired()
                    .HasColumnName("OTNO")
                    .HasMaxLength(50);

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrcd)
                    .IsRequired()
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrname)
                    .HasColumnName("OTRNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Rec)
                    .HasColumnName("REC")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.RestExp)
                    .HasColumnName("REST_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Rotename)
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotet)
                    .IsRequired()
                    .HasColumnName("ROTET")
                    .HasMaxLength(50);

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotH200)
                    .HasColumnName("TOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW100)
                    .HasColumnName("TOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm2b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM2B");

                entity.Property(e => e.Abord).HasColumnName("ABORD");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bdate2)
                    .HasColumnName("BDATE2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Btime2)
                    .IsRequired()
                    .HasColumnName("BTIME2")
                    .HasMaxLength(50);

                entity.Property(e => e.Btime3)
                    .IsRequired()
                    .HasColumnName("BTIME3")
                    .HasMaxLength(50);

                entity.Property(e => e.CfmMan)
                    .IsRequired()
                    .HasColumnName("CFM_MAN ")
                    .HasMaxLength(50);

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Compname)
                    .IsRequired()
                    .HasColumnName("COMPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Cust)
                    .IsRequired()
                    .HasColumnName("CUST")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.DsName)
                    .IsRequired()
                    .HasColumnName("DS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DsNo)
                    .IsRequired()
                    .HasColumnName("DS_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Edate2)
                    .HasColumnName("EDATE2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime2)
                    .IsRequired()
                    .HasColumnName("ETIME2")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime3)
                    .IsRequired()
                    .HasColumnName("ETIME3")
                    .HasMaxLength(50);

                entity.Property(e => e.GoType)
                    .IsRequired()
                    .HasColumnName("GO_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NotDisp).HasColumnName("NOT_DISP");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Onetomany).HasColumnName("ONETOMANY");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Target)
                    .IsRequired()
                    .HasColumnName("TARGET")
                    .HasMaxLength(50);

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);

                entity.Property(e => e.Unitname)
                    .IsRequired()
                    .HasColumnName("UNITNAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm2j>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM2J");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Ot1Hrs)
                    .HasColumnName("OT1_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot2Hrs)
                    .HasColumnName("OT2_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrcd)
                    .IsRequired()
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SugHrs)
                    .HasColumnName("SUG_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Tranp).HasColumnName("TRANP");

                entity.Property(e => e.Trans).HasColumnName("TRANS");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm2p>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM2P");

                entity.Property(e => e.Abs1Hrs)
                    .HasColumnName("ABS1_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Abs2Hrs)
                    .HasColumnName("ABS2_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AbsHrs)
                    .HasColumnName("ABS_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SugHrs)
                    .HasColumnName("SUG_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Trans).HasColumnName("TRANS");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm2t>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM2T");

                entity.Property(e => e.AName)
                    .IsRequired()
                    .HasColumnName("A_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.TCode1)
                    .IsRequired()
                    .HasColumnName("T_CODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.TCode2)
                    .IsRequired()
                    .HasColumnName("T_CODE2")
                    .HasMaxLength(50);

                entity.Property(e => e.TCode3)
                    .IsRequired()
                    .HasColumnName("T_CODE3")
                    .HasMaxLength(50);

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Frm41>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM41");

                entity.Property(e => e.AccTr)
                    .IsRequired()
                    .HasColumnName("ACC_TR")
                    .HasMaxLength(50);

                entity.Property(e => e.AccTrname)
                    .IsRequired()
                    .HasColumnName("ACC_TRNAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Acccd)
                    .IsRequired()
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Acccr)
                    .IsRequired()
                    .HasColumnName("ACCCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Accdr)
                    .IsRequired()
                    .HasColumnName("ACCDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Accname)
                    .IsRequired()
                    .HasColumnName("ACCNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm42>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM42");

                entity.Property(e => e.Define1)
                    .HasColumnName("DEFINE1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Define2)
                    .HasColumnName("DEFINE2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Define3)
                    .HasColumnName("DEFINE3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Para1)
                    .IsRequired()
                    .HasColumnName("PARA1")
                    .HasMaxLength(50);

                entity.Property(e => e.Para2)
                    .IsRequired()
                    .HasColumnName("PARA2")
                    .HasMaxLength(50);

                entity.Property(e => e.Para3)
                    .IsRequired()
                    .HasColumnName("PARA3")
                    .HasMaxLength(50);

                entity.Property(e => e.Saltycd)
                    .IsRequired()
                    .HasColumnName("SALTYCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Saltyname)
                    .IsRequired()
                    .HasColumnName("SALTYNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm43>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM43");

                entity.Property(e => e.Abspay).HasColumnName("ABSPAY");

                entity.Property(e => e.Acccd)
                    .IsRequired()
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Advpay).HasColumnName("ADVPAY");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.AttrName)
                    .IsRequired()
                    .HasColumnName("ATTR_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.CalFreq)
                    .IsRequired()
                    .HasColumnName("CAL_FREQ")
                    .HasMaxLength(50);

                entity.Property(e => e.CalType)
                    .IsRequired()
                    .HasColumnName("CAL_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Daily).HasColumnName("DAILY");

                entity.Property(e => e.Definedays)
                    .HasColumnName("DEFINEDAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Forbank).HasColumnName("FORBANK");

                entity.Property(e => e.Forcash).HasColumnName("FORCASH");

                entity.Property(e => e.Hrs)
                    .HasColumnName("HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inslab).HasColumnName("INSLAB");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Later).HasColumnName("LATER");

                entity.Property(e => e.MaxAmt)
                    .HasColumnName("MAX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.MinAmt)
                    .HasColumnName("MIN_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Monthtype)
                    .IsRequired()
                    .HasColumnName("MONTHTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Notfreq).HasColumnName("NOTFREQ");

                entity.Property(e => e.Oldretire).HasColumnName("OLDRETIRE");

                entity.Property(e => e.Ot).HasColumnName("OT");

                entity.Property(e => e.Retire).HasColumnName("RETIRE");

                entity.Property(e => e.SalAttr)
                    .IsRequired()
                    .HasColumnName("SAL_ATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalEname)
                    .IsRequired()
                    .HasColumnName("SAL_ENAME")
                    .HasMaxLength(60);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Salbasd1).HasColumnName("SALBASD1");

                entity.Property(e => e.SosId)
                    .IsRequired()
                    .HasColumnName("SOS_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wel).HasColumnName("WEL");

                entity.Property(e => e.Yearpay).HasColumnName("YEARPAY");
            });

            modelBuilder.Entity<Frm46>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM46");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amtb)
                    .HasColumnName("AMTB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm46a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM46A");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amtb)
                    .HasColumnName("AMTB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm46b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM46B");

                entity.Property(e => e.ADate)
                    .HasColumnName("A_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.APer)
                    .HasColumnName("A_PER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AType).HasColumnName("A_TYPE");

                entity.Property(e => e.Acno)
                    .IsRequired()
                    .HasColumnName("ACNO")
                    .HasMaxLength(50);

                entity.Property(e => e.CDate)
                    .HasColumnName("C_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.DeAdd)
                    .IsRequired()
                    .HasColumnName("DE_ADD")
                    .HasMaxLength(60);

                entity.Property(e => e.DeDept)
                    .IsRequired()
                    .HasColumnName("DE_DEPT")
                    .HasMaxLength(200);

                entity.Property(e => e.DeMan)
                    .IsRequired()
                    .HasColumnName("DE_MAN")
                    .HasMaxLength(200);

                entity.Property(e => e.DeTel)
                    .IsRequired()
                    .HasColumnName("DE_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasColumnName("DEPT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dispatch)
                    .IsRequired()
                    .HasColumnName("DISPATCH")
                    .HasMaxLength(50);

                entity.Property(e => e.FAmt)
                    .HasColumnName("F_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FDate)
                    .HasColumnName("F_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LawDept)
                    .IsRequired()
                    .HasColumnName("LAW_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.LawMan)
                    .IsRequired()
                    .HasColumnName("LAW_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LawTel)
                    .IsRequired()
                    .HasColumnName("LAW_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(120);

                entity.Property(e => e.NameC)
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.PAmt)
                    .HasColumnName("P_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.PDate)
                    .HasColumnName("P_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.PPer)
                    .HasColumnName("P_PER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TAmt)
                    .HasColumnName("T_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TDate)
                    .HasColumnName("T_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.YymmB)
                    .IsRequired()
                    .HasColumnName("YYMM_B")
                    .HasMaxLength(50);

                entity.Property(e => e.YymmE)
                    .IsRequired()
                    .HasColumnName("YYMM_E")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm46c>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM46C");

                entity.Property(e => e.Acno)
                    .IsRequired()
                    .HasColumnName("ACNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm47>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM47");

                entity.Property(e => e.AttRote)
                    .HasColumnName("ATT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .HasColumnName("DEPT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptsName)
                    .HasColumnName("DEPTS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HoliType)
                    .HasColumnName("HOLI_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IsHoli).HasColumnName("isHoli");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.OtType)
                    .HasColumnName("OT_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrcd)
                    .IsRequired()
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm48>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM48");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AdjCode)
                    .IsRequired()
                    .HasColumnName("ADJ_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mlssalcode)
                    .IsRequired()
                    .HasColumnName("MLSSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Salseq)
                    .IsRequired()
                    .HasColumnName("SALSEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm49>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM49");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp)
                    .HasColumnName("EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.FaName)
                    .IsRequired()
                    .HasColumnName("FA_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Fundamt)
                    .HasColumnName("FUNDAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inscd)
                    .HasColumnName("INSCD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.InsurType)
                    .IsRequired()
                    .HasColumnName("INSUR_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobamt)
                    .HasColumnName("JOBAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Notedit).HasColumnName("NOTEDIT");

                entity.Property(e => e.RateCode)
                    .IsRequired()
                    .HasColumnName("RATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SNo)
                    .IsRequired()
                    .HasColumnName("S_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalYymm)
                    .IsRequired()
                    .HasColumnName("SAL_YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm4itype>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM4ITYPE");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Frm4l>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM4L");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(120);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm4pPrinttype>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM4P_PRINTTYPE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Frm83>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM83");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasColumnName("DEPT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Efflvl)
                    .IsRequired()
                    .HasColumnName("EFFLVL")
                    .HasMaxLength(50);

                entity.Property(e => e.Effscore)
                    .HasColumnName("EFFSCORE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Efftype)
                    .HasColumnName("EFFTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GetHoliCodeList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GetHoliCodeList");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Grprelcd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GRPRELCD");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Harcode>(entity =>
            {
                entity.HasKey(e => e.RateCode);

                entity.ToTable("HARCODE");

                entity.HasIndex(e => e.RateCode)
                    .HasName("IX_HARCODE");

                entity.Property(e => e.RateCode)
                    .HasColumnName("RATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Compcharge)
                    .HasColumnName("COMPCHARGE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FixAmt)
                    .HasColumnName("FIX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nopaytop)
                    .HasColumnName("NOPAYTOP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Partial)
                    .HasColumnName("PARTIAL")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RateName)
                    .IsRequired()
                    .HasColumnName("RATE_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Selfcharge)
                    .HasColumnName("SELFCHARGE")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Hcode>(entity =>
            {
                entity.HasKey(e => e.HCode1);

                entity.ToTable("HCODE");

                entity.HasIndex(e => e.HCode1)
                    .HasName("IX_HCODE");

                entity.Property(e => e.HCode1)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Absunit)
                    .HasColumnName("ABSUNIT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.Calot).HasColumnName("CALOT");

                entity.Property(e => e.Che).HasColumnName("CHE");

                entity.Property(e => e.Datemin)
                    .HasColumnName("DATEMIN")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Dateunit)
                    .IsRequired()
                    .HasColumnName("DATEUNIT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dcode)
                    .IsRequired()
                    .HasColumnName("DCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DisApp)
                    .HasColumnName("DIS_APP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Discontent).HasColumnName("DISCONTENT");

                entity.Property(e => e.Displayform).HasColumnName("DISPLAYFORM");

                entity.Property(e => e.EfNight).HasColumnName("EF_NIGHT");

                entity.Property(e => e.EffFood).HasColumnName("EFF_FOOD");

                entity.Property(e => e.Flag)
                    .HasColumnName("FLAG")
                    .HasMaxLength(50);

                entity.Property(e => e.HCodeDisp)
                    .HasColumnName("H_CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.HEname)
                    .IsRequired()
                    .HasColumnName("H_ENAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Htype)
                    .HasColumnName("HTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.InHoli).HasColumnName("IN_HOLI");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.MaxNum)
                    .HasColumnName("MAX_NUM")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.MinNum)
                    .HasColumnName("MIN_NUM")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Noaward).HasColumnName("NOAWARD");

                entity.Property(e => e.NotDel).HasColumnName("NOT_DEL");

                entity.Property(e => e.NotSum).HasColumnName("NOT_SUM");

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("SEX")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);

                entity.Property(e => e.YearRest)
                    .IsRequired()
                    .HasColumnName("YEAR_REST")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HcodeRule>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Custom).HasMaxLength(500);

                entity.Property(e => e.Interval)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.Value1).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Value2).HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<HcodeType>(entity =>
            {
                entity.HasKey(e => e.Htype);

                entity.Property(e => e.Htype)
                    .HasColumnName("HTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpireCode).HasMaxLength(50);

                entity.Property(e => e.ExtendCode).HasMaxLength(50);

                entity.Property(e => e.GetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HourBankCode).HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasColumnName("TYPE_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearMax)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Hcodes>(entity =>
            {
                entity.HasKey(e => new { e.HCode, e.SalCode });

                entity.ToTable("HCODES");

                entity.HasIndex(e => e.HCode)
                    .HasName("H_CODE");

                entity.HasIndex(e => e.Rate)
                    .HasName("RATE");

                entity.HasIndex(e => e.SalCode)
                    .HasName("SAL_CODE");

                entity.HasIndex(e => new { e.HCode, e.SalCode })
                    .HasName("IX_HCODES");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mlssalcode)
                    .IsRequired()
                    .HasColumnName("MLSSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Hcodesrate>(entity =>
            {
                entity.HasKey(e => new { e.HCode, e.SalCode, e.YearB, e.DayB });

                entity.ToTable("HCODESRATE");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.YearB)
                    .HasColumnName("YEAR_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DayB)
                    .HasColumnName("DAY_B")
                    .HasColumnType("decimal(12, 6)");

                entity.Property(e => e.DayE)
                    .HasColumnName("DAY_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.YearE)
                    .HasColumnName("YEAR_E")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Health>(entity =>
            {
                entity.HasKey(e => e.AuthKey);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1).HasColumnName("NOTE1");

                entity.Property(e => e.Note2).HasColumnName("NOTE2");

                entity.Property(e => e.Note3).HasColumnName("NOTE3");

                entity.Property(e => e.Note4).HasColumnName("NOTE4");

                entity.Property(e => e.Note5).HasColumnName("NOTE5");

                entity.Property(e => e.Sp).HasColumnName("SP");
            });

            modelBuilder.Entity<HolDay>(entity =>
            {
                entity.HasKey(e => new { e.Adate, e.HoliCode, e.Rote });

                entity.ToTable("HOL_DAY");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HoliCode)
                    .HasColumnName("HOLI_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rote)
                    .HasColumnName("ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Atype)
                    .IsRequired()
                    .HasColumnName("ATYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Otratecd)
                    .IsRequired()
                    .HasColumnName("OTRATECD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Holi>(entity =>
            {
                entity.HasKey(e => new { e.HDate, e.HoliCode });

                entity.ToTable("HOLI");

                entity.HasIndex(e => e.AttCode)
                    .HasName("ATT_CODE");

                entity.HasIndex(e => e.HDate)
                    .HasName("H_DATE");

                entity.HasIndex(e => e.HoliCode)
                    .HasName("HOLI_CODE");

                entity.HasIndex(e => new { e.HDate, e.KeyMan })
                    .HasName("IX_HOLI");

                entity.Property(e => e.HDate)
                    .HasColumnName("H_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HoliCode)
                    .HasColumnName("HOLI_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AttCode)
                    .IsRequired()
                    .HasColumnName("ATT_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Holi1).HasColumnName("HOLI");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Othcode)
                    .IsRequired()
                    .HasColumnName("OTHCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Holicd>(entity =>
            {
                entity.HasKey(e => e.HoliCode);

                entity.ToTable("HOLICD");

                entity.HasIndex(e => e.DateCode)
                    .HasName("DATE_CODE");

                entity.HasIndex(e => e.HoliCode)
                    .HasName("IX_HOLICD");

                entity.Property(e => e.HoliCode)
                    .HasColumnName("HOLI_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.DateCode)
                    .IsRequired()
                    .HasColumnName("DATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HoliCodeDisp)
                    .HasColumnName("HOLI_CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.HoliName)
                    .IsRequired()
                    .HasColumnName("HOLI_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Noset).HasColumnName("NOSET");
            });

            modelBuilder.Entity<Holidays>(entity =>
            {
                entity.HasKey(e => e.Holidayid)
                    .HasName("HOLID");

                entity.ToTable("HOLIDAYS");

                entity.HasIndex(e => e.Holidayname)
                    .HasName("HOLIDAYNAME")
                    .IsUnique();

                entity.Property(e => e.Holidayid).HasColumnName("HOLIDAYID");

                entity.Property(e => e.DeptId)
                    .HasColumnName("DeptID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Duration).HasColumnName("DURATION");

                entity.Property(e => e.Holidayday)
                    .HasColumnName("HOLIDAYDAY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Holidaymonth).HasColumnName("HOLIDAYMONTH");

                entity.Property(e => e.Holidayname)
                    .HasColumnName("HOLIDAYNAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Holidaytype).HasColumnName("HOLIDAYTYPE");

                entity.Property(e => e.Holidayyear).HasColumnName("HOLIDAYYEAR");

                entity.Property(e => e.Minzu)
                    .HasColumnName("MINZU")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Starttime)
                    .HasColumnName("STARTTIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Timezone)
                    .HasColumnName("timezone")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Xinbie)
                    .HasColumnName("XINBIE")
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HrFile>(entity =>
            {
                entity.ToTable("HR_File");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FileDesc).HasMaxLength(500);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FileNameExt).HasMaxLength(10);

                entity.Property(e => e.FileType).HasMaxLength(200);

                entity.Property(e => e.GroupId)
                    .IsRequired()
                    .HasColumnName("GroupID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsStoredInDb)
                    .IsRequired()
                    .HasColumnName("IsStoredInDB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Path).HasMaxLength(1000);
            });

            modelBuilder.Entity<HrPortalAbs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HR_Portal_Abs");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.TolDay)
                    .HasColumnName("TOL_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);

                entity.Property(e => e.YearRest)
                    .IsRequired()
                    .HasColumnName("YEAR_REST")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrPortalAttend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HR_Portal_Attend");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotename)
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrPortalEmpInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HR_Portal_EmpInfo");

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Empdescr)
                    .HasColumnName("EMPDESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.NameAd)
                    .HasColumnName("NAME_AD")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrPortalEmpInfoLe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HR_Portal_EmpInfo_Le");

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Empdescr)
                    .HasColumnName("EMPDESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.NameAd)
                    .HasColumnName("NAME_AD")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrPortalOt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HR_Portal_Ot");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Otrname)
                    .HasColumnName("OTRNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrdMessage>(entity =>
            {
                entity.HasKey(e => e.MessageId);

                entity.ToTable("HRD_MESSAGE");

                entity.Property(e => e.MessageId).HasColumnName("MESSAGE_ID");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .HasColumnName("CREATE_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Language1)
                    .HasColumnName("LANGUAGE1")
                    .HasMaxLength(200);

                entity.Property(e => e.Language2)
                    .HasColumnName("LANGUAGE2")
                    .HasMaxLength(200);

                entity.Property(e => e.Language3)
                    .HasColumnName("LANGUAGE3")
                    .HasMaxLength(200);

                entity.Property(e => e.Language4)
                    .HasColumnName("LANGUAGE4")
                    .HasMaxLength(200);

                entity.Property(e => e.Language5)
                    .HasColumnName("LANGUAGE5")
                    .HasMaxLength(200);

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateMan)
                    .HasColumnName("UPDATE_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<IdType>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_IDNO_TYPE");

                entity.ToTable("ID_TYPE");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.CheckType)
                    .HasColumnName("CHECK_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .IsRequired()
                    .HasColumnName("KEY_DATE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<ImportType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IMPORT_TYPE");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<InOutLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreateBy)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasColumnName("EmployeeID")
                    .HasMaxLength(20);

                entity.Property(e => e.InOutTime).HasColumnType("datetime");

                entity.Property(e => e.LastUpdateBy)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Inholi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INHOLI");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Inpolab>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.FaIdno, e.Yymm, e.InsurType });

                entity.ToTable("INPOLAB");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.InsurType)
                    .HasColumnName("INSUR_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp)
                    .HasColumnName("EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inscd)
                    .HasColumnName("INSCD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.RateCode)
                    .IsRequired()
                    .HasColumnName("RATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<InsCnCodeTts>(entity =>
            {
                entity.HasKey(e => new { e.InsurCnCode, e.Adate });

                entity.Property(e => e.InsurCnCode).HasMaxLength(50);

                entity.Property(e => e.Adate).HasColumnType("datetime");

                entity.Property(e => e.Amt).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.CompMaxValue).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.CompMinValue).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.CompRate).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.CompTtsValue).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.CompValue).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Ddate).HasColumnType("datetime");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SelfMaxValue).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.SelfMinValue).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.SelfRate).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.SelfTtsValue).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.SelfValue).HasColumnType("decimal(14, 4)");

                entity.HasOne(d => d.InsurCnCodeNavigation)
                    .WithMany(p => p.InsCnCodeTts)
                    .HasForeignKey(d => d.InsurCnCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsCnCodeTts_InsurCnCode");
            });

            modelBuilder.Entity<InsCnComp>(entity =>
            {
                entity.HasKey(e => e.CompCode);

                entity.Property(e => e.CompCode).HasMaxLength(50);

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ChairMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CompId)
                    .IsRequired()
                    .HasColumnName("CompID")
                    .HasMaxLength(50);

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IdNo)
                    .IsRequired()
                    .HasColumnName("IdNO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tel)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InsCnType>(entity =>
            {
                entity.HasKey(e => e.InsCnType1);

                entity.Property(e => e.InsCnType1)
                    .HasColumnName("InsCnType")
                    .HasMaxLength(50);

                entity.Property(e => e.InsCnTypeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Inscomp>(entity =>
            {
                entity.HasKey(e => e.SNo);

                entity.ToTable("INSCOMP");

                entity.Property(e => e.SNo)
                    .HasColumnName("S_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Defa).HasColumnName("DEFA");

                entity.Property(e => e.Insaddr)
                    .IsRequired()
                    .HasColumnName("INSADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Insidno)
                    .IsRequired()
                    .HasColumnName("INSIDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Insman)
                    .IsRequired()
                    .HasColumnName("INSMAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Insname)
                    .IsRequired()
                    .HasColumnName("INSNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Insno)
                    .IsRequired()
                    .HasColumnName("INSNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Inspo)
                    .IsRequired()
                    .HasColumnName("INSPO")
                    .HasMaxLength(50);

                entity.Property(e => e.Inssub)
                    .IsRequired()
                    .HasColumnName("INSSUB")
                    .HasMaxLength(50);

                entity.Property(e => e.Instel)
                    .IsRequired()
                    .HasColumnName("INSTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.RelMan)
                    .IsRequired()
                    .HasColumnName("REL_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RelTel)
                    .IsRequired()
                    .HasColumnName("REL_TEL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Inscountry>(entity =>
            {
                entity.HasKey(e => e.SNo);

                entity.ToTable("INSCOUNTRY");

                entity.Property(e => e.SNo)
                    .HasColumnName("S_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("S_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Insglv>(entity =>
            {
                entity.HasKey(e => e.InsType);

                entity.ToTable("INSGLV");

                entity.Property(e => e.InsType)
                    .HasColumnName("INS_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CancerA)
                    .HasColumnName("CANCER_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CancerB)
                    .HasColumnName("CANCER_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CancerC)
                    .HasColumnName("CANCER_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CancerD)
                    .HasColumnName("CANCER_D")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ChanceA)
                    .HasColumnName("CHANCE_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ChanceB)
                    .HasColumnName("CHANCE_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ChanceC)
                    .HasColumnName("CHANCE_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ChanceD)
                    .HasColumnName("CHANCE_D")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ExpA)
                    .HasColumnName("EXP_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ExpB)
                    .HasColumnName("EXP_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ExpC)
                    .HasColumnName("EXP_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ExpD)
                    .HasColumnName("EXP_D")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HospitalA)
                    .HasColumnName("HOSPITAL_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HospitalB)
                    .HasColumnName("HOSPITAL_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HospitalC)
                    .HasColumnName("HOSPITAL_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HospitalD)
                    .HasColumnName("HOSPITAL_D")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LifeA)
                    .HasColumnName("LIFE_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.LifeB)
                    .HasColumnName("LIFE_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.LifeC)
                    .HasColumnName("LIFE_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.LifeD)
                    .HasColumnName("LIFE_D")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OutpatA)
                    .HasColumnName("OUTPAT_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OutpatB)
                    .HasColumnName("OUTPAT_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OutpatC)
                    .HasColumnName("OUTPAT_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OutpatD)
                    .HasColumnName("OUTPAT_D")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Insgrf>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.FaIdno, e.InDate, e.OutDate });

                entity.ToTable("INSGRF");

                entity.HasIndex(e => e.FaIdno)
                    .HasName("FA_IDNO");

                entity.HasIndex(e => e.InDate)
                    .HasName("IN_DATE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.OutDate)
                    .HasName("OUT_DATE");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.OutDate)
                    .HasColumnName("OUT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Insgrp>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.FaIdno, e.InDate, e.OutDate });

                entity.ToTable("INSGRP");

                entity.HasIndex(e => e.Amt1)
                    .HasName("AMT1");

                entity.HasIndex(e => e.Code)
                    .HasName("CODE");

                entity.HasIndex(e => e.FaIdno)
                    .HasName("FA_IDNO");

                entity.HasIndex(e => e.InDate)
                    .HasName("IN_DATE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.OutDate)
                    .HasName("OUT_DATE");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.OutDate)
                    .HasColumnName("OUT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Amt1)
                    .HasColumnName("AMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt3)
                    .HasColumnName("AMT3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt4)
                    .HasColumnName("AMT4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt5)
                    .HasColumnName("AMT5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt6)
                    .HasColumnName("AMT6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Cop1)
                    .HasColumnName("COP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop2)
                    .HasColumnName("COP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop3)
                    .HasColumnName("COP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop4)
                    .HasColumnName("COP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop5)
                    .HasColumnName("COP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Copexp)
                    .HasColumnName("COPEXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1)
                    .HasColumnName("EXP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1cal).HasColumnName("EXP1CAL");

                entity.Property(e => e.Exp2)
                    .HasColumnName("EXP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp2cal).HasColumnName("EXP2CAL");

                entity.Property(e => e.Exp3)
                    .HasColumnName("EXP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp3cal).HasColumnName("EXP3CAL");

                entity.Property(e => e.Exp4)
                    .HasColumnName("EXP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp5)
                    .HasColumnName("EXP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.GrpType)
                    .IsRequired()
                    .HasColumnName("GRP_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Pan)
                    .IsRequired()
                    .HasColumnName("PAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Totexp)
                    .HasColumnName("TOTEXP")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Inslab>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.FaIdno, e.InDate })
                    .HasName("PK_INSLAB_1");

                entity.ToTable("INSLAB");

                entity.HasIndex(e => e.Code)
                    .HasName("CODE");

                entity.HasIndex(e => e.FaIdno)
                    .HasName("FA_IDNO");

                entity.HasIndex(e => e.HAmt)
                    .HasName("H_AMT");

                entity.HasIndex(e => e.HrateCode)
                    .HasName("HRATE_CODE");

                entity.HasIndex(e => e.InDate)
                    .HasName("IX_INSLAB_1");

                entity.HasIndex(e => e.LAmt)
                    .HasName("L_AMT");

                entity.HasIndex(e => e.LrateCode)
                    .HasName("LRATE_CODE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.OutDate)
                    .HasName("OUT_DATE");

                entity.HasIndex(e => new { e.Nobr, e.FaIdno })
                    .HasName("IX_INSLAB");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Code1)
                    .IsRequired()
                    .HasColumnName("CODE1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HAmt)
                    .HasColumnName("H_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HrateCode)
                    .IsRequired()
                    .HasColumnName("HRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LAmt)
                    .HasColumnName("L_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.LrateCode)
                    .IsRequired()
                    .HasColumnName("LRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutDate)
                    .HasColumnName("OUT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pemp).HasColumnName("PEMP");

                entity.Property(e => e.Pemp1).HasColumnName("PEMP1");

                entity.Property(e => e.RAmt)
                    .HasColumnName("R_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RoutDate)
                    .HasColumnName("ROUT_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SNo)
                    .IsRequired()
                    .HasColumnName("S_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sptyp)
                    .IsRequired()
                    .HasColumnName("SPTYP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Wbsptyp)
                    .IsRequired()
                    .HasColumnName("WBSPTYP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<InslabCn>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("InslabCN");

                entity.Property(e => e.Amt).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.CompRate).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.InsCnComp)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InsurCnCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.OutDate).HasColumnType("datetime");

                entity.Property(e => e.SelfRate).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.TtsCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.InsCnCompNavigation)
                    .WithMany(p => p.InslabCn)
                    .HasForeignKey(d => d.InsCnComp)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InslabCN_InsCnComp");

                entity.HasOne(d => d.InsurCnCodeNavigation)
                    .WithMany(p => p.InslabCn)
                    .HasForeignKey(d => d.InsurCnCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InslabCN_InsurCnCode");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.InslabCn)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InslabCN_BASE");
            });

            modelBuilder.Entity<Insname>(entity =>
            {
                entity.HasKey(e => e.No);

                entity.ToTable("INSNAME");

                entity.HasIndex(e => e.No)
                    .HasName("IX_INSNAME");

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.No1)
                    .IsRequired()
                    .HasColumnName("NO1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<InsurCnCode>(entity =>
            {
                entity.HasKey(e => e.InsurCnCode1);

                entity.Property(e => e.InsurCnCode1)
                    .HasColumnName("InsurCnCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Decimals).HasDefaultValueSql("((2))");

                entity.Property(e => e.InsCnType).HasMaxLength(50);

                entity.Property(e => e.InsurCnName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WorkCd)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<InsurCnWorkCd>(entity =>
            {
                entity.HasKey(e => e.InsurCnWorkCd1);

                entity.Property(e => e.InsurCnWorkCd1)
                    .HasColumnName("InsurCnWorkCd")
                    .HasMaxLength(50);

                entity.Property(e => e.InsurCnWorkName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("Key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("key_man")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InsurType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSUR_TYPE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Insurcd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSURCD");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Insurlv>(entity =>
            {
                entity.HasKey(e => e.Amt)
                    .HasName("PK_INSURLV_1");

                entity.ToTable("INSURLV");

                entity.HasIndex(e => e.Amt)
                    .HasName("IX_INSURLV");

                entity.HasIndex(e => e.EffDateh)
                    .HasName("EFF_DATEH");

                entity.HasIndex(e => e.EffDatel)
                    .HasName("EFF_DATEL");

                entity.HasIndex(e => e.LffDateh)
                    .HasName("LFF_DATEH");

                entity.HasIndex(e => e.LffDatel)
                    .HasName("LEFF_DATEL");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.EffDateh)
                    .HasColumnName("EFF_DATEH")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffDatel)
                    .HasColumnName("EFF_DATEL")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffDater)
                    .HasColumnName("EFF_DATER")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EffRate)
                    .HasColumnName("EFF_RATE")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LffDateh)
                    .HasColumnName("LFF_DATEH")
                    .HasColumnType("datetime");

                entity.Property(e => e.LffDatel)
                    .HasColumnName("LFF_DATEL")
                    .HasColumnType("datetime");

                entity.Property(e => e.LffDater)
                    .HasColumnName("LFF_DATER")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<JbGetCardDataView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_GetCardDataView");

                entity.Property(e => e.CardNo)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Checktime)
                    .HasColumnName("CHECKTIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Sensorid)
                    .IsRequired()
                    .HasColumnName("SENSORID")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ssn)
                    .HasColumnName("SSN")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JbHrAbs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Abs");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateE)
                    .HasColumnName("dDateE")
                    .HasColumnType("datetime");

                entity.Property(e => e.ITolHours)
                    .HasColumnName("iTolHours")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SAname)
                    .HasColumnName("sAname")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SSerNo)
                    .HasColumnName("sSerNo")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeB)
                    .HasColumnName("sTimeB")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeE)
                    .HasColumnName("sTimeE")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrAbs1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Abs1");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateE)
                    .HasColumnName("dDateE")
                    .HasColumnType("datetime");

                entity.Property(e => e.ITolHours)
                    .HasColumnName("iTolHours")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SAname)
                    .IsRequired()
                    .HasColumnName("sAname")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SSerNo)
                    .HasColumnName("sSerNo")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeB)
                    .HasColumnName("sTimeB")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeE)
                    .HasColumnName("sTimeE")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrAbsUnion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_AbsUnion");

                entity.Property(e => e.BChe).HasColumnName("bChe");

                entity.Property(e => e.BDiscontent).HasColumnName("bDiscontent");

                entity.Property(e => e.BDisplayform).HasColumnName("bDisplayform");

                entity.Property(e => e.BInHoli).HasColumnName("bInHoli");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateE)
                    .HasColumnName("dDateE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IInterval)
                    .HasColumnName("iInterval")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IMax)
                    .HasColumnName("iMax")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IMin)
                    .HasColumnName("iMin")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IUse)
                    .HasColumnName("iUse")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SDcode)
                    .HasColumnName("sDcode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliName)
                    .HasColumnName("sHoliName")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SSex)
                    .HasColumnName("sSex")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeB)
                    .HasColumnName("sTimeB")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeE)
                    .HasColumnName("sTimeE")
                    .HasMaxLength(50);

                entity.Property(e => e.SUint)
                    .HasColumnName("sUint")
                    .HasMaxLength(50);

                entity.Property(e => e.SYearRest)
                    .HasColumnName("sYearRest")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrAbst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Abst");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateE)
                    .HasColumnName("dDateE")
                    .HasColumnType("datetime");

                entity.Property(e => e.ITolHours)
                    .HasColumnName("iTolHours")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SAname)
                    .HasColumnName("sAname")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.ST1code)
                    .HasColumnName("sT1Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ST2code)
                    .HasColumnName("sT2Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ST3code)
                    .HasColumnName("sT3Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrAttCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_AttCard");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.ST1)
                    .HasColumnName("sT1")
                    .HasMaxLength(50);

                entity.Property(e => e.ST2)
                    .HasColumnName("sT2")
                    .HasMaxLength(50);

                entity.Property(e => e.STt1)
                    .HasColumnName("sTT1")
                    .HasMaxLength(50);

                entity.Property(e => e.STt2)
                    .HasColumnName("sTT2")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrAttend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Attend");

                entity.Property(e => e.BAbs).HasColumnName("bAbs");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IEmins)
                    .HasColumnName("iEMins")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IForget)
                    .HasColumnName("iForget")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ILateMins)
                    .HasColumnName("iLateMins")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteCode)
                    .HasColumnName("sRoteCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Base");

                entity.Property(e => e.BCalAbs).HasColumnName("bCalAbs");

                entity.Property(e => e.BCountMa).HasColumnName("bCountMa");

                entity.Property(e => e.BMang).HasColumnName("bMang");

                entity.Property(e => e.BMang1).HasColumnName("bMang1");

                entity.Property(e => e.BNoTer).HasColumnName("bNoTer");

                entity.Property(e => e.BOnlyOnTime).HasColumnName("bOnlyOnTime");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DBirdt)
                    .HasColumnName("dBirdt")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DDdate)
                    .HasColumnName("dDdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DInDate)
                    .HasColumnName("dInDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DOuDate)
                    .HasColumnName("dOuDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SCalOt)
                    .HasColumnName("sCalOt")
                    .HasMaxLength(50);

                entity.Property(e => e.SCard)
                    .HasColumnName("sCard")
                    .HasMaxLength(50);

                entity.Property(e => e.SComp)
                    .HasColumnName("sComp")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptCode)
                    .HasColumnName("sDeptCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptmCode)
                    .HasColumnName("sDeptmCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptsCode)
                    .HasColumnName("sDeptsCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDi)
                    .HasColumnName("sDI")
                    .HasMaxLength(50);

                entity.Property(e => e.SEmail)
                    .HasColumnName("sEmail")
                    .HasMaxLength(60);

                entity.Property(e => e.SEmpcd)
                    .HasColumnName("sEmpcd")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobCode)
                    .HasColumnName("sJobCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJoblCode)
                    .HasColumnName("sJoblCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobsCode)
                    .HasColumnName("sJobsCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(101);

                entity.Property(e => e.SNameAd)
                    .HasColumnName("sNameAD")
                    .HasMaxLength(50);

                entity.Property(e => e.SNameC)
                    .HasColumnName("sNameC")
                    .HasMaxLength(50);

                entity.Property(e => e.SNameE)
                    .HasColumnName("sNameE")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SPassWord)
                    .HasColumnName("sPassWord")
                    .HasMaxLength(50);

                entity.Property(e => e.SRotet)
                    .HasColumnName("sRotet")
                    .HasMaxLength(50);

                entity.Property(e => e.SSaladr)
                    .HasColumnName("sSaladr")
                    .HasMaxLength(50);

                entity.Property(e => e.SSex)
                    .HasColumnName("sSex")
                    .HasMaxLength(50);

                entity.Property(e => e.STtsCode)
                    .HasColumnName("sTtsCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrBaseTts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_BaseTts");

                entity.Property(e => e.BCalAbs).HasColumnName("bCalAbs");

                entity.Property(e => e.BMang).HasColumnName("bMang");

                entity.Property(e => e.BMang1).HasColumnName("bMang1");

                entity.Property(e => e.BNoTer).HasColumnName("bNoTer");

                entity.Property(e => e.BOnlyOnTime).HasColumnName("bOnlyOnTime");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDdate)
                    .HasColumnName("dDdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DOuDate)
                    .HasColumnName("dOuDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SCalOt)
                    .HasColumnName("sCalOt")
                    .HasMaxLength(50);

                entity.Property(e => e.SCard)
                    .HasColumnName("sCard")
                    .HasMaxLength(50);

                entity.Property(e => e.SComp)
                    .HasColumnName("sComp")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptCode)
                    .HasColumnName("sDeptCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptmCode)
                    .HasColumnName("sDeptmCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptsCode)
                    .HasColumnName("sDeptsCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDi)
                    .HasColumnName("sDI")
                    .HasMaxLength(50);

                entity.Property(e => e.SEmpcd)
                    .HasColumnName("sEmpcd")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobCode)
                    .HasColumnName("sJobCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJoblCode)
                    .HasColumnName("sJoblCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobsCode)
                    .HasColumnName("sJobsCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SRotet)
                    .HasColumnName("sRotet")
                    .HasMaxLength(50);

                entity.Property(e => e.SSaladr)
                    .HasColumnName("sSaladr")
                    .HasMaxLength(50);

                entity.Property(e => e.STtsCode)
                    .HasColumnName("sTtsCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Card");

                entity.Property(e => e.BLos).HasColumnName("bLos");

                entity.Property(e => e.BNotTran).HasColumnName("bNotTran");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SCode)
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SIp)
                    .HasColumnName("sIP")
                    .HasMaxLength(50);

                entity.Property(e => e.SMeno)
                    .HasColumnName("sMeno")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SOnTime)
                    .HasColumnName("sOnTime")
                    .HasMaxLength(50);

                entity.Property(e => e.SReasonCode)
                    .HasColumnName("sReasonCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SSerNo)
                    .IsRequired()
                    .HasColumnName("sSerNo")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JbHrCardApp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_CardApp");

                entity.Property(e => e.BTemps).HasColumnName("bTemps");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.SCardNo)
                    .HasColumnName("sCardNo")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDataPa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_DataPa");

                entity.Property(e => e.DDate)
                    .HasColumnName("dDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SSaladr)
                    .HasColumnName("sSaladr")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDataPass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_DataPass");

                entity.Property(e => e.DDate)
                    .HasColumnName("dDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SSaladr)
                    .HasColumnName("sSaladr")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Dept");

                entity.Property(e => e.BRes).HasColumnName("bRes");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDdate)
                    .HasColumnName("dDdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDeptCode)
                    .HasColumnName("sDeptCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptName)
                    .HasColumnName("sDeptName")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptParent)
                    .HasColumnName("sDeptParent")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptPathCode)
                    .IsRequired()
                    .HasColumnName("sDeptPathCode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SDeptPathName)
                    .IsRequired()
                    .HasColumnName("sDeptPathName")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SDeptTree)
                    .HasColumnName("sDeptTree")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDeptLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_DeptLevel");

                entity.Property(e => e.ISorting).HasColumnName("iSorting");

                entity.Property(e => e.SDeptLevelCode)
                    .IsRequired()
                    .HasColumnName("sDeptLevelCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDeptm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Deptm");

                entity.Property(e => e.SDeptCode)
                    .HasColumnName("sDeptCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptName)
                    .HasColumnName("sDeptName")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptParent)
                    .HasColumnName("sDeptParent")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptPathCode)
                    .IsRequired()
                    .HasColumnName("sDeptPathCode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SDeptPathName)
                    .IsRequired()
                    .HasColumnName("sDeptPathName")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SDeptTree)
                    .HasColumnName("sDeptTree")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .IsRequired()
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDepts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Depts");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDdate)
                    .HasColumnName("dDdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDeptCode)
                    .HasColumnName("sDeptCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptName)
                    .HasColumnName("sDeptName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrExtTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_ExtTable");

                entity.Property(e => e.SColumnDesc)
                    .HasColumnName("sColumnDesc")
                    .HasMaxLength(200);

                entity.Property(e => e.SColumnName)
                    .IsRequired()
                    .HasColumnName("sColumnName")
                    .HasMaxLength(50);

                entity.Property(e => e.SColumnValue)
                    .IsRequired()
                    .HasColumnName("sColumnValue")
                    .HasMaxLength(200);

                entity.Property(e => e.SKeyColumnName)
                    .IsRequired()
                    .HasColumnName("sKeyColumnName")
                    .HasMaxLength(50);

                entity.Property(e => e.SKeyColumnValue)
                    .IsRequired()
                    .HasColumnName("sKeyColumnValue")
                    .HasMaxLength(50);

                entity.Property(e => e.STableName)
                    .IsRequired()
                    .HasColumnName("sTableName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrHcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Hcode");

                entity.Property(e => e.BCalOt).HasColumnName("bCalOt");

                entity.Property(e => e.BCheck).HasColumnName("bCheck");

                entity.Property(e => e.BDisplayForm).HasColumnName("bDisplayForm");

                entity.Property(e => e.BInHoli).HasColumnName("bInHoli");

                entity.Property(e => e.BMang).HasColumnName("bMang");

                entity.Property(e => e.BNotDel).HasColumnName("bNotDel");

                entity.Property(e => e.IAbsUint)
                    .HasColumnName("iAbsUint")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IMax)
                    .HasColumnName("iMax")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IMin)
                    .HasColumnName("iMin")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ISort).HasColumnName("iSort");

                entity.Property(e => e.SDcode)
                    .HasColumnName("sDcode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHcode)
                    .HasColumnName("sHcode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHname)
                    .HasColumnName("sHname")
                    .HasMaxLength(50);

                entity.Property(e => e.SHnameE)
                    .HasColumnName("sHnameE")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(101);

                entity.Property(e => e.SSex)
                    .HasColumnName("sSex")
                    .HasMaxLength(50);

                entity.Property(e => e.SUnit)
                    .HasColumnName("sUnit")
                    .HasMaxLength(50);

                entity.Property(e => e.SYearRest)
                    .HasColumnName("sYearRest")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrHoli>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Holi");

                entity.Property(e => e.BHoli).HasColumnName("bHoli");

                entity.Property(e => e.DDate)
                    .HasColumnName("dDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SAttCode)
                    .HasColumnName("sAttCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtHcode)
                    .HasColumnName("sOtHcode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrHolicd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Holicd");

                entity.Property(e => e.BNoSet).HasColumnName("bNoSet");

                entity.Property(e => e.SDateCode)
                    .HasColumnName("sDateCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliName)
                    .HasColumnName("sHoliName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrJob>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Job");

                entity.Property(e => e.SJobCode)
                    .HasColumnName("sJobCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobName)
                    .HasColumnName("sJobName")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobTree)
                    .HasColumnName("sJobTree")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrJobl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Jobl");

                entity.Property(e => e.ISalSecret)
                    .HasColumnName("iSalSecret")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SJobCode)
                    .HasColumnName("sJobCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobName)
                    .HasColumnName("sJobName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrLockWage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_LockWage");

                entity.Property(e => e.SSaladr)
                    .HasColumnName("sSaladr")
                    .HasMaxLength(2);

                entity.Property(e => e.SSeq)
                    .HasColumnName("sSeq")
                    .HasMaxLength(2);

                entity.Property(e => e.SYymm)
                    .HasColumnName("sYYMM")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<JbHrOt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Ot");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.IOtCar)
                    .HasColumnName("iOtCar")
                    .HasMaxLength(41)
                    .IsUnicode(false);

                entity.Property(e => e.IOtHrs)
                    .HasColumnName("iOtHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IRestHrs)
                    .HasColumnName("iRestHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ITotHours)
                    .HasColumnName("iTotHours")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SNote)
                    .IsRequired()
                    .HasColumnName("sNote")
                    .HasMaxLength(200);

                entity.Property(e => e.SOtDept)
                    .HasColumnName("sOtDept")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtRote)
                    .HasColumnName("sOtRote")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtrcd)
                    .HasColumnName("sOtrcd")
                    .HasMaxLength(50);

                entity.Property(e => e.SSerNo)
                    .IsRequired()
                    .HasColumnName("sSerNo")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.STimeB)
                    .HasColumnName("sTimeB")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeE)
                    .HasColumnName("sTimeE")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .IsRequired()
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrOtRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_OtRate");

                entity.Property(e => e.SOtRateCode)
                    .HasColumnName("sOtRateCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtRateName)
                    .HasColumnName("sOtRateName")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtRateTypew)
                    .HasColumnName("sOtRateTypew")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrOtrcd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Otrcd");

                entity.Property(e => e.BDisplay).HasColumnName("bDisplay");

                entity.Property(e => e.BNoCalc).HasColumnName("bNoCalc");

                entity.Property(e => e.ISort).HasColumnName("iSort");

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(101);

                entity.Property(e => e.SOtrCode)
                    .HasColumnName("sOtrCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtrName)
                    .HasColumnName("sOtrName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Reason");

                entity.Property(e => e.BAtt).HasColumnName("bAtt");

                entity.Property(e => e.ISort).HasColumnName("iSort");

                entity.Property(e => e.SReasonCode)
                    .HasColumnName("sReasonCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SReasonName)
                    .HasColumnName("sReasonName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrRote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Rote");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IAlllates)
                    .HasColumnName("iAlllates")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IAlllates1)
                    .HasColumnName("iAlllates1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IDkHrs)
                    .HasColumnName("iDkHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IMoHrs)
                    .HasColumnName("iMoHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ISort).HasColumnName("iSort");

                entity.Property(e => e.IWkHrs)
                    .HasColumnName("iWkHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IYrrestHrs)
                    .HasColumnName("iYrrestHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SAttEnd)
                    .HasColumnName("sAttEnd")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(204);

                entity.Property(e => e.SOffTime)
                    .HasColumnName("sOffTime")
                    .HasMaxLength(50);

                entity.Property(e => e.SOffTime2)
                    .HasColumnName("sOffTime2")
                    .HasMaxLength(50);

                entity.Property(e => e.SOnTime)
                    .HasColumnName("sOnTime")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtBegin)
                    .HasColumnName("sOtBegin")
                    .HasMaxLength(50);

                entity.Property(e => e.SResB1time)
                    .HasColumnName("sResB1Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResB2time)
                    .HasColumnName("sResB2Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResB3time)
                    .HasColumnName("sResB3Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResB4time)
                    .HasColumnName("sResB4Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResBtime)
                    .HasColumnName("sResBTime")
                    .HasMaxLength(50);

                entity.Property(e => e.SResE1time)
                    .HasColumnName("sResE1Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResE2time)
                    .HasColumnName("sResE2Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResE3time)
                    .HasColumnName("sResE3Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResE4time)
                    .HasColumnName("sResE4Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResEtime)
                    .HasColumnName("sResETime")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteCode)
                    .HasColumnName("sRoteCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteName)
                    .HasColumnName("sRoteName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrRotechg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Rotechg");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteCode)
                    .HasColumnName("sRoteCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrRotet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Rotet");

                entity.Property(e => e.IFreqDate)
                    .HasColumnName("iFreqDate")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ISalHrs)
                    .HasColumnName("iSalHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IYrrestHrs)
                    .HasColumnName("iYrrestHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SFreq)
                    .HasColumnName("sFreq")
                    .HasMaxLength(50);

                entity.Property(e => e.SFreqStart)
                    .HasColumnName("sFreqStart")
                    .HasMaxLength(50);

                entity.Property(e => e.SInHoli)
                    .HasColumnName("sInHoli")
                    .HasMaxLength(50);

                entity.Property(e => e.SR1)
                    .HasColumnName("sR1")
                    .HasMaxLength(50);

                entity.Property(e => e.SR10)
                    .HasColumnName("sR10")
                    .HasMaxLength(50);

                entity.Property(e => e.SR2)
                    .HasColumnName("sR2")
                    .HasMaxLength(50);

                entity.Property(e => e.SR3)
                    .HasColumnName("sR3")
                    .HasMaxLength(50);

                entity.Property(e => e.SR4)
                    .HasColumnName("sR4")
                    .HasMaxLength(50);

                entity.Property(e => e.SR5)
                    .HasColumnName("sR5")
                    .HasMaxLength(50);

                entity.Property(e => e.SR6)
                    .HasColumnName("sR6")
                    .HasMaxLength(50);

                entity.Property(e => e.SR7)
                    .HasColumnName("sR7")
                    .HasMaxLength(50);

                entity.Property(e => e.SR8)
                    .HasColumnName("sR8")
                    .HasMaxLength(50);

                entity.Property(e => e.SR9)
                    .HasColumnName("sR9")
                    .HasMaxLength(50);

                entity.Property(e => e.SRotet)
                    .HasColumnName("sRotet")
                    .HasMaxLength(50);

                entity.Property(e => e.SRotetName)
                    .HasColumnName("sRotetName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrSalbasd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Salbasd");

                entity.Property(e => e.DDateA)
                    .HasColumnName("dDateA")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateD)
                    .HasColumnName("dDateD")
                    .HasColumnType("datetime");

                entity.Property(e => e.IAmt)
                    .HasColumnName("iAmt")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SSalCode)
                    .HasColumnName("sSalCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrTmTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_TmTable");

                entity.Property(e => e.D1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D11)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D12)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D13)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D14)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D15)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D16)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D17)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D18)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D19)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D20)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D21)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D22)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D23)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D24)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D25)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D26)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D27)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D28)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D29)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D30)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D31)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D9)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IFreqNo)
                    .HasColumnName("iFreqNo")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IHolis)
                    .HasColumnName("iHolis")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.INo)
                    .HasColumnName("iNo")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrTtsCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_TtsCode");

                entity.Property(e => e.STtsCode)
                    .HasColumnName("sTtsCode")
                    .HasMaxLength(50);

                entity.Property(e => e.STtsName)
                    .HasColumnName("sTtsName")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<JbHrTtscd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Ttscd");

                entity.Property(e => e.SCode)
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.HasKey(e => e.Job1);

                entity.ToTable("JOB");

                entity.HasIndex(e => e.Job1)
                    .HasName("IX_JOB");

                entity.Property(e => e.Job1)
                    .HasColumnName("JOB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobDisp)
                    .HasColumnName("JOB_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.JobEname)
                    .IsRequired()
                    .HasColumnName("JOB_ENAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobTree)
                    .HasColumnName("JOB_TREE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Jobl)
                    .HasColumnName("JOBL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Joblb)
                    .HasColumnName("JOBLB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Joble)
                    .HasColumnName("JOBLE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldJob)
                    .HasColumnName("OLD_JOB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Workamt)
                    .HasColumnName("WORKAMT")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Jobl>(entity =>
            {
                entity.HasKey(e => e.Jobl1);

                entity.ToTable("JOBL");

                entity.HasIndex(e => e.Jobl1)
                    .HasName("IX_JOBL");

                entity.Property(e => e.Jobl1)
                    .HasColumnName("JOBL")
                    .HasMaxLength(50);

                entity.Property(e => e.BSal)
                    .HasColumnName("B_SAL")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.BSal1)
                    .HasColumnName("B_SAL1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.BSal2)
                    .HasColumnName("B_SAL2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ESal)
                    .HasColumnName("E_SAL")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ESal1)
                    .HasColumnName("E_SAL1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ESal2)
                    .HasColumnName("E_SAL2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Entitle)
                    .HasColumnName("ENTITLE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JoblDisp)
                    .HasColumnName("JOBL_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.JoblGrup)
                    .IsRequired()
                    .HasColumnName("JOBL_GRUP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldJobl)
                    .IsRequired()
                    .HasColumnName("OLD_JOBL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalSecret)
                    .HasColumnName("SAL_SECRET")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Tickets)
                    .HasColumnName("TICKETS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Jobo>(entity =>
            {
                entity.HasKey(e => e.Jobo1);

                entity.ToTable("JOBO");

                entity.Property(e => e.Jobo1)
                    .HasColumnName("JOBO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobTree)
                    .IsRequired()
                    .HasColumnName("JOB_TREE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Jobs>(entity =>
            {
                entity.HasKey(e => e.Jobs1);

                entity.ToTable("JOBS");

                entity.HasIndex(e => e.Jobs1)
                    .HasName("IX_JOBS");

                entity.Property(e => e.Jobs1)
                    .HasColumnName("JOBS")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobCate)
                    .HasColumnName("JOB_CATE")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.JobsDisp)
                    .HasColumnName("JOBS_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JqColumn>(entity =>
            {
                entity.ToTable("jqColumn");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DataType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JqCondition>(entity =>
            {
                entity.ToTable("jqCondition");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comparison)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomQuery)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.QueryType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("UserID")
                    .HasMaxLength(50);

                entity.Property(e => e.Value).IsRequired();

                entity.Property(e => e.Value1).IsRequired();
            });

            modelBuilder.Entity<JqForeignKey>(entity =>
            {
                entity.ToTable("jqForeignKey");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ChildColumn)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ChildId).HasColumnName("ChildID");

                entity.Property(e => e.ChildTable)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentColumn)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.ParentTable)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");
            });

            modelBuilder.Entity<JqPreCondition>(entity =>
            {
                entity.ToTable("jqPreCondition");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comparison)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomQuery)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.QueryType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Value).IsRequired();
            });

            modelBuilder.Entity<JqSetting>(entity =>
            {
                entity.ToTable("jqSetting");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ConnectString)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerWhere)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PageSize).HasDefaultValueSql("((1000))");

                entity.Property(e => e.QueryName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuerySetting)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.SourceType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JqSqlQueryField>(entity =>
            {
                entity.ToTable("jqSqlQueryField");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomQuery)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.QueryType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JqTable>(entity =>
            {
                entity.ToTable("jqTable");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JqUserColumn>(entity =>
            {
                entity.ToTable("jqUserColumn");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BottomSummaryFormatString)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BottomSummaryOption)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DataType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TopSummaryFormatString)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TopSummaryOption)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Ks1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KS1");

                entity.Property(e => e.中文姓名)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.到職日期)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.員工編號)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.職稱)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.部門名稱)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Larcode>(entity =>
            {
                entity.HasKey(e => e.RateCode);

                entity.ToTable("LARCODE");

                entity.HasIndex(e => e.RateCode)
                    .HasName("IX_LARCODE");

                entity.Property(e => e.RateCode)
                    .HasColumnName("RATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Compcharge)
                    .HasColumnName("COMPCHARGE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Jobaccrate)
                    .HasColumnName("JOBACCRATE")
                    .HasColumnType("decimal(16, 4)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Losjobrate)
                    .HasColumnName("LOSJOBRATE")
                    .HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Normalrate)
                    .HasColumnName("NORMALRATE")
                    .HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Partial)
                    .HasColumnName("PARTIAL")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RateName)
                    .IsRequired()
                    .HasColumnName("RATE_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Selfcharge)
                    .HasColumnName("SELFCHARGE")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<LeaveClass>(entity =>
            {
                entity.HasKey(e => e.LeaveId)
                    .HasName("PK__LeaveCla__796DB9592BDF596C");

                entity.Property(e => e.LeaveName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MinUnit).HasDefaultValueSql("((1))");

                entity.Property(e => e.RemaindCount).HasDefaultValueSql("((1))");

                entity.Property(e => e.RemaindProc).HasDefaultValueSql("((1))");

                entity.Property(e => e.ReportSymbol)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Unit).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<LeaveClass1>(entity =>
            {
                entity.HasKey(e => e.LeaveId)
                    .HasName("PK__LeaveCla__796DB95937510C18");

                entity.Property(e => e.Calc).HasColumnType("text");

                entity.Property(e => e.LeaveName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MinUnit).HasDefaultValueSql("((1))");

                entity.Property(e => e.RemaindCount).HasDefaultValueSql("((1))");

                entity.Property(e => e.RemaindProc).HasDefaultValueSql("((2))");

                entity.Property(e => e.ReportSymbol)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('_')");
            });

            modelBuilder.Entity<Lican>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Descs });

                entity.ToTable("LICAN");

                entity.HasIndex(e => e.Comp)
                    .HasName("COMP");

                entity.HasIndex(e => e.Mdate)
                    .HasName("MDATE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Descs)
                    .HasColumnName("DESCS")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LicNo)
                    .IsRequired()
                    .HasColumnName("LIC_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LicNote)
                    .IsRequired()
                    .HasColumnName("LIC_NOTE")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LicPass).HasColumnName("LIC_PASS");

                entity.Property(e => e.LicanId).HasColumnName("lican_id");

                entity.Property(e => e.Mdate)
                    .HasColumnName("MDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Owner).HasColumnName("OWNER");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.Lican)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LICAN_BASE");
            });

            modelBuilder.Entity<LicanType>(entity =>
            {
                entity.HasKey(e => e.LicanType1);

                entity.ToTable("LICAN_TYPE");

                entity.Property(e => e.LicanType1)
                    .HasColumnName("LICAN_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LicanName)
                    .IsRequired()
                    .HasColumnName("LICAN_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<LockWage>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Seq, e.Saladr });

                entity.ToTable("LOCK_WAGE");

                entity.HasIndex(e => new { e.Yymm, e.Seq })
                    .HasName("YYMM");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(10);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(2);

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MaFood>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("MA_FOOD");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MaAmt)
                    .HasColumnName("MA_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotRote).HasColumnName("NOT_ROTE");

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Machines>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CommPassword)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.DateFormat).HasDefaultValueSql("((-1))");

                entity.Property(e => e.Fingercount)
                    .HasColumnName("fingercount")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.FirmwareVersion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Idle).HasDefaultValueSql("((-1))");

                entity.Property(e => e.InOutRecordWarn).HasDefaultValueSql("((-1))");

                entity.Property(e => e.Ip)
                    .HasColumnName("IP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IsAndroid)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsIfChangeConfigServer2).HasDefaultValueSql("((0))");

                entity.Property(e => e.LockControl).HasDefaultValueSql("((-1))");

                entity.Property(e => e.MachineAlias)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MachineNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.Managercount)
                    .HasColumnName("managercount")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.PhotoStamp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Port).HasDefaultValueSql("((1))");

                entity.Property(e => e.ProduceKind).HasDefaultValueSql("((1))");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Purpose).HasDefaultValueSql("((1))");

                entity.Property(e => e.SecretCount).HasDefaultValueSql("((-1))");

                entity.Property(e => e.SerialPort).HasDefaultValueSql("((1))");

                entity.Property(e => e.Sn)
                    .HasColumnName("sn")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Uilanguage)
                    .HasColumnName("UILanguage")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Usercount)
                    .HasColumnName("usercount")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Voice).HasDefaultValueSql("((-1))");
            });

            modelBuilder.Entity<Mailqueue>(entity =>
            {
                entity.ToTable("MAILQUEUE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Body)
                    .IsRequired()
                    .HasColumnName("BODY");

                entity.Property(e => e.FreezeTime)
                    .HasColumnName("FREEZE_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.FromAddr)
                    .IsRequired()
                    .HasColumnName("FROM_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.FromName)
                    .HasColumnName("FROM_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .IsRequired()
                    .HasColumnName("GUID")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Note5)
                    .HasColumnName("NOTE5")
                    .HasMaxLength(50);

                entity.Property(e => e.Retry).HasColumnName("RETRY");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasColumnName("SUBJECT")
                    .HasMaxLength(500);

                entity.Property(e => e.Success).HasColumnName("SUCCESS");

                entity.Property(e => e.Suspend).HasColumnName("SUSPEND");

                entity.Property(e => e.ToAddr)
                    .IsRequired()
                    .HasColumnName("TO_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.ToName)
                    .HasColumnName("TO_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Marquee>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DisplayText)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Marry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MARRY");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Master>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Master1 });

                entity.ToTable("MASTER");

                entity.HasIndex(e => e.Nobr)
                    .HasName("IX_MASTER");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Master1)
                    .HasColumnName("MASTER")
                    .HasMaxLength(50);

                entity.Property(e => e.Corporation)
                    .IsRequired()
                    .HasColumnName("CORPORATION")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Language)
                    .IsRequired()
                    .HasColumnName("LANGUAGE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MasterId).HasColumnName("master_id");

                entity.Property(e => e.Memo)
                    .HasColumnName("MEMO")
                    .HasMaxLength(500);

                entity.Property(e => e.Relish)
                    .IsRequired()
                    .HasColumnName("RELISH")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RelishCode)
                    .IsRequired()
                    .HasColumnName("RELISH_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.Master)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MASTER_BASE");
            });

            modelBuilder.Entity<MeetingRoom>(entity =>
            {
                entity.Property(e => e.CanRent)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MeetingRoomRentAttendee>(entity =>
            {
                entity.Property(e => e.EmpNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MeetingRoomRentRecord>(entity =>
            {
                entity.Property(e => e.Canceler).HasMaxLength(50);

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.GroupCode).HasMaxLength(50);

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.Property(e => e.Topic).HasMaxLength(1000);

                entity.Property(e => e.WritedBy).HasMaxLength(50);

                entity.Property(e => e.WritedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Menugroup>(entity =>
            {
                entity.ToTable("MENUGROUP");

                entity.Property(e => e.Menugroupid)
                    .HasColumnName("MENUGROUPID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Ak)
                    .HasColumnName("AK")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Menugroupname)
                    .IsRequired()
                    .HasColumnName("MENUGROUPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Menustripstructure>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("MENUSTRIPSTRUCTURE");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Assemblyname)
                    .HasColumnName("ASSEMBLYNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Commonitem).HasColumnName("COMMONITEM");

                entity.Property(e => e.Enable).HasColumnName("ENABLE");

                entity.Property(e => e.Itemindex).HasColumnName("ITEMINDEX");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Menugroupid).HasColumnName("MENUGROUPID");

                entity.Property(e => e.Menustripid).HasColumnName("MENUSTRIPID");

                entity.Property(e => e.Menustripname)
                    .IsRequired()
                    .HasColumnName("MENUSTRIPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Menustriptext)
                    .IsRequired()
                    .HasColumnName("MENUSTRIPTEXT")
                    .HasMaxLength(50);

                entity.Property(e => e.Parentid).HasColumnName("PARENTID");

                entity.Property(e => e.Shortcutkeys)
                    .HasColumnName("SHORTCUTKEYS")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.ToTable("MESSAGE");

                entity.Property(e => e.MessageId).HasColumnName("MESSAGE_ID");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .HasColumnName("CREATE_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Language1)
                    .HasColumnName("LANGUAGE1")
                    .HasMaxLength(200);

                entity.Property(e => e.Language2)
                    .HasColumnName("LANGUAGE2")
                    .HasMaxLength(200);

                entity.Property(e => e.Language3)
                    .HasColumnName("LANGUAGE3")
                    .HasMaxLength(200);

                entity.Property(e => e.Language4)
                    .HasColumnName("LANGUAGE4")
                    .HasMaxLength(200);

                entity.Property(e => e.Language5)
                    .HasColumnName("LANGUAGE5")
                    .HasMaxLength(200);

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateMan)
                    .HasColumnName("UPDATE_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MidOrgDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("mid_org_department");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Departmanagers)
                    .HasColumnName("departmanagers")
                    .HasMaxLength(50);

                entity.Property(e => e.Groupid)
                    .IsRequired()
                    .HasColumnName("GROUPID")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.IsEnable)
                    .IsRequired()
                    .HasColumnName("IS_ENABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Parentid)
                    .HasColumnName("PARENTID")
                    .HasMaxLength(50);

                entity.Property(e => e.Unitid)
                    .IsRequired()
                    .HasColumnName("UNITID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateTime)
                    .HasColumnName("UPDATE_TIME")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<MidOrgGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("mid_org_group");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasColumnName("IS_DELETED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsEnable)
                    .IsRequired()
                    .HasColumnName("IS_ENABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Parentid)
                    .IsRequired()
                    .HasColumnName("PARENTID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasColumnName("SHORT_NAME")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateTime)
                    .IsRequired()
                    .HasColumnName("UPDATE_TIME")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MidOrgJob>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("mid_org_job");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.IsEnable)
                    .IsRequired()
                    .HasColumnName("IS_ENABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Unitid)
                    .IsRequired()
                    .HasColumnName("UNITID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateTime)
                    .HasColumnName("UPDATE_TIME")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<MidOrgPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MID_ORG_PERSON");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Departmentid)
                    .IsRequired()
                    .HasColumnName("DEPARTMENTID")
                    .HasMaxLength(50);

                entity.Property(e => e.Groupid)
                    .IsRequired()
                    .HasColumnName("GROUPID")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.IsEnable)
                    .IsRequired()
                    .HasColumnName("IS_ENABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsFinish)
                    .IsRequired()
                    .HasColumnName("IS_FINISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Jobid)
                    .IsRequired()
                    .HasColumnName("JOBID")
                    .HasMaxLength(50);

                entity.Property(e => e.LoginName)
                    .IsRequired()
                    .HasColumnName("LOGIN_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.PersonBaseid)
                    .IsRequired()
                    .HasColumnName("PERSON_BASEID")
                    .HasMaxLength(50);

                entity.Property(e => e.Postid)
                    .IsRequired()
                    .HasColumnName("POSTID")
                    .HasMaxLength(50);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Unitid)
                    .IsRequired()
                    .HasColumnName("UNITID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateTime)
                    .HasColumnName("UPDATE_TIME")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<MidOrgPersonBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MID_ORG_PERSON_BASE");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasColumnName("ADDRESS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Age)
                    .IsRequired()
                    .HasColumnName("AGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Birthday)
                    .IsRequired()
                    .HasColumnName("BIRTHDAY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Birthplace)
                    .IsRequired()
                    .HasColumnName("BIRTHPLACE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Blog)
                    .IsRequired()
                    .HasColumnName("BLOG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Degree)
                    .IsRequired()
                    .HasColumnName("DEGREE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.ExtAttr1)
                    .IsRequired()
                    .HasColumnName("EXT_ATTR_1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ExtAttr2)
                    .IsRequired()
                    .HasColumnName("EXT_ATTR_2")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ExtAttr3)
                    .IsRequired()
                    .HasColumnName("EXT_ATTR_3")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ExtAttr4)
                    .IsRequired()
                    .HasColumnName("EXT_ATTR_4")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ExtAttr5)
                    .IsRequired()
                    .HasColumnName("EXT_ATTR_5")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasColumnName("GENDER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Hobby)
                    .IsRequired()
                    .HasColumnName("HOBBY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.IdCard)
                    .IsRequired()
                    .HasColumnName("ID_CARD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasColumnName("LOCATION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Marriage)
                    .IsRequired()
                    .HasColumnName("MARRIAGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Msn)
                    .IsRequired()
                    .HasColumnName("MSN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Nation)
                    .IsRequired()
                    .HasColumnName("NATION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Officenumber)
                    .IsRequired()
                    .HasColumnName("OFFICENUMBER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Politics)
                    .IsRequired()
                    .HasColumnName("POLITICS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Postaddress)
                    .IsRequired()
                    .HasColumnName("POSTADDRESS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Postalcode)
                    .IsRequired()
                    .HasColumnName("POSTALCODE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Qq)
                    .IsRequired()
                    .HasColumnName("QQ")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecordWage)
                    .IsRequired()
                    .HasColumnName("RECORD_WAGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Reporter)
                    .IsRequired()
                    .HasColumnName("REPORTER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Specialty)
                    .IsRequired()
                    .HasColumnName("SPECIALTY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Telphone)
                    .IsRequired()
                    .HasColumnName("TELPHONE")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateTime)
                    .HasColumnName("UPDATE_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.UsedName)
                    .IsRequired()
                    .HasColumnName("USED_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Website)
                    .IsRequired()
                    .HasColumnName("WEBSITE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Weibo)
                    .IsRequired()
                    .HasColumnName("WEIBO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Weixin)
                    .IsRequired()
                    .HasColumnName("WEIXIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.WorkStartingDate)
                    .HasColumnName("WORK_STARTING_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkingTime)
                    .IsRequired()
                    .HasColumnName("WORKING_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.YearsOfservice)
                    .IsRequired()
                    .HasColumnName("yearsOFservice")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MidOrgPersonPart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MID_ORG_PERSON_part");

                entity.Property(e => e.Departmentid)
                    .IsRequired()
                    .HasColumnName("DEPARTMENTID")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasColumnName("IS_DELETED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsFinish)
                    .IsRequired()
                    .HasColumnName("IS_FINISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Jobid)
                    .IsRequired()
                    .HasColumnName("JOBID")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PersonId)
                    .IsRequired()
                    .HasColumnName("personId")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Postid)
                    .IsRequired()
                    .HasColumnName("POSTID")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Unitid)
                    .IsRequired()
                    .HasColumnName("UNITID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateTime)
                    .IsRequired()
                    .HasColumnName("UPDATE_TIME")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MidOrgPost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("mid_org_post");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Departmentid)
                    .IsRequired()
                    .HasColumnName("DEPARTMENTID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Entityid)
                    .IsRequired()
                    .HasColumnName("ENTITYID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.IsEnable)
                    .IsRequired()
                    .HasColumnName("IS_ENABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsResponpost)
                    .IsRequired()
                    .HasColumnName("IS_RESPONPOST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateTime)
                    .HasColumnName("UPDATE_TIME")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<MidOrgUnit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("mid_org_unit");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Groupid)
                    .IsRequired()
                    .HasColumnName("GROUPID")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasColumnName("IS_DELETED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsEnable)
                    .IsRequired()
                    .HasColumnName("IS_ENABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Parentid)
                    .IsRequired()
                    .HasColumnName("PARENTID")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasColumnName("SHORT_NAME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateTime)
                    .IsRequired()
                    .HasColumnName("UPDATE_TIME")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MonthType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MONTH_TYPE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Mtcode>(entity =>
            {
                entity.HasKey(e => new { e.Category, e.Code });

                entity.ToTable("MTCODE");

                entity.Property(e => e.Category)
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasColumnName("DISPLAY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<MtcodeEntitleType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MTCODE_ENTITLE_TYPE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Nation>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("NATION");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<News>(entity =>
            {
                entity.ToTable("news");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasMaxLength(50);

                entity.Property(e => e.IsOn).HasColumnName("is_on");

                entity.Property(e => e.LatestSendMailDate).HasColumnType("datetime");

                entity.Property(e => e.NewsBody).HasColumnName("news_body");

                entity.Property(e => e.NewsHead)
                    .IsRequired()
                    .HasColumnName("news_head")
                    .HasMaxLength(200);

                entity.Property(e => e.Newsfileid)
                    .IsRequired()
                    .HasColumnName("newsfileid")
                    .HasMaxLength(50);

                entity.Property(e => e.PostDate)
                    .HasColumnName("post_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PostDeadline)
                    .HasColumnName("post_deadline")
                    .HasColumnType("datetime");

                entity.Property(e => e.PostMan)
                    .HasColumnName("post_man")
                    .HasMaxLength(50);

                entity.Property(e => e.PublishAllEmp).HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("sort");
            });

            modelBuilder.Entity<NewsBrowsing>(entity =>
            {
                entity.Property(e => e.BrowsingTime).HasColumnType("datetime");

                entity.Property(e => e.NewsId)
                    .IsRequired()
                    .HasColumnName("news_id")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<NewsComp>(entity =>
            {
                entity.Property(e => e.CompId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NewsId)
                    .IsRequired()
                    .HasColumnName("news_id")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<NewsTarget>(entity =>
            {
                entity.Property(e => e.DetpCode).HasMaxLength(50);

                entity.Property(e => e.EmpNo).HasMaxLength(50);

                entity.Property(e => e.NewsId)
                    .IsRequired()
                    .HasColumnName("news_id")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<NumRun>(entity =>
            {
                entity.ToTable("NUM_RUN");

                entity.Property(e => e.NumRunid).HasColumnName("NUM_RUNID");

                entity.Property(e => e.Cyle)
                    .HasColumnName("CYLE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Enddate)
                    .HasColumnName("ENDDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2099-12-31')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Oldid)
                    .HasColumnName("OLDID")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Startdate)
                    .HasColumnName("STARTDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2000-1-1')");

                entity.Property(e => e.Units)
                    .HasColumnName("UNITS")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<NumRunDeil>(entity =>
            {
                entity.HasKey(e => new { e.NumRunid, e.Sdays, e.Starttime })
                    .HasName("NUMID2");

                entity.ToTable("NUM_RUN_DEIL");

                entity.Property(e => e.NumRunid).HasColumnName("NUM_RUNID");

                entity.Property(e => e.Sdays).HasColumnName("SDAYS");

                entity.Property(e => e.Starttime)
                    .HasColumnName("STARTTIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Edays).HasColumnName("EDAYS");

                entity.Property(e => e.Endtime)
                    .HasColumnName("ENDTIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Schclassid)
                    .HasColumnName("SCHCLASSID")
                    .HasDefaultValueSql("((-1))");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.ToTable("ORDER");

                entity.Property(e => e.OrderId)
                    .HasColumnName("ORDER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.Property(e => e.OrderName)
                    .IsRequired()
                    .HasColumnName("ORDER_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Orgtree>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("ORGTREE");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Org)
                    .IsRequired()
                    .HasColumnName("ORG")
                    .HasMaxLength(50);

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasColumnName("ORG_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.OrgParent)
                    .IsRequired()
                    .HasColumnName("ORG_PARENT")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Ot>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime, e.Otrcd });

                entity.ToTable("OT");

                entity.HasIndex(e => e.Bdate)
                    .HasName("IX_OT_1");

                entity.HasIndex(e => e.Etime)
                    .HasName("ETIME");

                entity.HasIndex(e => e.OtDept)
                    .HasName("OT_DEPT");

                entity.HasIndex(e => e.OtEdate)
                    .HasName("OT_EDATE");

                entity.HasIndex(e => e.OtHrs)
                    .HasName("OT_HRS");

                entity.HasIndex(e => e.RestHrs)
                    .HasName("REST_HRS");

                entity.HasIndex(e => e.Yymm)
                    .HasName("IX_OT_3");

                entity.HasIndex(e => new { e.Nobr, e.Bdate })
                    .HasName("IX_OT_2");

                entity.HasIndex(e => new { e.Yymm, e.Ser })
                    .HasName("YYMM");

                entity.HasIndex(e => new { e.Nobr, e.Bdate, e.Syscreat, e.Etime, e.Yymm })
                    .HasName("IX_OT");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otrcd)
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CalcOtrateCode)
                    .HasColumnName("CALC_OTRATE_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FixAmt).HasColumnName("FIX_AMT");

                entity.Property(e => e.FoodCnt)
                    .HasColumnName("FOOD_CNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FoodPri)
                    .HasColumnName("FOOD_PRI")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FstHours)
                    .HasColumnName("FST_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH100)
                    .HasColumnName("NOP_H_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH133)
                    .HasColumnName("NOP_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH167)
                    .HasColumnName("NOP_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW133)
                    .HasColumnName("NOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW167)
                    .HasColumnName("NOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW200)
                    .HasColumnName("NOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(15, 3)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtEdate)
                    .HasColumnName("OT_EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otno)
                    .IsRequired()
                    .HasColumnName("OTNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rec)
                    .HasColumnName("REC")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.RestExp)
                    .HasColumnName("REST_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(15, 3)");

                entity.Property(e => e.TotH200)
                    .HasColumnName("TOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW100)
                    .HasColumnName("TOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Attend)
                    .WithMany(p => p.Ot)
                    .HasForeignKey(d => new { d.Nobr, d.Bdate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OT_ATTEND");
            });

            modelBuilder.Entity<Ot1>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime, e.Otrcd });

                entity.ToTable("OT1");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otrcd)
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FixAmt).HasColumnName("FIX_AMT");

                entity.Property(e => e.FoodCnt)
                    .HasColumnName("FOOD_CNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FoodPri)
                    .HasColumnName("FOOD_PRI")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FstHours)
                    .HasColumnName("FST_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH100)
                    .HasColumnName("NOP_H_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH133)
                    .HasColumnName("NOP_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH167)
                    .HasColumnName("NOP_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW133)
                    .HasColumnName("NOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW167)
                    .HasColumnName("NOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW200)
                    .HasColumnName("NOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(15, 3)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtEdate)
                    .HasColumnName("OT_EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otno)
                    .IsRequired()
                    .HasColumnName("OTNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rec)
                    .HasColumnName("REC")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.RestExp)
                    .HasColumnName("REST_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(15, 3)");

                entity.Property(e => e.TotH200)
                    .HasColumnName("TOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW100)
                    .HasColumnName("TOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<OtAttend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OtAttend");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.WkHrs)
                    .HasColumnName("WK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OtB>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime, e.Otrcd });

                entity.ToTable("OT_B");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otrcd)
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CalcOtrateCode)
                    .HasColumnName("CALC_OTRATE_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FixAmt).HasColumnName("FIX_AMT");

                entity.Property(e => e.FoodCnt)
                    .HasColumnName("FOOD_CNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FoodPri)
                    .HasColumnName("FOOD_PRI")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FstHours)
                    .HasColumnName("FST_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH100)
                    .HasColumnName("NOP_H_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH133)
                    .HasColumnName("NOP_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH167)
                    .HasColumnName("NOP_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW133)
                    .HasColumnName("NOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW167)
                    .HasColumnName("NOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW200)
                    .HasColumnName("NOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(15, 3)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtEdate)
                    .HasColumnName("OT_EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otno)
                    .IsRequired()
                    .HasColumnName("OTNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rec)
                    .HasColumnName("REC")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.RestExp)
                    .HasColumnName("REST_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(15, 3)");

                entity.Property(e => e.TotH200)
                    .HasColumnName("TOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW100)
                    .HasColumnName("TOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<OtBasetts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OtBasetts");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Workcd)
                    .IsRequired()
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Othcode>(entity =>
            {
                entity.HasKey(e => e.Othcode1);

                entity.ToTable("OTHCODE");

                entity.Property(e => e.Othcode1)
                    .HasColumnName("OTHCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Othcolor)
                    .HasColumnName("OTHCOLOR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Othholi).HasColumnName("OTHHOLI");

                entity.Property(e => e.Othname)
                    .IsRequired()
                    .HasColumnName("OTHNAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rote)
                    .HasColumnName("ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Stdholi).HasColumnName("STDHOLI");
            });

            modelBuilder.Entity<Otpre>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Btime, e.Etime });

                entity.ToTable("OTPRE");

                entity.HasIndex(e => new { e.Nobr, e.Adate })
                    .HasName("IX_OTPRE");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Ot1Hrs)
                    .HasColumnName("OT1_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot2Hrs)
                    .HasColumnName("OT2_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otrcd)
                    .IsRequired()
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SugHrs)
                    .HasColumnName("SUG_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Tranp).HasColumnName("TRANP");

                entity.Property(e => e.Trans).HasColumnName("TRANS");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OtrateType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OTRATE_TYPE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Otratecd>(entity =>
            {
                entity.HasKey(e => e.OtrateCode);

                entity.ToTable("OTRATECD");

                entity.HasIndex(e => e.OtrateCode)
                    .HasName("IX_OTRATECD");

                entity.Property(e => e.OtrateCode)
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Fixper).HasColumnName("FIXPER");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(8);

                entity.Property(e => e.MinHours)
                    .HasColumnName("MIN_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133hamt)
                    .HasColumnName("OT133HAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133hrate)
                    .HasColumnName("OT133HRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133htimeB)
                    .HasColumnName("OT133HTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133htimeE)
                    .HasColumnName("OT133HTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133namt)
                    .HasColumnName("OT133NAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133nrate)
                    .HasColumnName("OT133NRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133ntimeB)
                    .HasColumnName("OT133NTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133ntimeE)
                    .HasColumnName("OT133NTIME_E")
                    .HasColumnType("decimal(16, 2)")
                    .HasDefaultValueSql("((999))");

                entity.Property(e => e.Ot133wamt)
                    .HasColumnName("OT133WAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133wrate)
                    .HasColumnName("OT133WRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133wtimeB)
                    .HasColumnName("OT133WTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133wtimeE)
                    .HasColumnName("OT133WTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167hamt)
                    .HasColumnName("OT167HAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167hrate)
                    .HasColumnName("OT167HRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167htimeB)
                    .HasColumnName("OT167HTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167htimeE)
                    .HasColumnName("OT167HTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167namt)
                    .HasColumnName("OT167NAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167nrate)
                    .HasColumnName("OT167NRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167ntimeB)
                    .HasColumnName("OT167NTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167ntimeE)
                    .HasColumnName("OT167NTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wamt)
                    .HasColumnName("OT167WAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wrate)
                    .HasColumnName("OT167WRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wtimeB)
                    .HasColumnName("OT167WTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wtimeE)
                    .HasColumnName("OT167WTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200hamt)
                    .HasColumnName("OT200HAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200hrate)
                    .HasColumnName("OT200HRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200htimeB)
                    .HasColumnName("OT200HTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200htimeE)
                    .HasColumnName("OT200HTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200namt)
                    .HasColumnName("OT200NAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200nrate)
                    .HasColumnName("OT200NRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200ntimeB)
                    .HasColumnName("OT200NTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200ntimeE)
                    .HasColumnName("OT200NTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wamt)
                    .HasColumnName("OT200WAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wrate)
                    .HasColumnName("OT200WRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wtimeB)
                    .HasColumnName("OT200WTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wtimeE)
                    .HasColumnName("OT200WTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHSalcode)
                    .HasColumnName("OT_H_SALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.OtNSalcode)
                    .HasColumnName("OT_N_SALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.OtWSalcode)
                    .HasColumnName("OT_W_SALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.OtrateName)
                    .IsRequired()
                    .HasColumnName("OTRATE_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.OtrateTypeh)
                    .IsRequired()
                    .HasColumnName("OTRATE_TYPEH")
                    .HasMaxLength(1);

                entity.Property(e => e.OtrateTypen)
                    .IsRequired()
                    .HasColumnName("OTRATE_TYPEN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.OtrateTypew)
                    .IsRequired()
                    .HasColumnName("OTRATE_TYPEW")
                    .HasMaxLength(50);

                entity.Property(e => e.Otunit).HasColumnName("OTUNIT");
            });

            modelBuilder.Entity<Otrcd>(entity =>
            {
                entity.HasKey(e => e.Otrcd1);

                entity.ToTable("OTRCD");

                entity.HasIndex(e => e.Otrcd1)
                    .HasName("IX_OTRCD");

                entity.Property(e => e.Otrcd1)
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Callin).HasColumnName("CALLIN");

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nocalc).HasColumnName("NOCALC");

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.OtrcdDisp)
                    .HasColumnName("OTRCD_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrname)
                    .IsRequired()
                    .HasColumnName("OTRNAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");
            });

            modelBuilder.Entity<OutPost>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CodeDisp)
                    .HasColumnName("CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.OutPostName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Outcd>(entity =>
            {
                entity.HasKey(e => e.Outcd1);

                entity.ToTable("OUTCD");

                entity.HasIndex(e => e.Outcd1)
                    .HasName("IX_OUTCD");

                entity.Property(e => e.Outcd1)
                    .HasColumnName("OUTCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Outname)
                    .IsRequired()
                    .HasColumnName("OUTNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Parameter>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("PARAMETER");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Note5)
                    .HasColumnName("NOTE5")
                    .HasMaxLength(50);

                entity.Property(e => e.ParmgroupAuto).HasColumnName("PARMGROUP_AUTO");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("VALUE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ParameterTree>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("PARAMETER_TREE");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<PayDoc>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("PAY_DOC");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.DocItem).HasColumnName("DOC_ITEM");

                entity.Property(e => e.FinalDate)
                    .HasColumnName("FINAL_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .HasColumnName("MEMO")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.PayDate)
                    .HasColumnName("PAY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Payed).HasColumnName("PAYED");
            });

            modelBuilder.Entity<Provcd>(entity =>
            {
                entity.HasKey(e => e.ProvCode);

                entity.ToTable("PROVCD");

                entity.Property(e => e.ProvCode)
                    .HasColumnName("PROV_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PunchCardRecord>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.ActionType).HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDate")
                    .HasColumnType("datetime")
                    .HasComment("打卡時間");

                entity.Property(e => e.ConnectType).HasMaxLength(50);

                entity.Property(e => e.KeyMan)
                    .HasMaxLength(50)
                    .HasComment("輸入人員");

                entity.Property(e => e.Latitude).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.LocationGps).HasMaxLength(50);

                entity.Property(e => e.LocationIp).HasMaxLength(50);

                entity.Property(e => e.Longitude).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Nobr)
                    .HasMaxLength(50)
                    .HasComment("工號");

                entity.Property(e => e.Note).HasComment("備註");

                entity.Property(e => e.PunchType).HasMaxLength(50);

                entity.Property(e => e.ReasonCode).HasMaxLength(50);

                entity.Property(e => e.Serno).HasMaxLength(50);

                entity.Property(e => e.TimeB)
                    .HasMaxLength(50)
                    .HasComment("打卡時分 00:00");
            });

            modelBuilder.Entity<PunchCardType>(entity =>
            {
                entity.HasKey(e => e.AutoKey)
                    .HasName("PK_PunchCardType]");

                entity.Property(e => e.KeyDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<QaAbsence>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qaAbsence");

                entity.Property(e => e.AbsBtime)
                    .IsRequired()
                    .HasColumnName("ABS_BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.AbsDate)
                    .HasColumnName("ABS_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AbsEtime)
                    .IsRequired()
                    .HasColumnName("ABS_ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.AbsHrs)
                    .HasColumnName("ABS_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HEname)
                    .IsRequired()
                    .HasColumnName("H_ENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Htype)
                    .HasColumnName("HTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Htypename)
                    .IsRequired()
                    .HasColumnName("HTYPENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QaAttendanceInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qaAttendanceInfo");

                entity.Property(e => e.Abs).HasColumnName("ABS");

                entity.Property(e => e.AbsC01)
                    .HasColumnName("ABS_C01")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC03)
                    .HasColumnName("ABS_C03")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC05)
                    .HasColumnName("ABS_C05")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC06)
                    .HasColumnName("ABS_C06")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC07)
                    .HasColumnName("ABS_C07")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC08)
                    .HasColumnName("ABS_C08")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC09)
                    .HasColumnName("ABS_C09")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC10)
                    .HasColumnName("ABS_C10")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC11)
                    .HasColumnName("ABS_C11")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC12)
                    .HasColumnName("ABS_C12")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC13)
                    .HasColumnName("ABS_C13")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC14)
                    .HasColumnName("ABS_C14")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC15)
                    .HasColumnName("ABS_C15")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC16)
                    .HasColumnName("ABS_C16")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC17)
                    .HasColumnName("ABS_C17")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC18)
                    .HasColumnName("ABS_C18")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC19)
                    .HasColumnName("ABS_C19")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC20)
                    .HasColumnName("ABS_C20")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC21)
                    .HasColumnName("ABS_C21")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC22)
                    .HasColumnName("ABS_C22")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsC23)
                    .HasColumnName("ABS_C23")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AbsHrs)
                    .HasColumnName("ABS_HRS")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasColumnName("ADDR1")
                    .HasMaxLength(60);

                entity.Property(e => e.ApDate)
                    .HasColumnName("AP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AttHrs)
                    .HasColumnName("ATT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attdate)
                    .HasColumnName("ATTDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Birdt)
                    .HasColumnName("BIRDT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.BornAddr)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Calabs).HasColumnName("CALABS");

                entity.Property(e => e.Calsaltype)
                    .HasColumnName("CALSALTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.CalsaltypeName)
                    .IsRequired()
                    .HasColumnName("CALSALTYPE_NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Card)
                    .IsRequired()
                    .HasColumnName("CARD")
                    .HasMaxLength(50);

                entity.Property(e => e.Cindt)
                    .HasColumnName("CINDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Compname)
                    .IsRequired()
                    .HasColumnName("COMPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm)
                    .IsRequired()
                    .HasColumnName("CONT_GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm2)
                    .IsRequired()
                    .HasColumnName("CONT_GSM2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan)
                    .IsRequired()
                    .HasColumnName("CONT_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan2)
                    .IsRequired()
                    .HasColumnName("CONT_MAN2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel)
                    .IsRequired()
                    .HasColumnName("CONT_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel2)
                    .IsRequired()
                    .HasColumnName("CONT_TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryName)
                    .HasColumnName("COUNTRY_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasColumnName("DEPT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptaName)
                    .IsRequired()
                    .HasColumnName("DEPTA_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptm)
                    .IsRequired()
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptsName)
                    .IsRequired()
                    .HasColumnName("DEPTS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.EMins)
                    .HasColumnName("E_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasColumnName("EMP_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Forget)
                    .HasColumnName("FORGET")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.Housetype)
                    .HasColumnName("HOUSETYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.HousetypeName)
                    .HasColumnName("HOUSETYPE_NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.IdnoEdate)
                    .HasColumnName("IDNO_EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.LateMins)
                    .HasColumnName("LATE_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Marry)
                    .IsRequired()
                    .HasColumnName("MARRY")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(180);

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nation)
                    .HasColumnName("NATION")
                    .HasMaxLength(50);

                entity.Property(e => e.NationName)
                    .HasColumnName("NATION_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Noot).HasColumnName("NOOT");

                entity.Property(e => e.Noter).HasColumnName("NOTER");

                entity.Property(e => e.Nowage).HasColumnName("NOWAGE");

                entity.Property(e => e.Officialdate)
                    .HasColumnName("OFFICIALDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ot1)
                    .HasColumnName("OT1")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Ot2)
                    .HasColumnName("OT2")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Ot3)
                    .HasColumnName("OT3")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.OtHours)
                    .HasColumnName("OT_HOURS")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Oudt)
                    .HasColumnName("OUDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Outcd)
                    .IsRequired()
                    .HasColumnName("OUTCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Outname)
                    .HasColumnName("OUTNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode1)
                    .IsRequired()
                    .HasColumnName("POSTCODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotename)
                    .IsRequired()
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotet)
                    .IsRequired()
                    .HasColumnName("ROTET")
                    .HasMaxLength(50);

                entity.Property(e => e.Saltyname)
                    .IsRequired()
                    .HasColumnName("SALTYNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Schl)
                    .IsRequired()
                    .HasColumnName("SCHL")
                    .HasMaxLength(100);

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("SEX")
                    .HasMaxLength(50);

                entity.Property(e => e.Stdt)
                    .HasColumnName("STDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Stindt)
                    .HasColumnName("STINDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Stoudt)
                    .HasColumnName("STOUDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Subtel)
                    .IsRequired()
                    .HasColumnName("SUBTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscd)
                    .IsRequired()
                    .HasColumnName("TTSCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscdname)
                    .HasColumnName("TTSCDNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscode)
                    .IsRequired()
                    .HasColumnName("TTSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttsname)
                    .IsRequired()
                    .HasColumnName("TTSNAME")
                    .HasMaxLength(200);

                entity.Property(e => e.WkHrs)
                    .HasColumnName("WK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkYrs)
                    .HasColumnName("WK_YRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WorkAddr)
                    .IsRequired()
                    .HasColumnName("WORK_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkYrs)
                    .HasColumnName("WORK_YRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Workcd)
                    .IsRequired()
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QaContractInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qaContractInfo");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasColumnName("ADDR1")
                    .HasMaxLength(60);

                entity.Property(e => e.ApDate)
                    .HasColumnName("AP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Birdt)
                    .HasColumnName("BIRDT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.BornAddr)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Cadate)
                    .HasColumnName("CADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Calabs).HasColumnName("CALABS");

                entity.Property(e => e.Calsaltype)
                    .HasColumnName("CALSALTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.CalsaltypeName)
                    .IsRequired()
                    .HasColumnName("CALSALTYPE_NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Card)
                    .IsRequired()
                    .HasColumnName("CARD")
                    .HasMaxLength(50);

                entity.Property(e => e.Cddate)
                    .HasColumnName("CDDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cindt)
                    .HasColumnName("CINDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cmemo)
                    .HasColumnName("CMEMO")
                    .HasMaxLength(500);

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Compname)
                    .IsRequired()
                    .HasColumnName("COMPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm)
                    .IsRequired()
                    .HasColumnName("CONT_GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm2)
                    .IsRequired()
                    .HasColumnName("CONT_GSM2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan)
                    .IsRequired()
                    .HasColumnName("CONT_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan2)
                    .IsRequired()
                    .HasColumnName("CONT_MAN2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel)
                    .IsRequired()
                    .HasColumnName("CONT_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel2)
                    .IsRequired()
                    .HasColumnName("CONT_TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContractType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractTypeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryName)
                    .HasColumnName("COUNTRY_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasColumnName("DEPT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptaName)
                    .IsRequired()
                    .HasColumnName("DEPTA_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptm)
                    .IsRequired()
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptsName)
                    .IsRequired()
                    .HasColumnName("DEPTS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasColumnName("EMP_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.Housetype)
                    .HasColumnName("HOUSETYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.HousetypeName)
                    .HasColumnName("HOUSETYPE_NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.IdnoEdate)
                    .HasColumnName("IDNO_EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Marry)
                    .IsRequired()
                    .HasColumnName("MARRY")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(180);

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nation)
                    .HasColumnName("NATION")
                    .HasMaxLength(50);

                entity.Property(e => e.NationName)
                    .HasColumnName("NATION_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Noot).HasColumnName("NOOT");

                entity.Property(e => e.Noter).HasColumnName("NOTER");

                entity.Property(e => e.Nowage).HasColumnName("NOWAGE");

                entity.Property(e => e.Officialdate)
                    .HasColumnName("OFFICIALDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Oudt)
                    .HasColumnName("OUDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Outcd)
                    .IsRequired()
                    .HasColumnName("OUTCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Outname)
                    .HasColumnName("OUTNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode1)
                    .IsRequired()
                    .HasColumnName("POSTCODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotet)
                    .IsRequired()
                    .HasColumnName("ROTET")
                    .HasMaxLength(50);

                entity.Property(e => e.Saltyname)
                    .IsRequired()
                    .HasColumnName("SALTYNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Schl)
                    .IsRequired()
                    .HasColumnName("SCHL")
                    .HasMaxLength(100);

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("SEX")
                    .HasMaxLength(50);

                entity.Property(e => e.Stdt)
                    .HasColumnName("STDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Stindt)
                    .HasColumnName("STINDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Stoudt)
                    .HasColumnName("STOUDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Subtel)
                    .IsRequired()
                    .HasColumnName("SUBTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscd)
                    .IsRequired()
                    .HasColumnName("TTSCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscdname)
                    .HasColumnName("TTSCDNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscode)
                    .IsRequired()
                    .HasColumnName("TTSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttsname)
                    .IsRequired()
                    .HasColumnName("TTSNAME")
                    .HasMaxLength(200);

                entity.Property(e => e.WkYrs)
                    .HasColumnName("WK_YRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WorkAddr)
                    .IsRequired()
                    .HasColumnName("WORK_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkYrs)
                    .HasColumnName("WORK_YRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Workcd)
                    .IsRequired()
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QaEmployeeInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qaEmployeeInfo");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasColumnName("ADDR1")
                    .HasMaxLength(60);

                entity.Property(e => e.ApDate)
                    .HasColumnName("AP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Birdt)
                    .HasColumnName("BIRDT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.BornAddr)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Calabs).HasColumnName("CALABS");

                entity.Property(e => e.Calsaltype)
                    .HasColumnName("CALSALTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.CalsaltypeName)
                    .IsRequired()
                    .HasColumnName("CALSALTYPE_NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Card)
                    .IsRequired()
                    .HasColumnName("CARD")
                    .HasMaxLength(50);

                entity.Property(e => e.Cindt)
                    .HasColumnName("CINDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Compname)
                    .IsRequired()
                    .HasColumnName("COMPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm)
                    .IsRequired()
                    .HasColumnName("CONT_GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm2)
                    .IsRequired()
                    .HasColumnName("CONT_GSM2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan)
                    .IsRequired()
                    .HasColumnName("CONT_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan2)
                    .IsRequired()
                    .HasColumnName("CONT_MAN2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel)
                    .IsRequired()
                    .HasColumnName("CONT_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel2)
                    .IsRequired()
                    .HasColumnName("CONT_TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryName)
                    .HasColumnName("COUNTRY_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasColumnName("DEPT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptaName)
                    .IsRequired()
                    .HasColumnName("DEPTA_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptm)
                    .IsRequired()
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptsName)
                    .IsRequired()
                    .HasColumnName("DEPTS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasColumnName("EMP_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.Housetype)
                    .HasColumnName("HOUSETYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.HousetypeName)
                    .HasColumnName("HOUSETYPE_NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.IdnoEdate)
                    .HasColumnName("IDNO_EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Marry)
                    .IsRequired()
                    .HasColumnName("MARRY")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(180);

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nation)
                    .HasColumnName("NATION")
                    .HasMaxLength(50);

                entity.Property(e => e.NationName)
                    .HasColumnName("NATION_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Noot).HasColumnName("NOOT");

                entity.Property(e => e.Noter).HasColumnName("NOTER");

                entity.Property(e => e.Nowage).HasColumnName("NOWAGE");

                entity.Property(e => e.Officialdate)
                    .HasColumnName("OFFICIALDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Oudt)
                    .HasColumnName("OUDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Outcd)
                    .IsRequired()
                    .HasColumnName("OUTCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Outname)
                    .HasColumnName("OUTNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode1)
                    .IsRequired()
                    .HasColumnName("POSTCODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotet)
                    .IsRequired()
                    .HasColumnName("ROTET")
                    .HasMaxLength(50);

                entity.Property(e => e.Saltyname)
                    .IsRequired()
                    .HasColumnName("SALTYNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Schl)
                    .IsRequired()
                    .HasColumnName("SCHL")
                    .HasMaxLength(100);

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("SEX")
                    .HasMaxLength(50);

                entity.Property(e => e.Stdt)
                    .HasColumnName("STDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Stindt)
                    .HasColumnName("STINDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Stoudt)
                    .HasColumnName("STOUDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Subtel)
                    .IsRequired()
                    .HasColumnName("SUBTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscd)
                    .IsRequired()
                    .HasColumnName("TTSCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscdname)
                    .HasColumnName("TTSCDNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscode)
                    .IsRequired()
                    .HasColumnName("TTSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttsname)
                    .IsRequired()
                    .HasColumnName("TTSNAME")
                    .HasMaxLength(200);

                entity.Property(e => e.WkYrs)
                    .HasColumnName("WK_YRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WorkAddr)
                    .IsRequired()
                    .HasColumnName("WORK_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkYrs)
                    .HasColumnName("WORK_YRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Workcd)
                    .IsRequired()
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QaOverTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qaOverTime");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OtBdate)
                    .HasColumnName("OT_BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.OtBtime)
                    .IsRequired()
                    .HasColumnName("OT_BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.OtEtime)
                    .IsRequired()
                    .HasColumnName("OT_ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtTotalhrs)
                    .HasColumnName("OT_TOTALHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtType)
                    .HasColumnName("OT_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<QaPublished>(entity =>
            {
                entity.ToTable("QA_Published");

                entity.Property(e => e.FillFormDatetimeB).HasColumnType("datetime");

                entity.Property(e => e.FillFormDatetimeE).HasColumnType("datetime");

                entity.Property(e => e.PublishDatetime).HasColumnType("datetime");

                entity.Property(e => e.QtplCode)
                    .IsRequired()
                    .HasColumnName("QTplCode")
                    .HasMaxLength(50);

                entity.Property(e => e.WritedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<Qadetail>(entity =>
            {
                entity.ToTable("QADetail");

                entity.Property(e => e.McqStringValue).HasMaxLength(50);

                entity.Property(e => e.QamasterId).HasColumnName("QAMasterId");

                entity.Property(e => e.QqitemId).HasColumnName("QQItemId");

                entity.Property(e => e.SaqValue).HasMaxLength(2000);
            });

            modelBuilder.Entity<Qamaster>(entity =>
            {
                entity.ToTable("QAMaster");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.FillFormDatetimeB).HasColumnType("datetime");

                entity.Property(e => e.FillFormDatetimeE).HasColumnType("datetime");

                entity.Property(e => e.FillInBy).HasMaxLength(50);

                entity.Property(e => e.FillerCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr).HasMaxLength(50);

                entity.Property(e => e.QaPublishedId).HasColumnName("QA_PublishedID");

                entity.Property(e => e.SysRole).HasColumnName("sysRole");

                entity.Property(e => e.WriteDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Qcategory>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("QCategory");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Qdetail>(entity =>
            {
                entity.ToTable("QDetail");

                entity.Property(e => e.QqitemId).HasColumnName("QQItemId");

                entity.Property(e => e.QtplCategoryId).HasColumnName("QTplCategoryId");
            });

            modelBuilder.Entity<Qqitem>(entity =>
            {
                entity.ToTable("QQItem");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.IsRequired)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.McqDisplayHorizontal)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.QuestionText).IsRequired();

                entity.Property(e => e.TypeCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Qqmcq>(entity =>
            {
                entity.ToTable("QQMcq");

                entity.Property(e => e.IsValueInt)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QqmcqDetail>(entity =>
            {
                entity.ToTable("QQMcqDetail");

                entity.Property(e => e.QqmcqId).HasColumnName("QQMcqId");

                entity.Property(e => e.StringValue).HasMaxLength(50);

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QqmcqDetailTpl>(entity =>
            {
                entity.ToTable("QQMcqDetailTpl");

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StringValue).HasMaxLength(50);

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Qqtype>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("QQType");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Qtpl>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("QTpl");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.FillerCategory)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QtplCategory>(entity =>
            {
                entity.ToTable("QTplCategory");

                entity.Property(e => e.QcategoryCode)
                    .IsRequired()
                    .HasColumnName("QCategoryCode")
                    .HasMaxLength(50);

                entity.Property(e => e.QtplCode)
                    .IsRequired()
                    .HasColumnName("QTplCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RangeSet>(entity =>
            {
                entity.ToTable("RANGE_SET");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .HasColumnName("MEMO")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Note5)
                    .HasColumnName("NOTE5")
                    .HasMaxLength(50);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.RangeBegin)
                    .IsRequired()
                    .HasColumnName("RANGE_BEGIN")
                    .HasMaxLength(50);

                entity.Property(e => e.RangeEnd)
                    .IsRequired()
                    .HasColumnName("RANGE_END")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rba>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("RBA");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.OtMax)
                    .HasColumnName("OT_MAX")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Relaytable>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("RELAYTABLE");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Childbsource)
                    .IsRequired()
                    .HasColumnName("CHILDBSOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Childkey)
                    .IsRequired()
                    .HasColumnName("CHILDKEY")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("CREATEDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createman)
                    .IsRequired()
                    .HasColumnName("CREATEMAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Parentkey)
                    .IsRequired()
                    .HasColumnName("PARENTKEY")
                    .HasMaxLength(50);

                entity.Property(e => e.Parentsource)
                    .IsRequired()
                    .HasColumnName("PARENTSOURCE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Relcode>(entity =>
            {
                entity.HasKey(e => e.RelCode1);

                entity.ToTable("RELCODE");

                entity.HasIndex(e => e.RelCode1)
                    .HasName("IX_RELCODE");

                entity.Property(e => e.RelCode1)
                    .HasColumnName("REL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Grprelcd)
                    .IsRequired()
                    .HasColumnName("GRPRELCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.RelName)
                    .IsRequired()
                    .HasColumnName("REL_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Relishcd>(entity =>
            {
                entity.HasKey(e => e.RelishCode);

                entity.ToTable("RELISHCD");

                entity.Property(e => e.RelishCode)
                    .HasColumnName("RELISH_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Relish)
                    .IsRequired()
                    .HasColumnName("RELISH")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Repair>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime });

                entity.ToTable("REPAIR");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Improve)
                    .IsRequired()
                    .HasColumnName("IMPROVE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Place)
                    .IsRequired()
                    .HasColumnName("PLACE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotAmt)
                    .HasColumnName("TOT_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TrAmt)
                    .HasColumnName("TR_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ViAmt)
                    .HasColumnName("VI_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Works)
                    .IsRequired()
                    .HasColumnName("WORKS")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ReportEmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReportEMP");

                entity.Property(e => e.Ad帳號)
                    .HasColumnName("AD帳號")
                    .HasMaxLength(50);

                entity.Property(e => e.介紹人)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.保證人1住址)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.保證人1姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.保證人1身分證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.保證人1電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.保證人2住址)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.保證人2姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.保證人2身分證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.保證人2電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.停復日期).HasColumnType("datetime");

                entity.Property(e => e.停薪日期).HasColumnType("datetime");

                entity.Property(e => e.停離日期).HasColumnType("datetime");

                entity.Property(e => e.公司別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.公司到職日).HasColumnType("datetime");

                entity.Property(e => e.兵役)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.出生地)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.出生日期).HasColumnType("smalldatetime");

                entity.Property(e => e.分機)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.刷卡)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.加班比率代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.加班比率名稱).HasMaxLength(50);

                entity.Property(e => e.勞退新制提撥日).HasColumnType("datetime");

                entity.Property(e => e.勞退新制日期).HasColumnType("datetime");

                entity.Property(e => e.員別代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員別名稱).HasMaxLength(50);

                entity.Property(e => e.員工勞退提撥比率).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.國籍)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.外勞帳號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.外部年資).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.婚姻)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.密碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留証到期日).HasColumnType("datetime");

                entity.Property(e => e.居留証起始日).HasColumnType("datetime");

                entity.Property(e => e.居留證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.工作地代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.工作地名稱).HasMaxLength(50);

                entity.Property(e => e.性別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門代碼).HasMaxLength(50);

                entity.Property(e => e.成本部門名稱).HasMaxLength(50);

                entity.Property(e => e.戶籍地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.戶籍郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.戶籍電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.所得稅預扣金額).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.扶養人數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.異動備註)
                    .IsRequired()
                    .HasMaxLength(180);

                entity.Property(e => e.異動原因名稱).HasMaxLength(50);

                entity.Property(e => e.異動失效日).HasColumnType("datetime");

                entity.Property(e => e.異動狀態)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.直間接)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.簽核部門代碼).HasMaxLength(50);

                entity.Property(e => e.簽核部門名稱).HasMaxLength(50);

                entity.Property(e => e.編制部門代碼).HasMaxLength(50);

                entity.Property(e => e.編制部門名稱).HasMaxLength(50);

                entity.Property(e => e.職稱代碼).HasMaxLength(50);

                entity.Property(e => e.職稱名稱).HasMaxLength(50);

                entity.Property(e => e.職等代碼).HasMaxLength(50);

                entity.Property(e => e.職等名稱).HasMaxLength(50);

                entity.Property(e => e.英文姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.薪別代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.薪別名稱).HasMaxLength(50);

                entity.Property(e => e.血型)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.行事曆代碼).HasMaxLength(50);

                entity.Property(e => e.行事曆名稱).HasMaxLength(50);

                entity.Property(e => e.行動電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.試用期滿日).HasColumnType("datetime");

                entity.Property(e => e.護照姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.護照號碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.資料群組代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.資料群組名稱).HasMaxLength(50);

                entity.Property(e => e.身分別).HasMaxLength(50);

                entity.Property(e => e.身分證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.輪班別代碼).HasMaxLength(50);

                entity.Property(e => e.輪班別名稱).HasMaxLength(50);

                entity.Property(e => e.轉帳帳號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳銀行)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.退休金制度)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.通訊地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.通訊郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.通訊電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.連絡人1姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.連絡人1行動電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.連絡人1關係)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.連絡人1電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.連絡人2姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.連絡人2行動電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.連絡人2關係)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.連絡人2電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.集團到職日).HasColumnType("datetime");

                entity.Property(e => e.離職原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職原因名稱).HasMaxLength(50);

                entity.Property(e => e.離職日).HasColumnType("datetime");

                entity.Property(e => e.電子郵件)
                    .IsRequired()
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<ReportItem>(entity =>
            {
                entity.HasKey(e => e.Riid)
                    .HasName("PK__ReportIt__464E992E6AD0B01E");

                entity.Property(e => e.Riid).HasColumnName("RIID");

                entity.Property(e => e.Formula)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.Notes).HasColumnType("image");

                entity.Property(e => e.Riindex).HasColumnName("RIIndex");

                entity.Property(e => e.Riname)
                    .HasColumnName("RIName")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.UnitName)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Retchoo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RETCHOO");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Rote>(entity =>
            {
                entity.HasKey(e => e.Rote1);

                entity.ToTable("ROTE");

                entity.HasIndex(e => e.OffTime)
                    .HasName("OFF_TIME");

                entity.HasIndex(e => e.OnTime)
                    .HasName("ON_TIME");

                entity.HasIndex(e => e.ResBTime)
                    .HasName("RES_B_TIME");

                entity.HasIndex(e => e.ResETime)
                    .HasName("RES_E_TIME");

                entity.HasIndex(e => e.Rote1)
                    .HasName("IX_ROTE");

                entity.Property(e => e.Rote1)
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.AftNightamt)
                    .HasColumnName("AFT_NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Alllates)
                    .HasColumnName("ALLLATES")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Alllates1)
                    .HasColumnName("ALLLATES1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AttEnd)
                    .IsRequired()
                    .HasColumnName("ATT_END")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bcolor)
                    .HasColumnName("BCOLOR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.BefNightamt)
                    .HasColumnName("BEF_NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Calot)
                    .IsRequired()
                    .HasColumnName("CALOT")
                    .HasMaxLength(50);

                entity.Property(e => e.Dd)
                    .IsRequired()
                    .HasColumnName("DD")
                    .HasMaxLength(50);

                entity.Property(e => e.DkHrs)
                    .HasColumnName("DK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Earaward).HasColumnName("EARAWARD");

                entity.Property(e => e.Fcolor)
                    .HasColumnName("FCOLOR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt1)
                    .HasColumnName("FOODAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamto)
                    .HasColumnName("FOODAMTO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodrule)
                    .HasColumnName("FOODRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Foodsalcd)
                    .IsRequired()
                    .HasColumnName("FOODSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Helf).HasColumnName("HELF");

                entity.Property(e => e.HoliMins)
                    .HasColumnName("HOLI_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HolidayAddmin).HasColumnName("HOLIDAY_ADDMIN");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.MoHrs)
                    .HasColumnName("MO_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Night).HasColumnName("NIGHT");

                entity.Property(e => e.Nightamt)
                    .HasColumnName("NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightamt1)
                    .HasColumnName("NIGHTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightrule)
                    .HasColumnName("NIGHTRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nightsalcd)
                    .IsRequired()
                    .HasColumnName("NIGHTSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Notfood).HasColumnName("NOTFOOD");

                entity.Property(e => e.OffTime)
                    .IsRequired()
                    .HasColumnName("OFF_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Offtime2)
                    .IsRequired()
                    .HasColumnName("OFFTIME2")
                    .HasMaxLength(50);

                entity.Property(e => e.OnTime)
                    .IsRequired()
                    .HasColumnName("ON_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ot).HasColumnName("OT");

                entity.Property(e => e.OtBegin)
                    .IsRequired()
                    .HasColumnName("OT_BEGIN")
                    .HasMaxLength(50);

                entity.Property(e => e.OverTime)
                    .IsRequired()
                    .HasColumnName("OVER_TIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Overday).HasColumnName("OVERDAY");

                entity.Property(e => e.Rate2).HasColumnName("RATE2");

                entity.Property(e => e.ResB1Time)
                    .IsRequired()
                    .HasColumnName("RES_B1_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB2Time)
                    .IsRequired()
                    .HasColumnName("RES_B2_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB3Time)
                    .IsRequired()
                    .HasColumnName("RES_B3_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB4Time)
                    .IsRequired()
                    .HasColumnName("RES_B4_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResBTime)
                    .IsRequired()
                    .HasColumnName("RES_B_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE1Time)
                    .IsRequired()
                    .HasColumnName("RES_E1_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE2Time)
                    .IsRequired()
                    .HasColumnName("RES_E2_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE3Time)
                    .IsRequired()
                    .HasColumnName("RES_E3_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE4Time)
                    .IsRequired()
                    .HasColumnName("RES_E4_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResETime)
                    .IsRequired()
                    .HasColumnName("RES_E_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.RoteDisp)
                    .HasColumnName("ROTE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotename)
                    .IsRequired()
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort)
                    .HasColumnName("SORT")
                    .HasDefaultValueSql("((9))");

                entity.Property(e => e.Specamt)
                    .HasColumnName("SPECAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specamt1)
                    .HasColumnName("SPECAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specamt2)
                    .HasColumnName("SPECAMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specrule)
                    .HasColumnName("SPECRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Specsalcd)
                    .IsRequired()
                    .HasColumnName("SPECSALCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StrTime)
                    .IsRequired()
                    .HasColumnName("STR_TIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WkHrs)
                    .HasColumnName("WK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrsa)
                    .HasColumnName("WK_HRSA")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrsb)
                    .HasColumnName("WK_HRSB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WrHrsa)
                    .HasColumnName("WR_HRSA")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WrHrsb)
                    .HasColumnName("WR_HRSB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.YrrestHrs)
                    .HasColumnName("YRREST_HRS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<RoteBonus>(entity =>
            {
                entity.HasKey(e => e.Auto)
                    .HasName("PK_ROTE_BONUS_1");

                entity.ToTable("ROTE_BONUS");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Check1).HasColumnName("CHECK1");

                entity.Property(e => e.Check2).HasColumnName("CHECK2");

                entity.Property(e => e.Check3).HasColumnName("CHECK3");

                entity.Property(e => e.Check4).HasColumnName("CHECK4");

                entity.Property(e => e.Check5).HasColumnName("CHECK5");

                entity.Property(e => e.Check6).HasColumnName("CHECK6");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Salfunction)
                    .HasColumnName("SALFUNCTION")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.StrB)
                    .IsRequired()
                    .HasColumnName("STR_B")
                    .HasMaxLength(50);

                entity.Property(e => e.StrE)
                    .IsRequired()
                    .HasColumnName("STR_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Value1)
                    .HasColumnName("VALUE1")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Value2)
                    .HasColumnName("VALUE2")
                    .HasColumnType("decimal(14, 4)");

                entity.HasOne(d => d.RoteNavigation)
                    .WithMany(p => p.RoteBonus)
                    .HasForeignKey(d => d.Rote)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ROTE_BONUS_ROTE");

                entity.HasOne(d => d.SalCodeNavigation)
                    .WithMany(p => p.RoteBonus)
                    .HasForeignKey(d => d.SalCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ROTE_BONUS_SALCODE");
            });

            modelBuilder.Entity<Rotechg>(entity =>
            {
                entity.HasKey(e => new { e.Adate, e.Nobr });

                entity.ToTable("ROTECHG");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.Code)
                    .HasName("CODE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.Rote)
                    .HasName("ROTE");

                entity.HasIndex(e => new { e.Adate, e.Nobr, e.Rote })
                    .HasName("IX_ROTECHG");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Autokey)
                    .HasColumnName("AUTOKEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Attend)
                    .WithMany(p => p.Rotechg)
                    .HasForeignKey(d => new { d.Nobr, d.Adate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ROTECHG_ATTEND");
            });

            modelBuilder.Entity<Rotet>(entity =>
            {
                entity.HasKey(e => e.Rotet1);

                entity.ToTable("ROTET");

                entity.HasIndex(e => e.Rotet1)
                    .HasName("IX_ROTET");

                entity.Property(e => e.Rotet1)
                    .HasColumnName("ROTET")
                    .HasMaxLength(50);

                entity.Property(e => e.Fattamt)
                    .HasColumnName("FATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt1)
                    .HasColumnName("FOODAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodsalcode)
                    .HasColumnName("FOODSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Freq)
                    .IsRequired()
                    .HasColumnName("FREQ")
                    .HasMaxLength(50);

                entity.Property(e => e.FreqDate)
                    .HasColumnName("FREQ_DATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FreqStart)
                    .IsRequired()
                    .HasColumnName("FREQ_START")
                    .HasMaxLength(50);

                entity.Property(e => e.Inholi)
                    .IsRequired()
                    .HasColumnName("INHOLI")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nightamt)
                    .HasColumnName("NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightsalcode)
                    .HasColumnName("NIGHTSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.R1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R10)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.R10t).HasColumnName("R10T");

                entity.Property(e => e.R1t).HasColumnName("R1T");

                entity.Property(e => e.R2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R2t).HasColumnName("R2T");

                entity.Property(e => e.R3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R3t).HasColumnName("R3T");

                entity.Property(e => e.R4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R4t).HasColumnName("R4T");

                entity.Property(e => e.R5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R5t).HasColumnName("R5T");

                entity.Property(e => e.R6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R6t).HasColumnName("R6T");

                entity.Property(e => e.R7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R7t).HasColumnName("R7T");

                entity.Property(e => e.R8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R8t).HasColumnName("R8T");

                entity.Property(e => e.R9)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.R9t).HasColumnName("R9T");

                entity.Property(e => e.RotetDisp)
                    .HasColumnName("ROTET_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotetname)
                    .IsRequired()
                    .HasColumnName("ROTETNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.SalHrs)
                    .HasColumnName("SAL_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.YrrestHrs)
                    .HasColumnName("YRREST_HRS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<RptEnrich>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Rpt_Enrich");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Autokey)
                    .HasColumnName("AUTOKEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(120);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salabs>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Nobr, e.Adate, e.Btime, e.HCode, e.SalCode, e.Mlssalcode });

                entity.ToTable("SALABS");

                entity.HasIndex(e => e.Amt)
                    .HasName("AMT");

                entity.HasIndex(e => e.SalCode)
                    .HasName("SAL_CODE");

                entity.HasIndex(e => e.Salseq)
                    .HasName("SALSEQ");

                entity.HasIndex(e => new { e.Salseq, e.SalCode })
                    .HasName("IX_SALABS");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Mlssalcode)
                    .HasColumnName("MLSSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AdjCode)
                    .IsRequired()
                    .HasColumnName("ADJ_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Salseq)
                    .IsRequired()
                    .HasColumnName("SALSEQ")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Abs)
                    .WithMany(p => p.Salabs)
                    .HasForeignKey(d => new { d.Nobr, d.Adate, d.Btime, d.HCode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALABS_ABS");
            });

            modelBuilder.Entity<Saladr>(entity =>
            {
                entity.HasKey(e => e.Saladr1);

                entity.ToTable("SALADR");

                entity.Property(e => e.Saladr1)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Salname)
                    .IsRequired()
                    .HasColumnName("SALNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SalaryPassWord>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DLoginDate)
                    .HasColumnName("dLoginDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SIp)
                    .HasColumnName("sIP")
                    .HasMaxLength(50);

                entity.Property(e => e.SLoginIp)
                    .HasColumnName("sLoginIP")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .IsRequired()
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SPassWord)
                    .IsRequired()
                    .HasColumnName("sPassWord")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Salatt>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("SALATT");

                entity.HasIndex(e => new { e.Nobr, e.Adate, e.SalCode })
                    .HasName("IX_SALATT")
                    .IsUnique();

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.CalcType)
                    .HasColumnName("CALC_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasColumnName("SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salattr>(entity =>
            {
                entity.HasKey(e => e.Salattr1);

                entity.ToTable("SALATTR");

                entity.HasIndex(e => e.Basic)
                    .HasName("BASIC");

                entity.HasIndex(e => e.Flag)
                    .HasName("FLAG");

                entity.HasIndex(e => e.Salattr1)
                    .HasName("IX_SALATTR");

                entity.HasIndex(e => e.Tax)
                    .HasName("TAX");

                entity.HasIndex(e => e.Type)
                    .HasName("TYPE");

                entity.Property(e => e.Salattr1)
                    .HasColumnName("SALATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.AttrName)
                    .IsRequired()
                    .HasColumnName("ATTR_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Basic).HasColumnName("BASIC");

                entity.Property(e => e.Flag)
                    .IsRequired()
                    .HasColumnName("FLAG")
                    .HasMaxLength(50);

                entity.Property(e => e.NotDisp).HasColumnName("NOT_DISP");

                entity.Property(e => e.Tax).HasColumnName("TAX");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salbasd>(entity =>
            {
                entity.HasKey(e => new { e.Adate, e.Nobr, e.SalCode });

                entity.ToTable("SALBASD");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.SalCode)
                    .HasName("SAL_CODE");

                entity.HasIndex(e => new { e.Adate, e.Nobr, e.SalCode })
                    .HasName("IX_SALBASD");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amtb)
                    .HasColumnName("AMTB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Salbasd1>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Nobr, e.SalCode, e.Seq });

                entity.ToTable("SALBASD1");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amtb)
                    .HasColumnName("AMTB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Salbase>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("SALBASE");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Calctype)
                    .IsRequired()
                    .HasColumnName("CALCTYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reffunction)
                    .IsRequired()
                    .HasColumnName("REFFUNCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Salname)
                    .IsRequired()
                    .HasColumnName("SALNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salbasnd>(entity =>
            {
                entity.HasKey(e => e.Acno)
                    .HasName("PK_SALBASND_1");

                entity.ToTable("SALBASND");

                entity.Property(e => e.Acno)
                    .HasColumnName("ACNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("([DBO].[GETNEWACNO]())");

                entity.Property(e => e.ADate)
                    .HasColumnName("A_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.APer)
                    .HasColumnName("A_PER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AType).HasColumnName("A_TYPE");

                entity.Property(e => e.CDate)
                    .HasColumnName("C_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeAdd)
                    .IsRequired()
                    .HasColumnName("DE_ADD")
                    .HasMaxLength(60);

                entity.Property(e => e.DeDept)
                    .IsRequired()
                    .HasColumnName("DE_DEPT")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeMan)
                    .IsRequired()
                    .HasColumnName("DE_MAN")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeTel)
                    .IsRequired()
                    .HasColumnName("DE_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Dispatch)
                    .IsRequired()
                    .HasColumnName("DISPATCH")
                    .HasMaxLength(50);

                entity.Property(e => e.FAmt)
                    .HasColumnName("F_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FDate)
                    .HasColumnName("F_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LawDept)
                    .IsRequired()
                    .HasColumnName("LAW_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.LawMan)
                    .IsRequired()
                    .HasColumnName("LAW_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LawTel)
                    .IsRequired()
                    .HasColumnName("LAW_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.PAmt)
                    .HasColumnName("P_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.PDate)
                    .HasColumnName("P_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.PPer)
                    .HasColumnName("P_PER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TAmt)
                    .HasColumnName("T_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TDate)
                    .HasColumnName("T_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.YymmB)
                    .IsRequired()
                    .HasColumnName("YYMM_B")
                    .HasMaxLength(50);

                entity.Property(e => e.YymmE)
                    .IsRequired()
                    .HasColumnName("YYMM_E")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salbastd>(entity =>
            {
                entity.HasKey(e => new { e.Adate, e.Nobr, e.SalCode });

                entity.ToTable("SALBASTD");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amtb)
                    .HasColumnName("AMTB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Salcode>(entity =>
            {
                entity.HasKey(e => e.SalCode1);

                entity.ToTable("SALCODE");

                entity.HasIndex(e => e.SalAttr)
                    .HasName("SAL_ATTR");

                entity.HasIndex(e => e.SalCode1)
                    .HasName("IX_SALCODE");

                entity.Property(e => e.SalCode1)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Abspay).HasColumnName("ABSPAY");

                entity.Property(e => e.Acccd)
                    .IsRequired()
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Advpay).HasColumnName("ADVPAY");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.CalFreq)
                    .IsRequired()
                    .HasColumnName("CAL_FREQ")
                    .HasMaxLength(50);

                entity.Property(e => e.CalType)
                    .IsRequired()
                    .HasColumnName("CAL_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.CnUnion).HasColumnName("cn_union");

                entity.Property(e => e.Daily).HasColumnName("DAILY");

                entity.Property(e => e.Definedays)
                    .HasColumnName("DEFINEDAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Forbank).HasColumnName("FORBANK");

                entity.Property(e => e.Forcash).HasColumnName("FORCASH");

                entity.Property(e => e.Hrs)
                    .HasColumnName("HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inslab).HasColumnName("INSLAB");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Later).HasColumnName("LATER");

                entity.Property(e => e.MaxAmt)
                    .HasColumnName("MAX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.MinAmt)
                    .HasColumnName("MIN_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Monthtype)
                    .IsRequired()
                    .HasColumnName("MONTHTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Notfreq).HasColumnName("NOTFREQ");

                entity.Property(e => e.Oldretire).HasColumnName("OLDRETIRE");

                entity.Property(e => e.Ot).HasColumnName("OT");

                entity.Property(e => e.Retire).HasColumnName("RETIRE");

                entity.Property(e => e.SalAttr)
                    .IsRequired()
                    .HasColumnName("SAL_ATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCodeDisp)
                    .HasColumnName("SAL_CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.SalEname)
                    .IsRequired()
                    .HasColumnName("SAL_ENAME")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Salbasd1).HasColumnName("SALBASD1");

                entity.Property(e => e.Salbase)
                    .HasColumnName("SALBASE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'‘’')");

                entity.Property(e => e.SalcodeGroup)
                    .HasColumnName("SALCODE_GROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.SosId)
                    .IsRequired()
                    .HasColumnName("SOS_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Sup).HasColumnName("SUP");

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wel).HasColumnName("WEL");

                entity.Property(e => e.Yearpay).HasColumnName("YEARPAY");
            });

            modelBuilder.Entity<SalcodeBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALCODE_BAK");

                entity.Property(e => e.Abspay).HasColumnName("ABSPAY");

                entity.Property(e => e.Acccd)
                    .IsRequired()
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Advpay).HasColumnName("ADVPAY");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.CalFreq)
                    .IsRequired()
                    .HasColumnName("CAL_FREQ")
                    .HasMaxLength(50);

                entity.Property(e => e.CalType)
                    .IsRequired()
                    .HasColumnName("CAL_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.CnUnion).HasColumnName("cn_union");

                entity.Property(e => e.Daily).HasColumnName("DAILY");

                entity.Property(e => e.Definedays)
                    .HasColumnName("DEFINEDAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Forbank).HasColumnName("FORBANK");

                entity.Property(e => e.Forcash).HasColumnName("FORCASH");

                entity.Property(e => e.Hrs)
                    .HasColumnName("HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inslab).HasColumnName("INSLAB");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Later).HasColumnName("LATER");

                entity.Property(e => e.MaxAmt)
                    .HasColumnName("MAX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.MinAmt)
                    .HasColumnName("MIN_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Monthtype)
                    .IsRequired()
                    .HasColumnName("MONTHTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Notfreq).HasColumnName("NOTFREQ");

                entity.Property(e => e.Oldretire).HasColumnName("OLDRETIRE");

                entity.Property(e => e.Ot).HasColumnName("OT");

                entity.Property(e => e.Retire).HasColumnName("RETIRE");

                entity.Property(e => e.SalAttr)
                    .IsRequired()
                    .HasColumnName("SAL_ATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCodeDisp)
                    .HasColumnName("SAL_CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.SalEname)
                    .IsRequired()
                    .HasColumnName("SAL_ENAME")
                    .HasMaxLength(60);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Salbasd1).HasColumnName("SALBASD1");

                entity.Property(e => e.Salbase)
                    .HasColumnName("SALBASE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalcodeGroup)
                    .HasColumnName("SALCODE_GROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.SosId)
                    .IsRequired()
                    .HasColumnName("SOS_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Sup).HasColumnName("SUP");

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wel).HasColumnName("WEL");

                entity.Property(e => e.Yearpay).HasColumnName("YEARPAY");
            });

            modelBuilder.Entity<SalcodeGroup>(entity =>
            {
                entity.HasKey(e => e.SalcodeGroup1);

                entity.ToTable("SALCODE_GROUP");

                entity.Property(e => e.SalcodeGroup1)
                    .HasColumnName("SALCODE_GROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.SalcodeGroupName)
                    .IsRequired()
                    .HasColumnName("SALCODE_GROUP_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Salfunction>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("SALFUNCTION");

                entity.HasIndex(e => e.Calc)
                    .HasName("IX_SALFUNCTION_2");

                entity.HasIndex(e => e.Calctype)
                    .HasName("IX_SALFUNCTION");

                entity.HasIndex(e => e.Item)
                    .HasName("IX_SALFUNCTION_1");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Calc)
                    .IsRequired()
                    .HasColumnName("CALC")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Calctype)
                    .IsRequired()
                    .HasColumnName("CALCTYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasColumnName("ITEM")
                    .HasMaxLength(50);

                entity.Property(e => e.Ref).HasColumnName("REF");

                entity.Property(e => e.Script)
                    .IsRequired()
                    .HasColumnName("SCRIPT");

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Salpw>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("SALPW");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.Nobr).HasMaxLength(10);

                entity.Property(e => e.Pw)
                    .HasColumnName("PW")
                    .HasMaxLength(16);
            });

            modelBuilder.Entity<Saltaxitem>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Code, e.Adate });

                entity.ToTable("SALTAXITEM");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Saltycd>(entity =>
            {
                entity.HasKey(e => e.Saltycd1);

                entity.ToTable("SALTYCD");

                entity.HasIndex(e => e.Saltycd1)
                    .HasName("IX_SALTYCD");

                entity.Property(e => e.Saltycd1)
                    .HasColumnName("SALTYCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Define1)
                    .HasColumnName("DEFINE1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Define2)
                    .HasColumnName("DEFINE2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Define3)
                    .HasColumnName("DEFINE3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Para1)
                    .IsRequired()
                    .HasColumnName("PARA1")
                    .HasMaxLength(50);

                entity.Property(e => e.Para2)
                    .IsRequired()
                    .HasColumnName("PARA2")
                    .HasMaxLength(50);

                entity.Property(e => e.Para3)
                    .IsRequired()
                    .HasColumnName("PARA3")
                    .HasMaxLength(50);

                entity.Property(e => e.Saltyname)
                    .IsRequired()
                    .HasColumnName("SALTYNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SaltycdDays>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALTYCD_DAYS");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<SaltycdDiv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALTYCD_DIV");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<SaltycdHours>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALTYCD_HOURS");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<SchClass>(entity =>
            {
                entity.Property(e => e.SchClassid).HasColumnName("schClassid");

                entity.Property(e => e.AutoBind).HasDefaultValueSql("((1))");

                entity.Property(e => e.CheckIn).HasDefaultValueSql("((1))");

                entity.Property(e => e.CheckInTime1).HasColumnType("datetime");

                entity.Property(e => e.CheckInTime2).HasColumnType("datetime");

                entity.Property(e => e.CheckOut).HasDefaultValueSql("((1))");

                entity.Property(e => e.CheckOutTime1).HasColumnType("datetime");

                entity.Property(e => e.CheckOutTime2).HasColumnType("datetime");

                entity.Property(e => e.Color).HasDefaultValueSql("((16715535))");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.SchName)
                    .IsRequired()
                    .HasColumnName("schName")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SensorId)
                    .HasColumnName("SensorID")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.WorkDay).HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkMins).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Schl>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Educcode, e.Adate });

                entity.ToTable("SCHL");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.Educcode)
                    .HasName("EDUCCODE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("IX_SCHL");

                entity.HasIndex(e => e.Schl1)
                    .HasName("SCHL");

                entity.HasIndex(e => e.Subj)
                    .HasName("SUBJ");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Educcode)
                    .HasColumnName("EDUCCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateB)
                    .HasColumnName("DATE_B")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateE)
                    .HasColumnName("DATE_E")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Ok).HasColumnName("OK");

                entity.Property(e => e.Schl1)
                    .IsRequired()
                    .HasColumnName("SCHL")
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SchlId)
                    .HasColumnName("schl_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Subj)
                    .IsRequired()
                    .HasColumnName("SUBJ")
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Subjcode)
                    .IsRequired()
                    .HasColumnName("SUBJCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.Schl)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SCHL_BASE");
            });

            modelBuilder.Entity<Securitydetails>(entity =>
            {
                entity.HasKey(e => e.Securitydetailid)
                    .HasName("NAMEID2");

                entity.ToTable("SECURITYDETAILS");

                entity.Property(e => e.Securitydetailid).HasColumnName("SECURITYDETAILID");

                entity.Property(e => e.Deptid).HasColumnName("DEPTID");

                entity.Property(e => e.Enrollfingers).HasColumnName("ENROLLFINGERS");

                entity.Property(e => e.Report)
                    .HasColumnName("REPORT")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Reportview).HasColumnName("REPORTVIEW");

                entity.Property(e => e.Schedule).HasColumnName("SCHEDULE");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.Userinfo).HasColumnName("USERINFO");
            });

            modelBuilder.Entity<ServerLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.EnrollNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Event)
                    .IsRequired()
                    .HasColumnName("EVENT")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Eventtime)
                    .HasColumnName("EVENTTIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Operator)
                    .HasColumnName("OPERATOR")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Parameter).HasColumnName("parameter");

                entity.Property(e => e.Sensorid)
                    .HasColumnName("SENSORID")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Userid).HasColumnName("USERID");
            });

            modelBuilder.Entity<Sex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SEX");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Shift>(entity =>
            {
                entity.ToTable("SHIFT");

                entity.Property(e => e.Shiftid).HasColumnName("SHIFTID");

                entity.Property(e => e.Cycle)
                    .HasColumnName("CYCLE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Enddate)
                    .HasColumnName("ENDDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900-12-31')");

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Runnum)
                    .HasColumnName("RUNNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch1)
                    .HasColumnName("SCH1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch10)
                    .HasColumnName("SCH10")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch11)
                    .HasColumnName("SCH11")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch12)
                    .HasColumnName("SCH12")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch2)
                    .HasColumnName("SCH2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch3)
                    .HasColumnName("SCH3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch4)
                    .HasColumnName("SCH4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch5)
                    .HasColumnName("SCH5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch6)
                    .HasColumnName("SCH6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch7)
                    .HasColumnName("SCH7")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch8)
                    .HasColumnName("SCH8")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sch9)
                    .HasColumnName("SCH9")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Startdate)
                    .HasColumnName("STARTDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900-1-1')");

                entity.Property(e => e.Units)
                    .HasColumnName("UNITS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ushiftid)
                    .HasColumnName("USHIFTID")
                    .HasDefaultValueSql("((-1))");
            });

            modelBuilder.Entity<SosId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOS_ID");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Sptyp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPTYP");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Sqlupdatetable>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("SQLUPDATETABLE");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasColumnName("FILENAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasColumnType("text");

                entity.Property(e => e.Timeb)
                    .HasColumnName("TIMEB")
                    .HasColumnType("datetime");

                entity.Property(e => e.Timee)
                    .HasColumnName("TIMEE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Userid)
                    .IsRequired()
                    .HasColumnName("USERID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Subs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUBS");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<SysDataStructure>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("sysDataStructure");

                entity.Property(e => e.IColumnsLength).HasColumnName("iColumnsLength");

                entity.Property(e => e.IColumnsOrder).HasColumnName("iColumnsOrder");

                entity.Property(e => e.IIsNull).HasColumnName("iIsNull");

                entity.Property(e => e.SColumnsName)
                    .HasColumnName("sColumnsName")
                    .HasMaxLength(128);

                entity.Property(e => e.SColumnsType)
                    .IsRequired()
                    .HasColumnName("sColumnsType")
                    .HasMaxLength(129);

                entity.Property(e => e.STableName)
                    .IsRequired()
                    .HasColumnName("sTableName")
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<SysDefault>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.ToTable("sysDefault");

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.SCategory)
                    .IsRequired()
                    .HasColumnName("sCategory")
                    .HasMaxLength(50);

                entity.Property(e => e.SKey)
                    .IsRequired()
                    .HasColumnName("sKey")
                    .HasMaxLength(50);

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(200);

                entity.Property(e => e.SType)
                    .IsRequired()
                    .HasColumnName("sType")
                    .HasMaxLength(50);

                entity.Property(e => e.SValue)
                    .HasColumnName("sValue")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<SysLoginPw>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.ToTable("sysLoginPW");

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SUserPwnew)
                    .IsRequired()
                    .HasColumnName("sUserPWnew")
                    .HasMaxLength(50);

                entity.Property(e => e.SUserPwold)
                    .IsRequired()
                    .HasColumnName("sUserPWold")
                    .HasMaxLength(50);

                entity.Property(e => e.SysLoginUserSUserId)
                    .IsRequired()
                    .HasColumnName("sysLoginUser_sUserID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SysLoginTime>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.ToTable("sysLoginTime");

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.BLoginSuccess).HasColumnName("bLoginSuccess");

                entity.Property(e => e.DLoginTime)
                    .HasColumnName("dLoginTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.DLogoutTime)
                    .HasColumnName("dLogoutTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.SLoginIp)
                    .IsRequired()
                    .HasColumnName("sLoginIP")
                    .HasMaxLength(50);

                entity.Property(e => e.SSessionid)
                    .IsRequired()
                    .HasColumnName("sSessionid")
                    .HasMaxLength(50);

                entity.Property(e => e.SysLoginUserSUserId)
                    .IsRequired()
                    .HasColumnName("sysLoginUser_sUserID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SysPage>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("SYS_PAGE");

                entity.Property(e => e.Code).HasMaxLength(200);

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.NoticeTitle).HasMaxLength(100);

                entity.Property(e => e.SDescription)
                    .HasColumnName("sDescription")
                    .HasMaxLength(200);

                entity.Property(e => e.SFileName)
                    .HasColumnName("sFileName")
                    .HasMaxLength(255);

                entity.Property(e => e.SFileTitle)
                    .HasColumnName("sFileTitle")
                    .HasMaxLength(50);

                entity.Property(e => e.SIconName)
                    .HasColumnName("sIconName")
                    .HasMaxLength(255);

                entity.Property(e => e.SIconPath)
                    .HasColumnName("sIconPath")
                    .HasMaxLength(255);

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SParentKey)
                    .IsRequired()
                    .HasColumnName("sParentKey")
                    .HasMaxLength(220);

                entity.Property(e => e.SPath)
                    .HasColumnName("sPath")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<SysRole>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("sysRole");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.IsVisible)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SysRolePage>(entity =>
            {
                entity.HasKey(e => new { e.RoleCode, e.PageCode });

                entity.ToTable("SYS_ROLE_PAGE");

                entity.Property(e => e.RoleCode)
                    .HasColumnName("ROLE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.PageCode)
                    .HasColumnName("PAGE_CODE")
                    .HasMaxLength(200);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SysUserRole>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.ToTable("sysUserRole");

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.RoleCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Syslog>(entity =>
            {
                entity.ToTable("SYSLOG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasColumnName("NOTE");

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(500);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Note5)
                    .HasColumnName("NOTE5")
                    .HasMaxLength(50);

                entity.Property(e => e.Sid).HasColumnName("SID");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasColumnName("SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("TITLE")
                    .HasMaxLength(500);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SystemLog>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LogDescr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MachineAlias)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TableAtt>(entity =>
            {
                entity.HasKey(e => e.Fieldname);

                entity.Property(e => e.Fieldname)
                    .HasColumnName("FIELDNAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Caption)
                    .IsRequired()
                    .HasColumnName("CAPTION")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TaxType>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_TaxType_1");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Displayname)
                    .IsRequired()
                    .HasColumnName("DISPLAYNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Taxcn>(entity =>
            {
                entity.HasKey(e => e.TaxCode);

                entity.ToTable("TAXCN");

                entity.Property(e => e.TaxCode)
                    .HasColumnName("TAX_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Discount)
                    .HasColumnName("DISCOUNT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.TaxName)
                    .IsRequired()
                    .HasColumnName("TAX_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Taxcnlvl>(entity =>
            {
                entity.HasKey(e => new { e.Taxcode, e.Year, e.AmtB });

                entity.ToTable("TAXCNLVL");

                entity.Property(e => e.Taxcode)
                    .HasColumnName("TAXCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Year).HasColumnName("YEAR");

                entity.Property(e => e.AmtB)
                    .HasColumnName("AMT_B")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.AmtE)
                    .HasColumnName("AMT_E")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.TaxDiscount)
                    .HasColumnName("TAX_DISCOUNT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.TaxRate)
                    .HasColumnName("TAX_RATE")
                    .HasColumnType("decimal(14, 4)");
            });

            modelBuilder.Entity<Taxlvl>(entity =>
            {
                entity.HasKey(e => new { e.Year, e.AmtH });

                entity.ToTable("TAXLVL");

                entity.HasIndex(e => e.AmtH)
                    .HasName("AMT_H");

                entity.HasIndex(e => e.AmtL)
                    .HasName("AMT_L");

                entity.HasIndex(e => e.Year)
                    .HasName("YEAR");

                entity.Property(e => e.Year)
                    .HasColumnName("YEAR")
                    .HasMaxLength(50);

                entity.Property(e => e.AmtH)
                    .HasColumnName("AMT_H")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AmtL)
                    .HasColumnName("AMT_L")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Per0)
                    .HasColumnName("PER0")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per1)
                    .HasColumnName("PER1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per10)
                    .HasColumnName("PER10")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per11)
                    .HasColumnName("PER11")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per2)
                    .HasColumnName("PER2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per3)
                    .HasColumnName("PER3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per4)
                    .HasColumnName("PER4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per5)
                    .HasColumnName("PER5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per6)
                    .HasColumnName("PER6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per7)
                    .HasColumnName("PER7")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per8)
                    .HasColumnName("PER8")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per9)
                    .HasColumnName("PER9")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Tbase>(entity =>
            {
                entity.HasKey(e => new { e.Incomp, e.Nobr });

                entity.ToTable("TBASE");

                entity.Property(e => e.Incomp).HasColumnName("INCOMP");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr)
                    .IsRequired()
                    .HasColumnName("ADDR")
                    .HasMaxLength(60);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcode)
                    .IsRequired()
                    .HasColumnName("IDCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode1)
                    .IsRequired()
                    .HasColumnName("POSTCODE1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Postcode2)
                    .IsRequired()
                    .HasColumnName("POSTCODE2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel)
                    .IsRequired()
                    .HasColumnName("TEL")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tbkey>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TBKEY");

                entity.Property(e => e.Onekey).HasColumnName("ONEKEY");

                entity.Property(e => e.PreName)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tbsmsallot>(entity =>
            {
                entity.HasKey(e => e.Reference)
                    .HasName("PK__TBSMSALL__CAA2317D2D9297B4");

                entity.ToTable("TBSMSALLOT");

                entity.Property(e => e.Reference)
                    .HasColumnName("REFERENCE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Gentm)
                    .HasColumnName("GENTM")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Smsref).HasColumnName("SMSREF");

                entity.Property(e => e.Userref).HasColumnName("USERREF");
            });

            modelBuilder.Entity<Tbsmsinfo>(entity =>
            {
                entity.HasKey(e => e.Reference)
                    .HasName("PK__TBSMSINF__CAA2317D29C206D0");

                entity.ToTable("TBSMSINFO");

                entity.HasIndex(e => e.Smsid)
                    .HasName("UK_SMSINFOCode")
                    .IsUnique();

                entity.Property(e => e.Reference)
                    .HasColumnName("REFERENCE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Gentm)
                    .HasColumnName("GENTM")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Smscontent)
                    .HasColumnName("SMSCONTENT")
                    .HasColumnType("text");

                entity.Property(e => e.Smsid)
                    .IsRequired()
                    .HasColumnName("SMSID")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Smsindex).HasColumnName("SMSINDEX");

                entity.Property(e => e.Smsstarttm)
                    .HasColumnName("SMSSTARTTM")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Smstmleng).HasColumnName("SMSTMLENG");

                entity.Property(e => e.Smstype).HasColumnName("SMSTYPE");
            });

            modelBuilder.Entity<Template>(entity =>
            {
                entity.ToTable("TEMPLATE");

                entity.HasIndex(e => new { e.Userid, e.Fingerid })
                    .HasName("USERFINGER")
                    .IsUnique();

                entity.Property(e => e.Templateid).HasColumnName("TEMPLATEID");

                entity.Property(e => e.Bitmappicture)
                    .HasColumnName("BITMAPPICTURE")
                    .HasColumnType("image");

                entity.Property(e => e.Bitmappicture2)
                    .HasColumnName("BITMAPPICTURE2")
                    .HasColumnType("image");

                entity.Property(e => e.Bitmappicture3)
                    .HasColumnName("BITMAPPICTURE3")
                    .HasColumnType("image");

                entity.Property(e => e.Bitmappicture4)
                    .HasColumnName("BITMAPPICTURE4")
                    .HasColumnType("image");

                entity.Property(e => e.DivisionFp)
                    .HasColumnName("DivisionFP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Emachinenum)
                    .HasColumnName("EMACHINENUM")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Fingerid).HasColumnName("FINGERID");

                entity.Property(e => e.Flag).HasDefaultValueSql("((1))");

                entity.Property(e => e.Template1)
                    .IsRequired()
                    .HasColumnName("TEMPLATE")
                    .HasColumnType("image");

                entity.Property(e => e.Template11)
                    .HasColumnName("TEMPLATE1")
                    .HasColumnType("image");

                entity.Property(e => e.Template2)
                    .HasColumnName("TEMPLATE2")
                    .HasColumnType("image");

                entity.Property(e => e.Template3)
                    .HasColumnName("TEMPLATE3")
                    .HasColumnType("image");

                entity.Property(e => e.Template4)
                    .HasColumnName("TEMPLATE4")
                    .HasColumnType("image");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.Usetype).HasColumnName("USETYPE");
            });

            modelBuilder.Entity<TmpRotechg20150901>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpRotechg20150901");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TmpWage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tmp_WAGE");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AttDateB)
                    .HasColumnName("ATT_DATE_B")
                    .HasColumnType("datetime");

                entity.Property(e => e.AttDateE)
                    .HasColumnName("ATT_DATE_E")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bankno)
                    .IsRequired()
                    .HasColumnName("BANKNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Cash).HasColumnName("CASH");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .HasColumnName("CURRENCY")
                    .HasMaxLength(50);

                entity.Property(e => e.DateB)
                    .HasColumnName("DATE_B")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateE)
                    .HasColumnName("DATE_E")
                    .HasColumnType("datetime");

                entity.Property(e => e.Exchange)
                    .HasColumnName("EXCHANGE")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(2000);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkDays)
                    .HasColumnName("WK_DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tmtable>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Nobr });

                entity.ToTable("TMTABLE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.Yymm)
                    .HasName("YYMM");

                entity.HasIndex(e => new { e.Yymm, e.Nobr })
                    .HasName("IX_TMTABLE");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.D1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D11)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D12)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D13)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D14)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D15)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D16)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D17)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D18)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D19)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D20)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D21)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D22)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D23)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D24)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D25)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D26)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D27)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D28)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D29)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D30)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D31)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D9)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FreqNo)
                    .HasColumnName("FREQ_NO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Holis)
                    .HasColumnName("HOLIS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasColumnType("decimal(16, 2)");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.Tmtable)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMTABLE_BASE");
            });

            modelBuilder.Entity<TmtableImport>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Nobr });

                entity.ToTable("TMTABLE_IMPORT");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.D1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D11)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D12)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D13)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D14)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D15)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D16)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D17)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D18)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D19)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D20)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D21)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D22)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D23)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D24)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D25)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D26)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D27)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D28)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D29)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D30)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D31)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D9)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FreqNo)
                    .HasColumnName("FREQ_NO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Holis)
                    .HasColumnName("HOLIS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<TmtableTmp>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Rote });

                entity.ToTable("TMTABLE_TMP");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.D1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D11)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D12)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D13)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D14)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D15)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D16)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D17)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D18)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D19)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D20)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D21)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D22)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D23)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D24)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D25)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D26)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D27)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D28)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D29)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D30)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D31)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D9)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FreqNo)
                    .HasColumnName("FREQ_NO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Holis)
                    .HasColumnName("HOLIS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Ttdhum049805>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ttdhum049805");

                entity.Property(e => e.Hash1)
                    .IsRequired()
                    .HasColumnName("hash1")
                    .HasMaxLength(22)
                    .IsFixedLength();

                entity.Property(e => e.Hash2)
                    .IsRequired()
                    .HasColumnName("hash2")
                    .HasMaxLength(29)
                    .IsFixedLength();

                entity.Property(e => e.Hash3)
                    .IsRequired()
                    .HasColumnName("hash3")
                    .HasMaxLength(41)
                    .IsFixedLength();

                entity.Property(e => e.TCardedat)
                    .IsRequired()
                    .HasColumnName("t_cardedat")
                    .HasMaxLength(29);

                entity.Property(e => e.TCardetim).HasColumnName("t_cardetim");

                entity.Property(e => e.TCardsdat)
                    .IsRequired()
                    .HasColumnName("t_cardsdat")
                    .HasMaxLength(29);

                entity.Property(e => e.TCardstim).HasColumnName("t_cardstim");

                entity.Property(e => e.TCode)
                    .IsRequired()
                    .HasColumnName("t_code")
                    .HasMaxLength(10);

                entity.Property(e => e.TDate)
                    .IsRequired()
                    .HasColumnName("t_date")
                    .HasMaxLength(29);

                entity.Property(e => e.TDept)
                    .IsRequired()
                    .HasColumnName("t_dept")
                    .HasMaxLength(6);

                entity.Property(e => e.TEdate)
                    .IsRequired()
                    .HasColumnName("t_edate")
                    .HasMaxLength(29);

                entity.Property(e => e.TEtime).HasColumnName("t_etime");

                entity.Property(e => e.TFoodfee).HasColumnName("t_foodfee");

                entity.Property(e => e.TFoodfree).HasColumnName("t_foodfree");

                entity.Property(e => e.THourse).HasColumnName("t_hourse");

                entity.Property(e => e.TMandate)
                    .IsRequired()
                    .HasColumnName("t_mandate")
                    .HasMaxLength(29);

                entity.Property(e => e.TManshift)
                    .IsRequired()
                    .HasColumnName("t_manshift")
                    .HasMaxLength(3);

                entity.Property(e => e.TNight).HasColumnName("t_night");

                entity.Property(e => e.TOvertype)
                    .IsRequired()
                    .HasColumnName("t_overtype")
                    .HasMaxLength(3);

                entity.Property(e => e.TProd).HasColumnName("t_prod");

                entity.Property(e => e.TReas)
                    .IsRequired()
                    .HasColumnName("t_reas")
                    .HasMaxLength(3);

                entity.Property(e => e.TRefcntd).HasColumnName("t_Refcntd");

                entity.Property(e => e.TRefcntu).HasColumnName("t_Refcntu");

                entity.Property(e => e.TResthrs).HasColumnName("t_resthrs");

                entity.Property(e => e.TStime).HasColumnName("t_stime");

                entity.Property(e => e.TTmhs).HasColumnName("t_tmhs");

                entity.Property(e => e.TTrdt)
                    .IsRequired()
                    .HasColumnName("t_trdt")
                    .HasMaxLength(29);

                entity.Property(e => e.TUser)
                    .IsRequired()
                    .HasColumnName("t_user")
                    .HasMaxLength(16);
            });

            modelBuilder.Entity<Ttdhum049992>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ttdhum049992");

                entity.Property(e => e.Hash1)
                    .IsRequired()
                    .HasColumnName("hash1")
                    .HasMaxLength(22)
                    .IsFixedLength();

                entity.Property(e => e.Hash2)
                    .IsRequired()
                    .HasColumnName("hash2")
                    .HasMaxLength(29)
                    .IsFixedLength();

                entity.Property(e => e.Hash3)
                    .IsRequired()
                    .HasColumnName("hash3")
                    .HasMaxLength(41)
                    .IsFixedLength();

                entity.Property(e => e.TCardedat)
                    .IsRequired()
                    .HasColumnName("t_cardedat")
                    .HasMaxLength(29);

                entity.Property(e => e.TCardetim).HasColumnName("t_cardetim");

                entity.Property(e => e.TCardsdat)
                    .IsRequired()
                    .HasColumnName("t_cardsdat")
                    .HasMaxLength(29);

                entity.Property(e => e.TCardstim).HasColumnName("t_cardstim");

                entity.Property(e => e.TCode)
                    .IsRequired()
                    .HasColumnName("t_code")
                    .HasMaxLength(10);

                entity.Property(e => e.TDate)
                    .IsRequired()
                    .HasColumnName("t_date")
                    .HasMaxLength(29);

                entity.Property(e => e.TDept)
                    .IsRequired()
                    .HasColumnName("t_dept")
                    .HasMaxLength(6);

                entity.Property(e => e.TEdate)
                    .IsRequired()
                    .HasColumnName("t_edate")
                    .HasMaxLength(29);

                entity.Property(e => e.TEtime).HasColumnName("t_etime");

                entity.Property(e => e.TFoodfee).HasColumnName("t_foodfee");

                entity.Property(e => e.TFoodfree).HasColumnName("t_foodfree");

                entity.Property(e => e.THourse).HasColumnName("t_hourse");

                entity.Property(e => e.TMandate)
                    .IsRequired()
                    .HasColumnName("t_mandate")
                    .HasMaxLength(29);

                entity.Property(e => e.TManshift)
                    .IsRequired()
                    .HasColumnName("t_manshift")
                    .HasMaxLength(3);

                entity.Property(e => e.TNight).HasColumnName("t_night");

                entity.Property(e => e.TOvertype)
                    .IsRequired()
                    .HasColumnName("t_overtype")
                    .HasMaxLength(3);

                entity.Property(e => e.TProd).HasColumnName("t_prod");

                entity.Property(e => e.TReas)
                    .IsRequired()
                    .HasColumnName("t_reas")
                    .HasMaxLength(3);

                entity.Property(e => e.TRefcntd).HasColumnName("t_Refcntd");

                entity.Property(e => e.TRefcntu).HasColumnName("t_Refcntu");

                entity.Property(e => e.TResthrs).HasColumnName("t_resthrs");

                entity.Property(e => e.TStime).HasColumnName("t_stime");

                entity.Property(e => e.TTmhs).HasColumnName("t_tmhs");

                entity.Property(e => e.TTrdt)
                    .IsRequired()
                    .HasColumnName("t_trdt")
                    .HasMaxLength(29);

                entity.Property(e => e.TUser)
                    .IsRequired()
                    .HasColumnName("t_user")
                    .HasMaxLength(16);
            });

            modelBuilder.Entity<Ttdhum049995>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ttdhum049995");

                entity.Property(e => e.Hash1)
                    .IsRequired()
                    .HasColumnName("hash1")
                    .HasMaxLength(22)
                    .IsFixedLength();

                entity.Property(e => e.Hash2)
                    .IsRequired()
                    .HasColumnName("hash2")
                    .HasMaxLength(29)
                    .IsFixedLength();

                entity.Property(e => e.Hash3)
                    .IsRequired()
                    .HasColumnName("hash3")
                    .HasMaxLength(41)
                    .IsFixedLength();

                entity.Property(e => e.TCardedat)
                    .IsRequired()
                    .HasColumnName("t_cardedat")
                    .HasMaxLength(29);

                entity.Property(e => e.TCardetim).HasColumnName("t_cardetim");

                entity.Property(e => e.TCardsdat)
                    .IsRequired()
                    .HasColumnName("t_cardsdat")
                    .HasMaxLength(29);

                entity.Property(e => e.TCardstim).HasColumnName("t_cardstim");

                entity.Property(e => e.TCode)
                    .IsRequired()
                    .HasColumnName("t_code")
                    .HasMaxLength(10);

                entity.Property(e => e.TDate)
                    .IsRequired()
                    .HasColumnName("t_date")
                    .HasMaxLength(29);

                entity.Property(e => e.TDept)
                    .IsRequired()
                    .HasColumnName("t_dept")
                    .HasMaxLength(6);

                entity.Property(e => e.TEdate)
                    .IsRequired()
                    .HasColumnName("t_edate")
                    .HasMaxLength(29);

                entity.Property(e => e.TEtime).HasColumnName("t_etime");

                entity.Property(e => e.TFoodfee).HasColumnName("t_foodfee");

                entity.Property(e => e.TFoodfree).HasColumnName("t_foodfree");

                entity.Property(e => e.THourse).HasColumnName("t_hourse");

                entity.Property(e => e.TMandate)
                    .IsRequired()
                    .HasColumnName("t_mandate")
                    .HasMaxLength(29);

                entity.Property(e => e.TManshift)
                    .IsRequired()
                    .HasColumnName("t_manshift")
                    .HasMaxLength(3);

                entity.Property(e => e.TNight).HasColumnName("t_night");

                entity.Property(e => e.TOvertype)
                    .IsRequired()
                    .HasColumnName("t_overtype")
                    .HasMaxLength(3);

                entity.Property(e => e.TProd).HasColumnName("t_prod");

                entity.Property(e => e.TReas)
                    .IsRequired()
                    .HasColumnName("t_reas")
                    .HasMaxLength(3);

                entity.Property(e => e.TRefcntd).HasColumnName("t_Refcntd");

                entity.Property(e => e.TRefcntu).HasColumnName("t_Refcntu");

                entity.Property(e => e.TResthrs).HasColumnName("t_resthrs");

                entity.Property(e => e.TStime).HasColumnName("t_stime");

                entity.Property(e => e.TTmhs).HasColumnName("t_tmhs");

                entity.Property(e => e.TTrdt)
                    .IsRequired()
                    .HasColumnName("t_trdt")
                    .HasMaxLength(29);

                entity.Property(e => e.TUser)
                    .IsRequired()
                    .HasColumnName("t_user")
                    .HasMaxLength(16);
            });

            modelBuilder.Entity<Ttscd>(entity =>
            {
                entity.HasKey(e => e.Ttscd1);

                entity.ToTable("TTSCD");

                entity.HasIndex(e => e.Ttscd1)
                    .HasName("TTSCE");

                entity.Property(e => e.Ttscd1)
                    .HasColumnName("TTSCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.TtscdDisp)
                    .HasColumnName("TTSCD_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttsname)
                    .IsRequired()
                    .HasColumnName("TTSNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Ttscode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TTSCODE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Twaged>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq, e.SalCode, e.Saladr });

                entity.ToTable("TWAGED");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DAmt)
                    .HasColumnName("D_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Forsub)
                    .IsRequired()
                    .HasColumnName("FORSUB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InaId)
                    .IsRequired()
                    .HasColumnName("INA_ID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Subcode)
                    .IsRequired()
                    .HasColumnName("SUBCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupAmt)
                    .HasColumnName("SUP_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxno)
                    .IsRequired()
                    .HasColumnName("TAXNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasColumnName("TR_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<UCode>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("U_CODE");

                entity.HasIndex(e => e.QAttr)
                    .HasName("Q_ATTR");

                entity.HasIndex(e => e.QCode)
                    .HasName("Q_CODE");

                entity.HasIndex(e => e.QName)
                    .HasName("Q_NAME");

                entity.HasIndex(e => new { e.QCode, e.QName, e.QField })
                    .HasName("IX_U_CODE");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Field1)
                    .IsRequired()
                    .HasColumnName("FIELD1")
                    .HasMaxLength(50);

                entity.Property(e => e.Field2)
                    .IsRequired()
                    .HasColumnName("FIELD2")
                    .HasMaxLength(50);

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.QAttr)
                    .IsRequired()
                    .HasColumnName("Q_ATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.QCode)
                    .IsRequired()
                    .HasColumnName("Q_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.QField)
                    .IsRequired()
                    .HasColumnName("Q_FIELD")
                    .HasMaxLength(50);

                entity.Property(e => e.QLens)
                    .HasColumnName("Q_LENS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.QName)
                    .IsRequired()
                    .HasColumnName("Q_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.QOrder).HasColumnName("Q_ORDER");

                entity.Property(e => e.QVar).HasColumnName("Q_VAR");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UDatagroup>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Company, e.Datagroup })
                    .HasName("PK_DATAGG1_1");

                entity.ToTable("U_DATAGROUP");

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .HasMaxLength(50);

                entity.Property(e => e.Datagroup)
                    .HasColumnName("DATAGROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.Property(e => e.Readrule).HasColumnName("READRULE");

                entity.Property(e => e.Writerule).HasColumnName("WRITERULE");

                entity.HasOne(d => d.CompanyNavigation)
                    .WithMany(p => p.UDatagroup)
                    .HasForeignKey(d => d.Company)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_U_DATAGROUP_COMP");

                entity.HasOne(d => d.DatagroupNavigation)
                    .WithMany(p => p.UDatagroup)
                    .HasForeignKey(d => d.Datagroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_U_DATAGROUP_DATAGROUP");

                entity.HasOne(d => d.CompDatagroup)
                    .WithMany(p => p.UDatagroup)
                    .HasForeignKey(d => new { d.Company, d.Datagroup })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_U_DATAGROUP_COMP_DATAGROUP");

                entity.HasOne(d => d.UUsercomp)
                    .WithMany(p => p.UDatagroup)
                    .HasForeignKey(d => new { d.UserId, d.Company })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_U_DATAGROUP_U_USERCOMP");
            });

            modelBuilder.Entity<UDataid>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Dept, e.System });

                entity.ToTable("U_DATAID");

                entity.HasIndex(e => e.Dept)
                    .HasName("DEPT");

                entity.HasIndex(e => e.UserId)
                    .HasName("USER_ID");

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.System)
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_ERROR");

                entity.HasIndex(e => e.OccurTime)
                    .HasName("IX_U_ERROR")
                    .IsUnique();

                entity.HasIndex(e => e.System)
                    .HasName("SYSTEM");

                entity.HasIndex(e => e.UserId)
                    .HasName("USER_ID");

                entity.HasIndex(e => e.UserName)
                    .HasName("USER_NAME");

                entity.Property(e => e.Aerror)
                    .IsRequired()
                    .HasColumnName("AERROR")
                    .HasColumnType("text");

                entity.Property(e => e.Errmsg)
                    .IsRequired()
                    .HasColumnName("ERRMSG")
                    .HasColumnType("text");

                entity.Property(e => e.Errno)
                    .HasColumnName("ERRNO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Errpgcode)
                    .IsRequired()
                    .HasColumnName("ERRPGCODE")
                    .HasColumnType("text");

                entity.Property(e => e.Errpgline)
                    .HasColumnName("ERRPGLINE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Errpgname)
                    .IsRequired()
                    .HasColumnName("ERRPGNAME")
                    .HasColumnType("text");

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.OccurTime)
                    .HasColumnName("OCCUR_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasColumnName("USER_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UFilter>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("U_FILTER");

                entity.HasIndex(e => e.QAttr)
                    .HasName("Q_ATTR");

                entity.HasIndex(e => e.QCode)
                    .HasName("Q_CODE");

                entity.HasIndex(e => e.QName)
                    .HasName("Q_NAME");

                entity.HasIndex(e => e.QOrder)
                    .HasName("Q_ORDER");

                entity.HasIndex(e => e.QSubq)
                    .HasName("Q_SUBQ");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.QAttr)
                    .IsRequired()
                    .HasColumnName("Q_ATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.QCode)
                    .IsRequired()
                    .HasColumnName("Q_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.QCond)
                    .IsRequired()
                    .HasColumnName("Q_COND")
                    .HasMaxLength(120);

                entity.Property(e => e.QCond1)
                    .IsRequired()
                    .HasColumnName("Q_COND1")
                    .HasMaxLength(120);

                entity.Property(e => e.QHaving)
                    .IsRequired()
                    .HasColumnName("Q_HAVING")
                    .HasMaxLength(80);

                entity.Property(e => e.QKeycontb)
                    .IsRequired()
                    .HasColumnName("Q_KEYCONTB")
                    .HasMaxLength(50);

                entity.Property(e => e.QKeyconte)
                    .IsRequired()
                    .HasColumnName("Q_KEYCONTE")
                    .HasMaxLength(50);

                entity.Property(e => e.QName)
                    .IsRequired()
                    .HasColumnName("Q_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.QOrder)
                    .IsRequired()
                    .HasColumnName("Q_ORDER")
                    .HasMaxLength(50);

                entity.Property(e => e.QSubq)
                    .IsRequired()
                    .HasColumnName("Q_SUBQ")
                    .HasMaxLength(160);

                entity.Property(e => e.QVarval)
                    .IsRequired()
                    .HasColumnName("Q_VARVAL")
                    .HasMaxLength(60);

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.UCode).HasColumnName("U_CODE");

                entity.Property(e => e.Usernobr)
                    .IsRequired()
                    .HasColumnName("USERNOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UFldlst>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_FLDLST");

                entity.HasIndex(e => e.Fldname)
                    .HasName("IX_U_FLDLST")
                    .IsUnique();

                entity.Property(e => e.Dbfname)
                    .IsRequired()
                    .HasColumnName("DBFNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Flddescr)
                    .IsRequired()
                    .HasColumnName("FLDDESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Fldname)
                    .IsRequired()
                    .HasColumnName("FLDNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UGroup>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.Prog });

                entity.ToTable("U_GROUP");

                entity.Property(e => e.GroupId)
                    .HasColumnName("GROUP_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Prog)
                    .HasColumnName("PROG")
                    .HasMaxLength(50);

                entity.Property(e => e.Add).HasColumnName("ADD_");

                entity.Property(e => e.Dele).HasColumnName("DELE");

                entity.Property(e => e.Edit).HasColumnName("EDIT");

                entity.Property(e => e.GroupName)
                    .HasColumnName("GROUP_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Print).HasColumnName("PRINT_");

                entity.Property(e => e.System)
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ULogin>(entity =>
            {
                entity.HasKey(e => e.InTime);

                entity.ToTable("U_LOGIN");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_U_LOGIN");

                entity.Property(e => e.InTime)
                    .HasColumnName("IN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangsuper).HasColumnName("MANGSUPER");

                entity.Property(e => e.Procsuper).HasColumnName("PROCSUPER");

                entity.Property(e => e.Super).HasColumnName("SUPER");

                entity.Property(e => e.System)
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .HasColumnName("USER_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Workadr)
                    .HasColumnName("WORKADR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_ORDER");

                entity.HasIndex(e => e.QName)
                    .HasName("IX_U_ORDER")
                    .IsUnique();

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.QAsc)
                    .IsRequired()
                    .HasColumnName("Q_ASC")
                    .HasMaxLength(50);

                entity.Property(e => e.QField)
                    .IsRequired()
                    .HasColumnName("Q_FIELD")
                    .HasMaxLength(50);

                entity.Property(e => e.QName)
                    .IsRequired()
                    .HasColumnName("Q_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usernobr)
                    .IsRequired()
                    .HasColumnName("USERNOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UPrg>(entity =>
            {
                entity.HasKey(e => e.Prog);

                entity.ToTable("U_PRG");

                entity.HasIndex(e => e.Prog)
                    .HasName("PROG");

                entity.HasIndex(e => e.ProgName)
                    .HasName("PROG_NAME");

                entity.HasIndex(e => e.System)
                    .HasName("SYSTEM");

                entity.HasIndex(e => new { e.Prog, e.System })
                    .HasName("IX_U_PRG");

                entity.Property(e => e.Prog)
                    .HasColumnName("PROG")
                    .HasMaxLength(50);

                entity.Property(e => e.FullFormName).HasMaxLength(100);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.ProgName)
                    .IsRequired()
                    .HasColumnName("PROG_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Root).HasColumnName("ROOT");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UPrgid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_PRGID");

                entity.HasIndex(e => e.Prog)
                    .HasName("PROG");

                entity.HasIndex(e => e.System)
                    .HasName("SYSTEM");

                entity.HasIndex(e => e.UserId)
                    .HasName("USER_ID");

                entity.HasIndex(e => new { e.UserId, e.Prog, e.System })
                    .HasName("IX_U_PRGID");

                entity.Property(e => e.Add).HasColumnName("ADD_");

                entity.Property(e => e.Dele).HasColumnName("DELE");

                entity.Property(e => e.Edit).HasColumnName("EDIT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Print).HasColumnName("PRINT_");

                entity.Property(e => e.Prog)
                    .IsRequired()
                    .HasColumnName("PROG")
                    .HasMaxLength(50);

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_QUERY");

                entity.HasIndex(e => e.Sys2007)
                    .HasName("SYS2007");

                entity.HasIndex(e => e.System)
                    .HasName("SYSTEM");

                entity.Property(e => e.Cont)
                    .IsRequired()
                    .HasColumnName("CONT")
                    .HasMaxLength(50);

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Sys2007)
                    .IsRequired()
                    .HasColumnName("SYS2007")
                    .HasMaxLength(50);

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys>(entity =>
            {
                entity.HasKey(e => e.Auto)
                    .HasName("PK_U_SYS_1");

                entity.ToTable("U_SYS");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Addupamt01)
                    .HasColumnName("ADDUPAMT01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt02)
                    .HasColumnName("ADDUPAMT02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt03)
                    .HasColumnName("ADDUPAMT03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt04)
                    .HasColumnName("ADDUPAMT04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt05)
                    .HasColumnName("ADDUPAMT05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attamt)
                    .HasColumnName("ATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attamt1)
                    .HasColumnName("ATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attawardsalcode)
                    .HasColumnName("ATTAWARDSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Attmonamt)
                    .HasColumnName("ATTMONAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attmonth).HasColumnName("ATTMONTH");

                entity.Property(e => e.Attqty)
                    .HasColumnName("ATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attqty1)
                    .HasColumnName("ATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Bankno)
                    .HasColumnName("BANKNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Carddateformat)
                    .HasColumnName("CARDDATEFORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardfilename)
                    .HasColumnName("CARDFILENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardnoeuqalnobr).HasColumnName("CARDNOEUQALNOBR");

                entity.Property(e => e.Cardtype)
                    .HasColumnName("CARDTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Compaddr)
                    .HasColumnName("COMPADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .HasMaxLength(50);

                entity.Property(e => e.Company1)
                    .HasColumnName("COMPANY1")
                    .HasMaxLength(50);

                entity.Property(e => e.Companybankac)
                    .HasColumnName("COMPANYBANKAC")
                    .HasMaxLength(50);

                entity.Property(e => e.Companybankno)
                    .HasColumnName("COMPANYBANKNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Compersoncnt)
                    .HasColumnName("COMPERSONCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Compfax)
                    .HasColumnName("COMPFAX")
                    .HasMaxLength(50);

                entity.Property(e => e.Comphelid)
                    .HasColumnName("COMPHELID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compid)
                    .HasColumnName("COMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compid1)
                    .HasColumnName("COMPID1")
                    .HasMaxLength(50);

                entity.Property(e => e.Complabid)
                    .HasColumnName("COMPLABID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compman)
                    .HasColumnName("COMPMAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Comptel)
                    .HasColumnName("COMPTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.DateLen).HasColumnName("DATE_LEN");

                entity.Property(e => e.DatePos).HasColumnName("DATE_POS");

                entity.Property(e => e.Eatsalcode)
                    .HasColumnName("EATSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Empfamilycnt)
                    .HasColumnName("EMPFAMILYCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Empsalcode)
                    .HasColumnName("EMPSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Entryday)
                    .HasColumnName("ENTRYDAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattamt)
                    .HasColumnName("FATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattamt1)
                    .HasColumnName("FATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattqty)
                    .HasColumnName("FATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattqty1)
                    .HasColumnName("FATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Femalemaxhrs)
                    .HasColumnName("FEMALEMAXHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ff0407)
                    .HasColumnName("FF0407")
                    .HasMaxLength(50);

                entity.Property(e => e.Ff04071)
                    .HasColumnName("FF04071")
                    .HasMaxLength(50);

                entity.Property(e => e.Ff103)
                    .HasColumnName("FF103")
                    .HasMaxLength(50);

                entity.Property(e => e.Fixtaxrate)
                    .HasColumnName("FIXTAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodsalcode)
                    .HasColumnName("FOODSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Forsalbasd)
                    .HasColumnName("FORSALBASD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate01)
                    .HasColumnName("FORTAXRATE01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate02)
                    .HasColumnName("FORTAXRATE02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate03)
                    .HasColumnName("FORTAXRATE03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp1)
                    .HasColumnName("GROUPEXP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp2)
                    .HasColumnName("GROUPEXP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp51)
                    .HasColumnName("GROUPEXP51")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp52)
                    .HasColumnName("GROUPEXP52")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupsalcd)
                    .HasColumnName("GROUPSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Heacomprate)
                    .HasColumnName("HEACOMPRATE")
                    .HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Healthoversalcode)
                    .HasColumnName("HEALTHOVERSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Healthrepairsalcode)
                    .HasColumnName("HEALTHREPAIRSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Helorgname)
                    .HasColumnName("HELORGNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Hsalcode)
                    .HasColumnName("HSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Inday).HasColumnName("INDAY");

                entity.Property(e => e.Laboversalcode)
                    .HasColumnName("LABOVERSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Labrepairsalcode)
                    .HasColumnName("LABREPAIRSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Lattamt)
                    .HasColumnName("LATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattamt1)
                    .HasColumnName("LATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattqty)
                    .HasColumnName("LATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattqty1)
                    .HasColumnName("LATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ljobper)
                    .HasColumnName("LJOBPER")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Ljobper1)
                    .HasColumnName("LJOBPER1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Lsalcode)
                    .HasColumnName("LSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Malemaxhrs)
                    .HasColumnName("MALEMAXHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Maxdays).HasColumnName("MAXDAYS");

                entity.Property(e => e.Month01day1)
                    .HasColumnName("MONTH01DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day2)
                    .HasColumnName("MONTH01DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day3)
                    .HasColumnName("MONTH01DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day4)
                    .HasColumnName("MONTH01DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day1)
                    .HasColumnName("MONTH02DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day2)
                    .HasColumnName("MONTH02DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day3)
                    .HasColumnName("MONTH02DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day4)
                    .HasColumnName("MONTH02DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day1)
                    .HasColumnName("MONTH03DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day2)
                    .HasColumnName("MONTH03DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day3)
                    .HasColumnName("MONTH03DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day4)
                    .HasColumnName("MONTH03DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day1)
                    .HasColumnName("MONTH04DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day2)
                    .HasColumnName("MONTH04DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day3)
                    .HasColumnName("MONTH04DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day4)
                    .HasColumnName("MONTH04DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day1)
                    .HasColumnName("MONTH05DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day2)
                    .HasColumnName("MONTH05DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day3)
                    .HasColumnName("MONTH05DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day4)
                    .HasColumnName("MONTH05DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day1)
                    .HasColumnName("MONTH06DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day2)
                    .HasColumnName("MONTH06DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day3)
                    .HasColumnName("MONTH06DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day4)
                    .HasColumnName("MONTH06DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day1)
                    .HasColumnName("MONTH07DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day2)
                    .HasColumnName("MONTH07DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day3)
                    .HasColumnName("MONTH07DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day4)
                    .HasColumnName("MONTH07DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day1)
                    .HasColumnName("MONTH08DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day2)
                    .HasColumnName("MONTH08DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day3)
                    .HasColumnName("MONTH08DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day4)
                    .HasColumnName("MONTH08DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day1)
                    .HasColumnName("MONTH09DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day2)
                    .HasColumnName("MONTH09DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day3)
                    .HasColumnName("MONTH09DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day4)
                    .HasColumnName("MONTH09DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day1)
                    .HasColumnName("MONTH10DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day2)
                    .HasColumnName("MONTH10DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day3)
                    .HasColumnName("MONTH10DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day4)
                    .HasColumnName("MONTH10DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day1)
                    .HasColumnName("MONTH11DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day2)
                    .HasColumnName("MONTH11DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day3)
                    .HasColumnName("MONTH11DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day4)
                    .HasColumnName("MONTH11DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day1)
                    .HasColumnName("MONTH12DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day2)
                    .HasColumnName("MONTH12DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day3)
                    .HasColumnName("MONTH12DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day4)
                    .HasColumnName("MONTH12DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt01)
                    .HasColumnName("NETTAXAMT01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt02)
                    .HasColumnName("NETTAXAMT02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt03)
                    .HasColumnName("NETTAXAMT03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt04)
                    .HasColumnName("NETTAXAMT04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt05)
                    .HasColumnName("NETTAXAMT05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt06)
                    .HasColumnName("NETTAXAMT06")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt07)
                    .HasColumnName("NETTAXAMT07")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt08)
                    .HasColumnName("NETTAXAMT08")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt09)
                    .HasColumnName("NETTAXAMT09")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt10)
                    .HasColumnName("NETTAXAMT10")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate01)
                    .HasColumnName("NETTAXRATE01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate02)
                    .HasColumnName("NETTAXRATE02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate03)
                    .HasColumnName("NETTAXRATE03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate04)
                    .HasColumnName("NETTAXRATE04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate05)
                    .HasColumnName("NETTAXRATE05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nextyearday)
                    .HasColumnName("NEXTYEARDAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NobrLen).HasColumnName("NOBR_LEN");

                entity.Property(e => e.NobrPos).HasColumnName("NOBR_POS");

                entity.Property(e => e.Notaxsalcode)
                    .HasColumnName("NOTAXSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nretirerate)
                    .HasColumnName("NRETIRERATE")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Nretirerate1)
                    .HasColumnName("NRETIRERATE1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Ondutyamt)
                    .HasColumnName("ONDUTYAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ondutysalcode)
                    .HasColumnName("ONDUTYSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otfoodsalcode)
                    .HasColumnName("OTFOODSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otfoodsalcode1)
                    .HasColumnName("OTFOODSALCODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Ottrasalcode)
                    .HasColumnName("OTTRASALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otunit)
                    .HasColumnName("OTUNIT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Retirerate)
                    .HasColumnName("RETIRERATE")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Retirerate1)
                    .HasColumnName("RETIRERATE1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Retsalcode)
                    .HasColumnName("RETSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Salarydedutamt)
                    .HasColumnName("SALARYDEDUTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Sendmail)
                    .HasColumnName("SENDMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.SerLen).HasColumnName("SER_LEN");

                entity.Property(e => e.SerPos).HasColumnName("SER_POS");

                entity.Property(e => e.Smtpid)
                    .HasColumnName("SMTPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Smtppw)
                    .HasColumnName("SMTPPW")
                    .HasMaxLength(50);

                entity.Property(e => e.Smtpserver)
                    .HasColumnName("SMTPSERVER")
                    .HasMaxLength(50);

                entity.Property(e => e.Specialcaltype).HasColumnName("SPECIALCALTYPE");

                entity.Property(e => e.Stdeduetamtmar)
                    .HasColumnName("STDEDUETAMTMAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Stdeduetamtnmar)
                    .HasColumnName("STDEDUETAMTNMAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Sysdisk)
                    .HasColumnName("SYSDISK")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxamtamonth)
                    .HasColumnName("TAXAMTAMONTH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxfree70down)
                    .HasColumnName("TAXFREE70DOWN")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxfree70up)
                    .HasColumnName("TAXFREE70UP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxsalcode)
                    .HasColumnName("TAXSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxtype).HasColumnName("TAXTYPE");

                entity.Property(e => e.TimeLen).HasColumnName("TIME_LEN");

                entity.Property(e => e.TimePos).HasColumnName("TIME_POS");

                entity.Property(e => e.Totaxsalcode)
                    .HasColumnName("TOTAXSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Vacationdays01)
                    .HasColumnName("VACATIONDAYS01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays02)
                    .HasColumnName("VACATIONDAYS02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays03)
                    .HasColumnName("VACATIONDAYS03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays04)
                    .HasColumnName("VACATIONDAYS04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Welpay)
                    .HasColumnName("WELPAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Welsalcode)
                    .HasColumnName("WELSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Year01)
                    .HasColumnName("YEAR01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year02)
                    .HasColumnName("YEAR02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year03)
                    .HasColumnName("YEAR03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year04)
                    .HasColumnName("YEAR04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year0efftype1).HasColumnName("YEAR0EFFTYPE1");

                entity.Property(e => e.Year0efftype2).HasColumnName("YEAR0EFFTYPE2");

                entity.Property(e => e.Year0efftype3).HasColumnName("YEAR0EFFTYPE3");

                entity.Property(e => e.Year0efftype4).HasColumnName("YEAR0EFFTYPE4");

                entity.Property(e => e.Year0type1).HasColumnName("YEAR0TYPE1");

                entity.Property(e => e.Year0type2).HasColumnName("YEAR0TYPE2");

                entity.Property(e => e.Year0type3).HasColumnName("YEAR0TYPE3");

                entity.Property(e => e.Year0type4).HasColumnName("YEAR0TYPE4");

                entity.Property(e => e.Year11)
                    .HasColumnName("YEAR11")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year12)
                    .HasColumnName("YEAR12")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year21)
                    .HasColumnName("YEAR21")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year22)
                    .HasColumnName("YEAR22")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year31)
                    .HasColumnName("YEAR31")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year32)
                    .HasColumnName("YEAR32")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year41)
                    .HasColumnName("YEAR41")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year42)
                    .HasColumnName("YEAR42")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year51)
                    .HasColumnName("YEAR51")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yearbase).HasColumnName("YEARBASE");
            });

            modelBuilder.Entity<USys1>(entity =>
            {
                entity.HasKey(e => e.Comp)
                    .HasName("PK_U_SYS1_1");

                entity.ToTable("U_SYS1");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Compaddr)
                    .HasColumnName("COMPADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .HasMaxLength(50);

                entity.Property(e => e.Company1)
                    .HasColumnName("COMPANY1")
                    .HasMaxLength(50);

                entity.Property(e => e.Companybankac)
                    .HasColumnName("COMPANYBANKAC")
                    .HasMaxLength(50);

                entity.Property(e => e.Companybankno)
                    .HasColumnName("COMPANYBANKNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Compfax)
                    .HasColumnName("COMPFAX")
                    .HasMaxLength(50);

                entity.Property(e => e.Comphelid)
                    .HasColumnName("COMPHELID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compid)
                    .HasColumnName("COMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compid1)
                    .HasColumnName("COMPID1")
                    .HasMaxLength(50);

                entity.Property(e => e.Complabid)
                    .HasColumnName("COMPLABID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compman)
                    .HasColumnName("COMPMAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Comptel)
                    .HasColumnName("COMPTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Ff0407)
                    .HasColumnName("FF0407")
                    .HasMaxLength(50);

                entity.Property(e => e.Ff04071)
                    .HasColumnName("FF04071")
                    .HasMaxLength(50);

                entity.Property(e => e.Ff103)
                    .HasColumnName("FF103")
                    .HasMaxLength(50);

                entity.Property(e => e.Helorgname)
                    .HasColumnName("HELORGNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys10>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS10");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Sendmail)
                    .HasColumnName("SENDMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.Smtpid)
                    .HasColumnName("SMTPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Smtppw)
                    .HasColumnName("SMTPPW")
                    .HasMaxLength(50);

                entity.Property(e => e.Smtpserver)
                    .HasColumnName("SMTPSERVER")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys2>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS2");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Attamt)
                    .HasColumnName("ATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attamt1)
                    .HasColumnName("ATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attawardsalcode)
                    .HasColumnName("ATTAWARDSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Attmonamt)
                    .HasColumnName("ATTMONAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attmonth).HasColumnName("ATTMONTH");

                entity.Property(e => e.Attmovemonth)
                    .HasColumnName("ATTMOVEMONTH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Attqty)
                    .HasColumnName("ATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attqty1)
                    .HasColumnName("ATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Eatsalcode)
                    .HasColumnName("EATSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Empsalcode)
                    .HasColumnName("EMPSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Fattamt)
                    .HasColumnName("FATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattamt1)
                    .HasColumnName("FATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattqty)
                    .HasColumnName("FATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattqty1)
                    .HasColumnName("FATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodsalcode)
                    .HasColumnName("FOODSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Inday).HasColumnName("INDAY");

                entity.Property(e => e.Lattamt)
                    .HasColumnName("LATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattamt1)
                    .HasColumnName("LATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattqty)
                    .HasColumnName("LATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattqty1)
                    .HasColumnName("LATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ondutyamt)
                    .HasColumnName("ONDUTYAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ondutysalcode)
                    .HasColumnName("ONDUTYSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Salmonth).HasColumnName("SALMONTH");

                entity.Property(e => e.Welpay)
                    .HasColumnName("WELPAY")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Welsalcode)
                    .HasColumnName("WELSALCODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys3>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS3");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Femalemaxhrs)
                    .HasColumnName("FEMALEMAXHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Malemaxhrs)
                    .HasColumnName("MALEMAXHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Notaxsalcode)
                    .HasColumnName("NOTAXSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otfoodsalcode)
                    .HasColumnName("OTFOODSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otfoodsalcode1)
                    .HasColumnName("OTFOODSALCODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Ottrasalcode)
                    .HasColumnName("OTTRASALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otunit)
                    .HasColumnName("OTUNIT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Totaxsalcode)
                    .HasColumnName("TOTAXSALCODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys4>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS4");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Laboversalcode)
                    .HasColumnName("LABOVERSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Labrepairsalcode)
                    .HasColumnName("LABREPAIRSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Ljobper)
                    .HasColumnName("LJOBPER")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Ljobper1)
                    .HasColumnName("LJOBPER1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Lsalcode)
                    .HasColumnName("LSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nretirerate)
                    .HasColumnName("NRETIRERATE")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Nretirerate1)
                    .HasColumnName("NRETIRERATE1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Retirerate)
                    .HasColumnName("RETIRERATE")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Retirerate1)
                    .HasColumnName("RETIRERATE1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Retsalcode)
                    .HasColumnName("RETSALCODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys5>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS5");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Bonusyearratemax)
                    .HasColumnName("BONUSYEARRATEMAX")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Compersoncnt)
                    .HasColumnName("COMPERSONCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Empfamilycnt)
                    .HasColumnName("EMPFAMILYCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Heacomprate)
                    .HasColumnName("HEACOMPRATE")
                    .HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Healthoversalcode)
                    .HasColumnName("HEALTHOVERSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Healthrepairsalcode)
                    .HasColumnName("HEALTHREPAIRSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Hsalcode)
                    .HasColumnName("HSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Supplehinslabsalcode)
                    .HasColumnName("SUPPLEHINSLABSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Suppleinslabrate)
                    .HasColumnName("SUPPLEINSLABRATE")
                    .HasColumnType("decimal(16, 4)");
            });

            modelBuilder.Entity<USys6>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS6");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Groupexp1)
                    .HasColumnName("GROUPEXP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp2)
                    .HasColumnName("GROUPEXP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp51)
                    .HasColumnName("GROUPEXP51")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp52)
                    .HasColumnName("GROUPEXP52")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupsalcd)
                    .HasColumnName("GROUPSALCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys7>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("U_SYS7");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.CardName)
                    .HasColumnName("CARD_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Carddateformat)
                    .HasColumnName("CARDDATEFORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardnoeuqalnobr).HasColumnName("CARDNOEUQALNOBR");

                entity.Property(e => e.CodeLen).HasColumnName("CODE_LEN");

                entity.Property(e => e.CodePos).HasColumnName("CODE_POS");

                entity.Property(e => e.DateFormat)
                    .HasColumnName("DATE_FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateLen).HasColumnName("DATE_LEN");

                entity.Property(e => e.DatePos).HasColumnName("DATE_POS");

                entity.Property(e => e.IgnoreSignal)
                    .HasColumnName("IGNORE_SIGNAL")
                    .HasMaxLength(50);

                entity.Property(e => e.NobrLen).HasColumnName("NOBR_LEN");

                entity.Property(e => e.NobrPos).HasColumnName("NOBR_POS");

                entity.Property(e => e.SerLen).HasColumnName("SER_LEN");

                entity.Property(e => e.SerPos).HasColumnName("SER_POS");

                entity.Property(e => e.SpiltSignal)
                    .HasColumnName("SPILT_SIGNAL")
                    .HasMaxLength(50);

                entity.Property(e => e.TextType)
                    .HasColumnName("TEXT_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.TimeFormat)
                    .HasColumnName("TIME_FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TimeLen).HasColumnName("TIME_LEN");

                entity.Property(e => e.TimePos).HasColumnName("TIME_POS");
            });

            modelBuilder.Entity<USys7a>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("U_SYS7A");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.CardName)
                    .IsRequired()
                    .HasColumnName("CARD_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.ColAdate)
                    .HasColumnName("COL_ADATE")
                    .HasMaxLength(50);

                entity.Property(e => e.ColCardno)
                    .HasColumnName("COL_CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.ColChecktime)
                    .HasColumnName("COL_CHECKTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ColIpadd)
                    .HasColumnName("COL_IPADD")
                    .HasMaxLength(50);

                entity.Property(e => e.ColNobr)
                    .HasColumnName("COL_NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.ColOntime)
                    .HasColumnName("COL_ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ColSource)
                    .HasColumnName("COL_SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasColumnName("DATA_SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Datatable)
                    .IsRequired()
                    .HasColumnName("DATATABLE")
                    .HasMaxLength(50);

                entity.Property(e => e.InitailCatalog)
                    .IsRequired()
                    .HasColumnName("INITAIL_CATALOG")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LatestCheck)
                    .HasColumnName("LATEST_CHECK")
                    .HasColumnType("datetime");

                entity.Property(e => e.Password)
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys8>(entity =>
            {
                entity.HasKey(e => e.Comp)
                    .HasName("PK_U_SYS8_1");

                entity.ToTable("U_SYS8");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Maxdays).HasColumnName("MAXDAYS");

                entity.Property(e => e.Month01day1)
                    .HasColumnName("MONTH01DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day2)
                    .HasColumnName("MONTH01DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day3)
                    .HasColumnName("MONTH01DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day4)
                    .HasColumnName("MONTH01DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day5)
                    .HasColumnName("MONTH01DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day1)
                    .HasColumnName("MONTH02DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day2)
                    .HasColumnName("MONTH02DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day3)
                    .HasColumnName("MONTH02DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day4)
                    .HasColumnName("MONTH02DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day5)
                    .HasColumnName("MONTH02DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day1)
                    .HasColumnName("MONTH03DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day2)
                    .HasColumnName("MONTH03DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day3)
                    .HasColumnName("MONTH03DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day4)
                    .HasColumnName("MONTH03DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day5)
                    .HasColumnName("MONTH03DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day1)
                    .HasColumnName("MONTH04DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day2)
                    .HasColumnName("MONTH04DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day3)
                    .HasColumnName("MONTH04DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day4)
                    .HasColumnName("MONTH04DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day5)
                    .HasColumnName("MONTH04DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day1)
                    .HasColumnName("MONTH05DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day2)
                    .HasColumnName("MONTH05DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day3)
                    .HasColumnName("MONTH05DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day4)
                    .HasColumnName("MONTH05DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day5)
                    .HasColumnName("MONTH05DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day1)
                    .HasColumnName("MONTH06DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day2)
                    .HasColumnName("MONTH06DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day3)
                    .HasColumnName("MONTH06DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day4)
                    .HasColumnName("MONTH06DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day5)
                    .HasColumnName("MONTH06DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day1)
                    .HasColumnName("MONTH07DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day2)
                    .HasColumnName("MONTH07DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day3)
                    .HasColumnName("MONTH07DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day4)
                    .HasColumnName("MONTH07DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day5)
                    .HasColumnName("MONTH07DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day1)
                    .HasColumnName("MONTH08DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day2)
                    .HasColumnName("MONTH08DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day3)
                    .HasColumnName("MONTH08DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day4)
                    .HasColumnName("MONTH08DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day5)
                    .HasColumnName("MONTH08DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day1)
                    .HasColumnName("MONTH09DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day2)
                    .HasColumnName("MONTH09DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day3)
                    .HasColumnName("MONTH09DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day4)
                    .HasColumnName("MONTH09DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day5)
                    .HasColumnName("MONTH09DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day1)
                    .HasColumnName("MONTH10DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day2)
                    .HasColumnName("MONTH10DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day3)
                    .HasColumnName("MONTH10DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day4)
                    .HasColumnName("MONTH10DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day5)
                    .HasColumnName("MONTH10DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day1)
                    .HasColumnName("MONTH11DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day2)
                    .HasColumnName("MONTH11DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day3)
                    .HasColumnName("MONTH11DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day4)
                    .HasColumnName("MONTH11DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day5)
                    .HasColumnName("MONTH11DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day1)
                    .HasColumnName("MONTH12DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day2)
                    .HasColumnName("MONTH12DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day3)
                    .HasColumnName("MONTH12DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day4)
                    .HasColumnName("MONTH12DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day5)
                    .HasColumnName("MONTH12DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nextyearday)
                    .HasColumnName("NEXTYEARDAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specialcaltype).HasColumnName("SPECIALCALTYPE");

                entity.Property(e => e.Vacationdays01)
                    .HasColumnName("VACATIONDAYS01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays02)
                    .HasColumnName("VACATIONDAYS02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays03)
                    .HasColumnName("VACATIONDAYS03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays04)
                    .HasColumnName("VACATIONDAYS04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays05)
                    .HasColumnName("VACATIONDAYS05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year01)
                    .HasColumnName("YEAR01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year02)
                    .HasColumnName("YEAR02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year03)
                    .HasColumnName("YEAR03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year04)
                    .HasColumnName("YEAR04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year05)
                    .HasColumnName("YEAR05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year0efftype1).HasColumnName("YEAR0EFFTYPE1");

                entity.Property(e => e.Year0efftype2).HasColumnName("YEAR0EFFTYPE2");

                entity.Property(e => e.Year0efftype3).HasColumnName("YEAR0EFFTYPE3");

                entity.Property(e => e.Year0efftype4).HasColumnName("YEAR0EFFTYPE4");

                entity.Property(e => e.Year0efftype5).HasColumnName("YEAR0EFFTYPE5");

                entity.Property(e => e.Year0type1).HasColumnName("YEAR0TYPE1");

                entity.Property(e => e.Year0type2).HasColumnName("YEAR0TYPE2");

                entity.Property(e => e.Year0type3).HasColumnName("YEAR0TYPE3");

                entity.Property(e => e.Year0type4).HasColumnName("YEAR0TYPE4");

                entity.Property(e => e.Year0type5).HasColumnName("YEAR0TYPE5");

                entity.Property(e => e.Year11)
                    .HasColumnName("YEAR11")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year12)
                    .HasColumnName("YEAR12")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year21)
                    .HasColumnName("YEAR21")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year22)
                    .HasColumnName("YEAR22")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year31)
                    .HasColumnName("YEAR31")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year32)
                    .HasColumnName("YEAR32")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year41)
                    .HasColumnName("YEAR41")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year42)
                    .HasColumnName("YEAR42")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year51)
                    .HasColumnName("YEAR51")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year52)
                    .HasColumnName("YEAR52")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year61)
                    .HasColumnName("YEAR61")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yearbase).HasColumnName("YEARBASE");
            });

            modelBuilder.Entity<USys9>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS9");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Addupamt01)
                    .HasColumnName("ADDUPAMT01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt02)
                    .HasColumnName("ADDUPAMT02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt03)
                    .HasColumnName("ADDUPAMT03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt04)
                    .HasColumnName("ADDUPAMT04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt05)
                    .HasColumnName("ADDUPAMT05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Entryday)
                    .HasColumnName("ENTRYDAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fixtaxrate)
                    .HasColumnName("FIXTAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Forsalbasd)
                    .HasColumnName("FORSALBASD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate01)
                    .HasColumnName("FORTAXRATE01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate02)
                    .HasColumnName("FORTAXRATE02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate03)
                    .HasColumnName("FORTAXRATE03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt01)
                    .HasColumnName("NETTAXAMT01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt02)
                    .HasColumnName("NETTAXAMT02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt03)
                    .HasColumnName("NETTAXAMT03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt04)
                    .HasColumnName("NETTAXAMT04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt05)
                    .HasColumnName("NETTAXAMT05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt06)
                    .HasColumnName("NETTAXAMT06")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt07)
                    .HasColumnName("NETTAXAMT07")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt08)
                    .HasColumnName("NETTAXAMT08")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt09)
                    .HasColumnName("NETTAXAMT09")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt10)
                    .HasColumnName("NETTAXAMT10")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate01)
                    .HasColumnName("NETTAXRATE01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate02)
                    .HasColumnName("NETTAXRATE02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate03)
                    .HasColumnName("NETTAXRATE03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate04)
                    .HasColumnName("NETTAXRATE04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate05)
                    .HasColumnName("NETTAXRATE05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Salarydedutamt)
                    .HasColumnName("SALARYDEDUTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Stdeduetamtmar)
                    .HasColumnName("STDEDUETAMTMAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Stdeduetamtnmar)
                    .HasColumnName("STDEDUETAMTNMAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxamtamonth)
                    .HasColumnName("TAXAMTAMONTH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxfree70down)
                    .HasColumnName("TAXFREE70DOWN")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxfree70up)
                    .HasColumnName("TAXFREE70UP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxsalcode)
                    .HasColumnName("TAXSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxtype).HasColumnName("TAXTYPE");
            });

            modelBuilder.Entity<UTts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_TTS");

                entity.HasIndex(e => e.OpCode)
                    .HasName("OP_CODE");

                entity.HasIndex(e => e.PrgName)
                    .HasName("IX_U_TTS");

                entity.Property(e => e.Cont)
                    .IsRequired()
                    .HasColumnName("CONT")
                    .HasColumnType("text");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyTime)
                    .IsRequired()
                    .HasColumnName("KEY_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.OpCode).HasColumnName("OP_CODE");

                entity.Property(e => e.PrgName)
                    .IsRequired()
                    .HasColumnName("PRG_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UUser>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.System })
                    .HasName("PK_U_USER_1");

                entity.ToTable("U_USER");

                entity.HasIndex(e => e.System)
                    .HasName("SYSTEM");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_U_USER");

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.System)
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.Admin).HasColumnName("ADMIN");

                entity.Property(e => e.EMail)
                    .IsRequired()
                    .HasColumnName("E_MAIL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangsuper).HasColumnName("MANGSUPER");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(500);

                entity.Property(e => e.Procsuper).HasColumnName("PROCSUPER");

                entity.Property(e => e.Super).HasColumnName("SUPER");

                entity.Property(e => e.Workadr)
                    .IsRequired()
                    .HasColumnName("WORKADR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UUsercomp>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Company })
                    .HasName("PK_DATAGG2_1");

                entity.ToTable("U_USERCOMP");

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.HasOne(d => d.CompanyNavigation)
                    .WithMany(p => p.UUsercomp)
                    .HasForeignKey(d => d.Company)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_U_USERCOMP_COMP");
            });

            modelBuilder.Entity<UWkid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_WKID");

                entity.HasIndex(e => e.UserId)
                    .HasName("USER_ID");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WorkCode)
                    .IsRequired()
                    .HasColumnName("WORK_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UNIT");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<UpBaseRecord>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Updescr)
                    .IsRequired()
                    .HasColumnName("UPDESCR")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<Upfile>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("UPFILE");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Filedesc)
                    .HasColumnName("FILEDESC")
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Filesize)
                    .IsRequired()
                    .HasColumnName("FILESIZE")
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Filetype)
                    .IsRequired()
                    .HasColumnName("FILETYPE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mangcheck).HasColumnName("mangcheck");

                entity.Property(e => e.Newsfileid)
                    .IsRequired()
                    .HasColumnName("NEWSFILEID")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Serverfilename)
                    .IsRequired()
                    .HasColumnName("SERVERFILENAME")
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Upfiledate)
                    .HasColumnName("UPFILEDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Upfilename)
                    .IsRequired()
                    .HasColumnName("UPFILENAME")
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Uptype)
                    .IsRequired()
                    .HasColumnName("UPTYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Uptype>(entity =>
            {
                entity.HasKey(e => e.Uptype1);

                entity.ToTable("UPTYPE");

                entity.Property(e => e.Uptype1)
                    .HasColumnName("UPTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.UpName)
                    .IsRequired()
                    .HasColumnName("UP_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UserAcmachines>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Deviceid })
                    .HasName("UserAC_Machines");

                entity.ToTable("UserACMachines");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<UserAcprivilege>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.DeviceId })
                    .HasName("pk_privilege");

                entity.ToTable("UserACPrivilege");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.DeviceId).HasColumnName("DeviceID");

                entity.Property(e => e.AcgroupId).HasColumnName("ACGroupID");

                entity.Property(e => e.Verifystyle).HasColumnName("verifystyle");
            });

            modelBuilder.Entity<UserDefine>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime1)
                    .HasColumnName("DATETIME1")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime10)
                    .HasColumnName("DATETIME10")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime2)
                    .HasColumnName("DATETIME2")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime3)
                    .HasColumnName("DATETIME3")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime4)
                    .HasColumnName("DATETIME4")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime5)
                    .HasColumnName("DATETIME5")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime6)
                    .HasColumnName("DATETIME6")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime7)
                    .HasColumnName("DATETIME7")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime8)
                    .HasColumnName("DATETIME8")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime9)
                    .HasColumnName("DATETIME9")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Decimal1)
                    .HasColumnName("DECIMAL1")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal10)
                    .HasColumnName("DECIMAL10")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal2)
                    .HasColumnName("DECIMAL2")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal3)
                    .HasColumnName("DECIMAL3")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal4)
                    .HasColumnName("DECIMAL4")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal5)
                    .HasColumnName("DECIMAL5")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal6)
                    .HasColumnName("DECIMAL6")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal7)
                    .HasColumnName("DECIMAL7")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal8)
                    .HasColumnName("DECIMAL8")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal9)
                    .HasColumnName("DECIMAL9")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Nvarchar1)
                    .IsRequired()
                    .HasColumnName("NVARCHAR1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar10)
                    .IsRequired()
                    .HasColumnName("NVARCHAR10")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar2)
                    .IsRequired()
                    .HasColumnName("NVARCHAR2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar3)
                    .IsRequired()
                    .HasColumnName("NVARCHAR3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar4)
                    .IsRequired()
                    .HasColumnName("NVARCHAR4")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar5)
                    .IsRequired()
                    .HasColumnName("NVARCHAR5")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar6)
                    .IsRequired()
                    .HasColumnName("NVARCHAR6")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar7)
                    .IsRequired()
                    .HasColumnName("NVARCHAR7")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar8)
                    .IsRequired()
                    .HasColumnName("NVARCHAR8")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar9)
                    .IsRequired()
                    .HasColumnName("NVARCHAR9")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<UserFoodCardNumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserFoodCardNumber");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UserMessage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserMessage");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNoDisp)
                    .HasColumnName("D_NO_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UserOfRun>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.NumOfRunId, e.Startdate, e.Enddate })
                    .HasName("USER_ST_NUM");

                entity.ToTable("USER_OF_RUN");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.NumOfRunId).HasColumnName("NUM_OF_RUN_ID");

                entity.Property(e => e.Startdate)
                    .HasColumnName("STARTDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900-1-1')");

                entity.Property(e => e.Enddate)
                    .HasColumnName("ENDDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2099-12-31')");

                entity.Property(e => e.IsnotofRun)
                    .HasColumnName("ISNOTOF_RUN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderRun).HasColumnName("ORDER_RUN");
            });

            modelBuilder.Entity<UserSpeday>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.Startspecday, e.Dateid })
                    .HasName("USER_SEP");

                entity.ToTable("USER_SPEDAY");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.Startspecday)
                    .HasColumnName("STARTSPECDAY")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900-1-1')");

                entity.Property(e => e.Dateid)
                    .HasColumnName("DATEID")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Date)
                    .HasColumnName("DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Endspecday)
                    .HasColumnName("ENDSPECDAY")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2099-12-31')");

                entity.Property(e => e.Yuanying)
                    .HasColumnName("YUANYING")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserTempSch>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.Cometime, e.Leavetime })
                    .HasName("USER_TEMP");

                entity.ToTable("USER_TEMP_SCH");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.Cometime)
                    .HasColumnName("COMETIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Leavetime)
                    .HasColumnName("LEAVETIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Flag)
                    .HasColumnName("FLAG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Overtime).HasColumnName("OVERTIME");

                entity.Property(e => e.Schclassid)
                    .HasColumnName("SCHCLASSID")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Type)
                    .HasColumnName("TYPE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<UserUpdates>(entity =>
            {
                entity.HasKey(e => e.UpdateId)
                    .HasName("PK__UserUpda__7A0CF3C5501CB9E2");

                entity.Property(e => e.BadgeNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserUsedSclasses>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.SchId })
                    .HasName("USER_USED_SCL");

                entity.ToTable("UserUsedSClasses");
            });

            modelBuilder.Entity<Userdefinegroup>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("USERDEFINEGROUP");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Columncnt).HasColumnName("COLUMNCNT");

                entity.Property(e => e.Itemsheight).HasColumnName("ITEMSHEIGHT");

                entity.Property(e => e.Itemswidth).HasColumnName("ITEMSWIDTH");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.Property(e => e.Rowcnt).HasColumnName("ROWCNT");

                entity.Property(e => e.Userdefinegroupid).HasColumnName("USERDEFINEGROUPID");

                entity.Property(e => e.Userdefinegroupname)
                    .HasColumnName("USERDEFINEGROUPNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Userdefinelayout>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("USERDEFINELAYOUT");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Anchor)
                    .HasColumnName("ANCHOR")
                    .HasMaxLength(50);

                entity.Property(e => e.Columnspan).HasColumnName("COLUMNSPAN");

                entity.Property(e => e.Controlid).HasColumnName("CONTROLID");

                entity.Property(e => e.Dock)
                    .HasColumnName("DOCK")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Layoutcolumn).HasColumnName("LAYOUTCOLUMN");

                entity.Property(e => e.Layoutrow).HasColumnName("LAYOUTROW");

                entity.Property(e => e.Rowspan).HasColumnName("ROWSPAN");

                entity.Property(e => e.Tag).HasColumnName("TAG");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Userdefinegroupid).HasColumnName("USERDEFINEGROUPID");

                entity.Property(e => e.Visible).HasColumnName("VISIBLE");
            });

            modelBuilder.Entity<Userdefinesource>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("USERDEFINESOURCE");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Displaymember)
                    .HasColumnName("DISPLAYMEMBER")
                    .HasMaxLength(100);

                entity.Property(e => e.Sourceid).HasColumnName("SOURCEID");

                entity.Property(e => e.Sourcename)
                    .IsRequired()
                    .HasColumnName("SOURCENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sourcescript).HasColumnName("SOURCESCRIPT");

                entity.Property(e => e.Sourcetype)
                    .IsRequired()
                    .HasColumnName("SOURCETYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Valuemember)
                    .HasColumnName("VALUEMEMBER")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Userdefinevalue>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("USERDEFINEVALUE");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Controlid).HasColumnName("CONTROLID");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Sourceid).HasColumnName("SOURCEID");

                entity.Property(e => e.Value)
                    .HasColumnName("VALUE")
                    .HasMaxLength(50);

                entity.Property(e => e.Valuetype)
                    .IsRequired()
                    .HasColumnName("VALUETYPE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Userinfo>(entity =>
            {
                entity.HasKey(e => e.Userid)
                    .HasName("USERIDS");

                entity.ToTable("USERINFO");

                entity.HasIndex(e => e.Badgenumber)
                    .HasName("BADGENUMBER")
                    .IsUnique();

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.AccGroup).HasDefaultValueSql("((1))");

                entity.Property(e => e.Att)
                    .HasColumnName("ATT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoSchPlan).HasDefaultValueSql("((1))");

                entity.Property(e => e.Badgenumber)
                    .IsRequired()
                    .HasColumnName("BADGENUMBER")
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Birthday)
                    .HasColumnName("BIRTHDAY")
                    .HasColumnType("datetime");

                entity.Property(e => e.CardNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasColumnName("CITY")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Defaultdeptid)
                    .HasColumnName("DEFAULTDEPTID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Emprivilege)
                    .HasColumnName("EMPRIVILEGE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Expires).HasDefaultValueSql("((0))");

                entity.Property(e => e.FaceGroup).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fphone)
                    .HasColumnName("FPHONE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasColumnName("GENDER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Hiredday)
                    .HasColumnName("HIREDDAY")
                    .HasColumnType("datetime");

                entity.Property(e => e.Holiday)
                    .HasColumnName("HOLIDAY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InheritDeptRule).HasDefaultValueSql("((1))");

                entity.Property(e => e.InheritDeptSch).HasDefaultValueSql("((1))");

                entity.Property(e => e.InheritDeptSchClass).HasDefaultValueSql("((1))");

                entity.Property(e => e.Inlate)
                    .HasColumnName("INLATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Lunchduration)
                    .HasColumnName("LUNCHDURATION")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MinAutoSchInterval).HasDefaultValueSql("((24))");

                entity.Property(e => e.Minzu)
                    .HasColumnName("MINZU")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.MverifyPass)
                    .HasColumnName("MVerifyPass")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Notes).HasColumnType("image");

                entity.Property(e => e.Ophone)
                    .HasColumnName("OPHONE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Outearly)
                    .HasColumnName("OUTEARLY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Overtime)
                    .HasColumnName("OVERTIME")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Pager)
                    .HasColumnName("PAGER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("PHOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Privilege)
                    .HasColumnName("privilege")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RegisterOt)
                    .HasColumnName("RegisterOT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Securityflags).HasColumnName("SECURITYFLAGS");

                entity.Property(e => e.Sep)
                    .HasColumnName("SEP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Ssn)
                    .HasColumnName("SSN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasColumnName("STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Street)
                    .HasColumnName("STREET")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TimeZone1).HasDefaultValueSql("((1))");

                entity.Property(e => e.TimeZone2).HasDefaultValueSql("((0))");

                entity.Property(e => e.TimeZone3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Title)
                    .HasColumnName("TITLE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UseAccGroupTz)
                    .HasColumnName("UseAccGroupTZ")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ValidCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValidTimeBegin).HasColumnType("datetime");

                entity.Property(e => e.ValidTimeEnd).HasColumnType("datetime");

                entity.Property(e => e.Verificationmethod).HasColumnName("VERIFICATIONMETHOD");

                entity.Property(e => e.VerifyCode).HasDefaultValueSql("((0))");

                entity.Property(e => e.Zip)
                    .HasColumnName("ZIP")
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UsersMachines>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Deviceid).HasColumnName("DEVICEID");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Userid).HasColumnName("USERID");
            });

            modelBuilder.Entity<VBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE");

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.NameP)
                    .IsRequired()
                    .HasColumnName("NAME_P")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_dept");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<VDeptTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_dept_test");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNameList)
                    .IsRequired()
                    .HasColumnName("D_NAME_List")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptGroup)
                    .HasColumnName("DEPT_GROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptMang)
                    .IsRequired()
                    .HasColumnName("deptMang")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptTree)
                    .HasColumnName("DEPT_TREE")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel10)
                    .IsRequired()
                    .HasColumnName("deptlevel10")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel20)
                    .IsRequired()
                    .HasColumnName("deptlevel20")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel30)
                    .IsRequired()
                    .HasColumnName("deptlevel30")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel40)
                    .IsRequired()
                    .HasColumnName("deptlevel40")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel50)
                    .IsRequired()
                    .HasColumnName("deptlevel50")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel60)
                    .IsRequired()
                    .HasColumnName("deptlevel60")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel70)
                    .IsRequired()
                    .HasColumnName("deptlevel70")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel80)
                    .IsRequired()
                    .HasColumnName("deptlevel80")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VDepta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_depta");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(102);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<VDeptaTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_depta_test");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNameList)
                    .IsRequired()
                    .HasColumnName("D_NAME_List")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptMang)
                    .IsRequired()
                    .HasColumnName("deptMang")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptTree)
                    .HasColumnName("DEPT_TREE")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel10)
                    .IsRequired()
                    .HasColumnName("deptlevel10")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel20)
                    .IsRequired()
                    .HasColumnName("deptlevel20")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel30)
                    .IsRequired()
                    .HasColumnName("deptlevel30")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel40)
                    .IsRequired()
                    .HasColumnName("deptlevel40")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel50)
                    .IsRequired()
                    .HasColumnName("deptlevel50")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel60)
                    .IsRequired()
                    .HasColumnName("deptlevel60")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel70)
                    .IsRequired()
                    .HasColumnName("deptlevel70")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel80)
                    .IsRequired()
                    .HasColumnName("deptlevel80")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VGetInsurCnCodeByWorkcd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_GetInsurCnCodeByWorkcd");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(152);
            });

            modelBuilder.Entity<ViewAbswriteoff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_ABSWRITEOFF");

                entity.Property(e => e.假別).HasMaxLength(50);

                entity.Property(e => e.假別代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.假別名稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.單位)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.屬性)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.扣款金額).HasMaxLength(50);

                entity.Property(e => e.班別).HasMaxLength(50);

                entity.Property(e => e.班別名稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.登錄日).HasColumnType("datetime");

                entity.Property(e => e.登錄者)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.編號).HasMaxLength(50);

                entity.Property(e => e.計薪年月)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.請假日期).HasColumnType("datetime");

                entity.Property(e => e.請假時數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.請假起)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.請假迄)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Dept");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptGroup)
                    .HasColumnName("DEPT_GROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptList)
                    .IsRequired()
                    .HasColumnName("deptList")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Sapcode)
                    .IsRequired()
                    .HasColumnName("SAPCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.管理中心代码).HasMaxLength(50);

                entity.Property(e => e.管理中心名称).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDepta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_DEPTA");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptGroup)
                    .HasColumnName("DEPT_GROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptList)
                    .IsRequired()
                    .HasColumnName("deptList")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.管理中心代码).HasMaxLength(50);

                entity.Property(e => e.管理中心名称).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewEmpInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_EmpInfo");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Compname)
                    .IsRequired()
                    .HasColumnName("COMPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptAcode)
                    .HasColumnName("deptACode")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptAlist)
                    .HasColumnName("deptAList")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptAmangName)
                    .IsRequired()
                    .HasColumnName("deptAMangName")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptAmangNobr)
                    .HasColumnName("deptAMangNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptAname)
                    .HasColumnName("deptAName")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptList)
                    .HasColumnName("deptList")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .HasColumnName("DEPT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel00)
                    .IsRequired()
                    .HasColumnName("deptlevel00")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel10)
                    .IsRequired()
                    .HasColumnName("deptlevel10")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel20)
                    .IsRequired()
                    .HasColumnName("deptlevel20")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel30)
                    .IsRequired()
                    .HasColumnName("deptlevel30")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel40)
                    .IsRequired()
                    .HasColumnName("deptlevel40")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel50)
                    .IsRequired()
                    .HasColumnName("deptlevel50")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel60)
                    .IsRequired()
                    .HasColumnName("deptlevel60")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel70)
                    .IsRequired()
                    .HasColumnName("deptlevel70")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel80)
                    .IsRequired()
                    .HasColumnName("deptlevel80")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptsCode)
                    .IsRequired()
                    .HasColumnName("depts_code")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptsName)
                    .HasColumnName("depts_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Driver)
                    .IsRequired()
                    .HasColumnName("DRIVER")
                    .HasMaxLength(50);

                entity.Property(e => e.Effs)
                    .IsRequired()
                    .HasColumnName("EFFS")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.InsgType)
                    .HasColumnName("INSG_TYPE")
                    .HasMaxLength(2);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobl)
                    .IsRequired()
                    .HasColumnName("JOBL")
                    .HasMaxLength(50);

                entity.Property(e => e.JoblName)
                    .HasColumnName("JOBL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobs)
                    .IsRequired()
                    .HasColumnName("JOBS")
                    .HasMaxLength(50);

                entity.Property(e => e.JobsName)
                    .HasColumnName("JOBS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangName)
                    .HasColumnName("mang_name")
                    .HasMaxLength(50);

                entity.Property(e => e.MangNobr)
                    .HasColumnName("mang_nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.MiJobs)
                    .IsRequired()
                    .HasColumnName("mi_jobs")
                    .HasMaxLength(50);

                entity.Property(e => e.MiJobsName)
                    .IsRequired()
                    .HasColumnName("mi_jobs_name")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Nvarchar6)
                    .IsRequired()
                    .HasColumnName("NVARCHAR6")
                    .HasMaxLength(50);

                entity.Property(e => e.Nvarchar7)
                    .IsRequired()
                    .HasColumnName("NVARCHAR7")
                    .HasMaxLength(50);

                entity.Property(e => e.Nvarchar8)
                    .IsRequired()
                    .HasColumnName("NVARCHAR8")
                    .HasMaxLength(50);

                entity.Property(e => e.Nvarchar9)
                    .IsRequired()
                    .HasColumnName("NVARCHAR9")
                    .HasMaxLength(50);

                entity.Property(e => e.Oudt)
                    .HasColumnName("OUDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sapcode)
                    .IsRequired()
                    .HasColumnName("SAPCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(4);

                entity.Property(e => e.WorkAddr)
                    .HasColumnName("WORK_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Workcd)
                    .IsRequired()
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewJobs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_JOBS");

                entity.Property(e => e.JobCate)
                    .HasColumnName("JOB_CATE")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobs)
                    .IsRequired()
                    .HasColumnName("JOBS")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewRbaOt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_RBA_OT");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNoDisp)
                    .HasColumnName("D_NO_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.OtMax)
                    .HasColumnName("OT_MAX")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ViewRotechg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_ROTECHG");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.班別代碼).HasMaxLength(50);

                entity.Property(e => e.班別名稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.登錄日期).HasColumnType("datetime");

                entity.Property(e => e.登錄者)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.調班日期).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSalarycorrection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_SALARYCORRECTION");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.主鍵)
                    .IsRequired()
                    .HasMaxLength(152);

                entity.Property(e => e.公司編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.出勤日期起).HasColumnType("datetime");

                entity.Property(e => e.出勤日期迄).HasColumnType("datetime");

                entity.Property(e => e.到職日).HasColumnType("datetime");

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.實付薪資).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.性別)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.應付薪資).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.應發薪資).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.期別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動狀態)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.自願性離職)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.計薪年月)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.計薪日期起).HasColumnType("datetime");

                entity.Property(e => e.計薪日期迄).HasColumnType("datetime");

                entity.Property(e => e.離職日).HasColumnType("datetime");
            });

            modelBuilder.Entity<Wage>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Seq, e.Nobr, e.Saladr });

                entity.ToTable("WAGE");

                entity.HasIndex(e => e.Adate)
                    .HasName("ADATE");

                entity.HasIndex(e => e.Nobr)
                    .HasName("IX_WAGE_2");

                entity.HasIndex(e => new { e.Yymm, e.Seq })
                    .HasName("IX_WAGE");

                entity.HasIndex(e => new { e.Nobr, e.Yymm, e.Seq, e.Adate })
                    .HasName("IX_WAGE_1");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AttDateB)
                    .HasColumnName("ATT_DATE_B")
                    .HasColumnType("datetime");

                entity.Property(e => e.AttDateE)
                    .HasColumnName("ATT_DATE_E")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bankno)
                    .IsRequired()
                    .HasColumnName("BANKNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cash).HasColumnName("CASH");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Currency)
                    .HasColumnName("CURRENCY")
                    .HasMaxLength(50);

                entity.Property(e => e.DateB)
                    .HasColumnName("DATE_B")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateE)
                    .HasColumnName("DATE_E")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Deduct)
                    .HasColumnName("DEDUCT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exchange)
                    .HasColumnName("EXCHANGE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(2000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Oudt)
                    .HasColumnName("OUDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.TaxSubsidy).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkDays)
                    .HasColumnName("WK_DAYS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<WageB>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Seq, e.Nobr, e.Saladr });

                entity.ToTable("WAGE_B");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AttDateB)
                    .HasColumnName("ATT_DATE_B")
                    .HasColumnType("datetime");

                entity.Property(e => e.AttDateE)
                    .HasColumnName("ATT_DATE_E")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bankno)
                    .IsRequired()
                    .HasColumnName("BANKNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cash).HasColumnName("CASH");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Currency)
                    .HasColumnName("CURRENCY")
                    .HasMaxLength(50);

                entity.Property(e => e.DateB)
                    .HasColumnName("DATE_B")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateE)
                    .HasColumnName("DATE_E")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Deduct)
                    .HasColumnName("DEDUCT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exchange)
                    .HasColumnName("EXCHANGE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(2000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Oudt)
                    .HasColumnName("OUDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxsubsidy)
                    .HasColumnName("TAXSUBSIDY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkDays)
                    .HasColumnName("WK_DAYS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Waged>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq, e.SalCode, e.Saladr });

                entity.ToTable("WAGED");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.SalCode)
                    .HasName("SAL_CODE");

                entity.HasIndex(e => new { e.Yymm, e.Seq })
                    .HasName("YY_SEQ");

                entity.HasIndex(e => new { e.Nobr, e.Yymm, e.Seq, e.SalCode })
                    .HasName("IX_WAGED");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<WagedB>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq, e.SalCode, e.Saladr });

                entity.ToTable("WAGED_B");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<WagedSal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WagedSal");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Flag)
                    .IsRequired()
                    .HasColumnName("FLAG")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalEname)
                    .IsRequired()
                    .HasColumnName("SAL_ENAME")
                    .HasMaxLength(60);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Salattr)
                    .IsRequired()
                    .HasColumnName("SALATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Tax).HasColumnName("TAX");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Wagedd>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq, e.Acno });

                entity.ToTable("WAGEDD");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Acno)
                    .HasColumnName("ACNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Wagesos>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WAGESOS");

                entity.Property(e => e.Field)
                    .IsRequired()
                    .HasColumnName("FIELD")
                    .HasMaxLength(50);

                entity.Property(e => e.SosDescr)
                    .IsRequired()
                    .HasColumnName("SOS_DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.SosId)
                    .IsRequired()
                    .HasColumnName("SOS_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Subsystem)
                    .IsRequired()
                    .HasColumnName("SUBSYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Wbsptyp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WBSPTYP");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Wcode>(entity =>
            {
                entity.HasKey(e => e.WCode1);

                entity.ToTable("WCODE");

                entity.HasIndex(e => e.WCode1)
                    .HasName("W_CODE");

                entity.Property(e => e.WCode1)
                    .HasColumnName("W_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.WName)
                    .IsRequired()
                    .HasColumnName("W_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Websalbasd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("websalbasd");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.KeyDate)
                    .HasColumnName("key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("key_man")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("sal_code")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("sal_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Welf>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq, e.SalCode });

                entity.ToTable("WELF");

                entity.HasIndex(e => e.Format)
                    .HasName("FORMAT");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.SalCode)
                    .HasName("SAL_CODE");

                entity.HasIndex(e => e.TrType)
                    .HasName("TR_TYPE");

                entity.HasIndex(e => new { e.Yymm, e.Seq })
                    .HasName("YYMM");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DAmt)
                    .HasColumnName("D_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasColumnName("TR_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<WfAppShiftShort>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wfAppShiftShort");

                entity.Property(e => e.BAuth).HasColumnName("bAuth");

                entity.Property(e => e.BSign).HasColumnName("bSign");

                entity.Property(e => e.DDateA)
                    .HasColumnName("dDateA")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.IdProcess).HasColumnName("idProcess");

                entity.Property(e => e.SDeptA)
                    .HasColumnName("sDeptA")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptB)
                    .HasColumnName("sDeptB")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptNameA)
                    .HasColumnName("sDeptNameA")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptNameB)
                    .HasColumnName("sDeptNameB")
                    .HasMaxLength(50);

                entity.Property(e => e.SDia)
                    .HasColumnName("sDIA")
                    .HasMaxLength(50);

                entity.Property(e => e.SDib)
                    .HasColumnName("sDIB")
                    .HasMaxLength(50);

                entity.Property(e => e.SEmpcdA)
                    .HasColumnName("sEmpcdA")
                    .HasMaxLength(50);

                entity.Property(e => e.SEmpcdB)
                    .HasColumnName("sEmpcdB")
                    .HasMaxLength(50);

                entity.Property(e => e.SEmpcdNameA)
                    .HasColumnName("sEmpcdNameA")
                    .HasMaxLength(50);

                entity.Property(e => e.SEmpcdNameB)
                    .HasColumnName("sEmpcdNameB")
                    .HasMaxLength(50);

                entity.Property(e => e.SFormCode)
                    .IsRequired()
                    .HasColumnName("sFormCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SGuid)
                    .HasColumnName("sGuid")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobA)
                    .HasColumnName("sJobA")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobB)
                    .HasColumnName("sJobB")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobNameA)
                    .HasColumnName("sJobNameA")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobNameB)
                    .HasColumnName("sJobNameB")
                    .HasMaxLength(50);

                entity.Property(e => e.SJoblA)
                    .HasColumnName("sJoblA")
                    .HasMaxLength(50);

                entity.Property(e => e.SJoblB)
                    .HasColumnName("sJoblB")
                    .HasMaxLength(50);

                entity.Property(e => e.SJoblNameA)
                    .HasColumnName("sJoblNameA")
                    .HasMaxLength(50);

                entity.Property(e => e.SJoblNameB)
                    .HasColumnName("sJoblNameB")
                    .HasMaxLength(50);

                entity.Property(e => e.SManage)
                    .HasColumnName("sManage")
                    .HasMaxLength(50);

                entity.Property(e => e.SNameA)
                    .HasColumnName("sNameA")
                    .HasMaxLength(50);

                entity.Property(e => e.SNameB)
                    .HasColumnName("sNameB")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .IsRequired()
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobrA)
                    .IsRequired()
                    .HasColumnName("sNobrA")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobrB)
                    .IsRequired()
                    .HasColumnName("sNobrB")
                    .HasMaxLength(50);

                entity.Property(e => e.SNote)
                    .HasColumnName("sNote")
                    .HasMaxLength(2000);

                entity.Property(e => e.SProcessId)
                    .IsRequired()
                    .HasColumnName("sProcessID")
                    .HasMaxLength(50);

                entity.Property(e => e.SReserve1)
                    .HasColumnName("sReserve1")
                    .HasMaxLength(2000);

                entity.Property(e => e.SReserve2)
                    .HasColumnName("sReserve2")
                    .HasMaxLength(2000);

                entity.Property(e => e.SReserve3)
                    .HasColumnName("sReserve3")
                    .HasMaxLength(2000);

                entity.Property(e => e.SReserve4)
                    .HasColumnName("sReserve4")
                    .HasMaxLength(2000);

                entity.Property(e => e.SRoleA)
                    .HasColumnName("sRoleA")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoleB)
                    .HasColumnName("sRoleB")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteA)
                    .HasColumnName("sRoteA")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteB)
                    .HasColumnName("sRoteB")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteNameA)
                    .HasColumnName("sRoteNameA")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteNameB)
                    .HasColumnName("sRoteNameB")
                    .HasMaxLength(50);

                entity.Property(e => e.SState)
                    .IsRequired()
                    .HasColumnName("sState")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<WorkadrSalary>(entity =>
            {
                entity.HasKey(e => new { e.WorkCode, e.Adate });

                entity.ToTable("WORKADR_SALARY");

                entity.Property(e => e.WorkCode)
                    .HasColumnName("WORK_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DailySalary)
                    .HasColumnName("Daily_Salary")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HourSalary)
                    .HasColumnName("Hour_Salary")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(1000);

                entity.Property(e => e.MonthSalary)
                    .HasColumnName("Month_Salary")
                    .HasColumnType("decimal(14, 4)");
            });

            modelBuilder.Entity<Workcd>(entity =>
            {
                entity.HasKey(e => e.WorkCode);

                entity.ToTable("WORKCD");

                entity.HasIndex(e => e.WorkAddr)
                    .HasName("IX_WORKCD");

                entity.Property(e => e.WorkCode)
                    .HasColumnName("WORK_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkAddr)
                    .IsRequired()
                    .HasColumnName("WORK_ADDR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Works>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Company, e.Bdate });

                entity.ToTable("WORKS");

                entity.HasIndex(e => e.Company)
                    .HasName("COMPANY");

                entity.HasIndex(e => e.Nobr)
                    .HasName("IX_WORKS");

                entity.HasIndex(e => e.Title)
                    .HasName("TITLE");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Addr)
                    .IsRequired()
                    .HasColumnName("ADDR")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DirTitle)
                    .IsRequired()
                    .HasColumnName("DIR_TITLE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.InCabinet).HasColumnName("IN_CABINET");

                entity.Property(e => e.InMark).HasColumnName("IN_MARK");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.People)
                    .HasColumnName("PEOPLE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SecTitle)
                    .IsRequired()
                    .HasColumnName("SEC_TITLE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelNo)
                    .IsRequired()
                    .HasColumnName("TEL_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("TITLE")
                    .HasMaxLength(50);

                entity.Property(e => e.TradeCode)
                    .IsRequired()
                    .HasColumnName("TRADE_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Volume)
                    .HasColumnName("VOLUME")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WorkId)
                    .HasColumnName("work_id")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.Works)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WORKS_BASE");
            });

            modelBuilder.Entity<YearHoliday>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Years });

                entity.ToTable("YEAR_HOLIDAY");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Years)
                    .HasColumnName("YEARS")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.BackDate)
                    .HasColumnName("BACK_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.GetDays)
                    .HasColumnName("GET_DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Note5)
                    .HasColumnName("NOTE5")
                    .HasMaxLength(50);

                entity.Property(e => e.Ntrans).HasColumnName("NTRANS");

                entity.Property(e => e.Ptrans).HasColumnName("PTRANS");

                entity.Property(e => e.StopDate)
                    .HasColumnName("STOP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.StopTimes).HasColumnName("STOP_TIMES");

                entity.Property(e => e.StopYears)
                    .HasColumnName("STOP_YEARS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.TotalYears)
                    .HasColumnName("TOTAL_YEARS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<YearRest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("YEAR_REST");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Yrermak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("YRERMAK");

                entity.HasIndex(e => e.Errmark)
                    .HasName("IX_YRERMAK");

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Errmark)
                    .IsRequired()
                    .HasColumnName("ERRMARK")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Yrerr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("YRERR");

                entity.HasIndex(e => e.Descr)
                    .HasName("DESCR");

                entity.HasIndex(e => e.ErrNote)
                    .HasName("ERR_NOTE");

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.ErrNote)
                    .IsRequired()
                    .HasColumnName("ERR_NOTE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Yrfomat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("YRFOMAT");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Yrformat>(entity =>
            {
                entity.HasKey(e => e.MFormat);

                entity.ToTable("YRFORMAT");

                entity.Property(e => e.MFormat)
                    .HasColumnName("M_FORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.Fixrate)
                    .HasColumnName("FIXRATE")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Incometype)
                    .IsRequired()
                    .HasColumnName("INCOMETYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.MFmtName)
                    .IsRequired()
                    .HasColumnName("M_FMT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Supplemax)
                    .HasColumnName("SUPPLEMAX")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Supplemin)
                    .HasColumnName("SUPPLEMIN")
                    .HasColumnType("decimal(14, 4)");
            });

            modelBuilder.Entity<Yrforsub>(entity =>
            {
                entity.HasKey(e => e.MForsub);

                entity.ToTable("YRFORSUB");

                entity.Property(e => e.MForsub)
                    .HasColumnName("M_FORSUB")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MFormat)
                    .IsRequired()
                    .HasColumnName("M_FORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.MSubName)
                    .IsRequired()
                    .HasColumnName("M_SUB_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Yrhsn>(entity =>
            {
                entity.HasKey(e => new { e.CoCtid, e.CoArid });

                entity.ToTable("YRHSN");

                entity.HasIndex(e => e.CoArid)
                    .HasName("CO_ARID");

                entity.HasIndex(e => e.CoCtid)
                    .HasName("CO_CTID");

                entity.Property(e => e.CoCtid)
                    .HasColumnName("CO_CTID")
                    .HasMaxLength(50);

                entity.Property(e => e.CoArid)
                    .HasColumnName("CO_ARID")
                    .HasMaxLength(50);

                entity.Property(e => e.HHsnName)
                    .IsRequired()
                    .HasColumnName("H_HSN_NAME")
                    .HasMaxLength(62);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Yrid>(entity =>
            {
                entity.HasKey(e => e.IdCode);

                entity.ToTable("YRID");

                entity.HasIndex(e => e.IdCode)
                    .HasName("ID_CODE");

                entity.Property(e => e.IdCode)
                    .HasColumnName("ID_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<Yrina>(entity =>
            {
                entity.HasKey(e => e.InaId);

                entity.ToTable("YRINA");

                entity.HasIndex(e => e.InaId)
                    .HasName("INA_ID");

                entity.Property(e => e.InaId)
                    .HasColumnName("INA_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InaName)
                    .IsRequired()
                    .HasColumnName("INA_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Yrinsur>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("YRINSUR");

                entity.HasIndex(e => e.FaIdno)
                    .HasName("FA_IDNO");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.HasIndex(e => e.Year)
                    .HasName("YEAR");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Equal).HasColumnName("EQUAL");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.RelGrp)
                    .HasColumnName("REL_GRP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RelHel)
                    .HasColumnName("REL_HEL")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RelHelComp)
                    .HasColumnName("REL_HEL_COMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RelLab)
                    .HasColumnName("REL_LAB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RelLabComp)
                    .HasColumnName("REL_LAB_COMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RelSup)
                    .HasColumnName("REL_SUP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasColumnName("YEAR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Yrmark>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("YRMARK");

                entity.HasIndex(e => e.Mark)
                    .HasName("MARK");

                entity.HasIndex(e => e.MarkDescr)
                    .HasName("MARK_DESCR");

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasColumnName("MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.MarkDescr)
                    .IsRequired()
                    .HasColumnName("MARK_DESCR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Yrtax>(entity =>
            {
                entity.HasKey(e => new { e.Series, e.Id, e.Year });

                entity.ToTable("YRTAX");

                entity.HasIndex(e => e.F0103)
                    .HasName("IX_YRTAX");

                entity.HasIndex(e => e.F0407)
                    .HasName("IX_YRTAX_1");

                entity.HasIndex(e => e.Idcode)
                    .HasName("IX_YRTAX_3");

                entity.HasIndex(e => e.Nobr)
                    .HasName("IX_YRTAX_4");

                entity.HasIndex(e => e.Series)
                    .HasName("IX_YRTAX_2");

                entity.Property(e => e.Series)
                    .HasColumnName("SERIES")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Year)
                    .HasColumnName("YEAR")
                    .HasMaxLength(50);

                entity.Property(e => e.AccNo)
                    .IsRequired()
                    .HasColumnName("ACC_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR_2")
                    .HasMaxLength(60);

                entity.Property(e => e.Blank1)
                    .IsRequired()
                    .HasColumnName("BLANK_1")
                    .HasMaxLength(50);

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasColumnName("DATE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ErrMark)
                    .IsRequired()
                    .HasColumnName("ERR_MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.F0103)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.F0407)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Id1)
                    .IsRequired()
                    .HasColumnName("ID1")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcode)
                    .IsRequired()
                    .HasColumnName("IDCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasColumnName("MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode2)
                    .IsRequired()
                    .HasColumnName("POSTCODE2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RelAmt)
                    .HasColumnName("REL_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RetAmt)
                    .HasColumnName("RET_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TOk).HasColumnName("T_OK");

                entity.Property(e => e.TaxAmt)
                    .HasColumnName("TAX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotAmt)
                    .HasColumnName("TOT_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.YearB)
                    .IsRequired()
                    .HasColumnName("YEAR_B")
                    .HasMaxLength(50);

                entity.Property(e => e.YearE)
                    .IsRequired()
                    .HasColumnName("YEAR_E")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Yrwel>(entity =>
            {
                entity.HasKey(e => new { e.Series, e.Id });

                entity.ToTable("YRWEL");

                entity.HasIndex(e => e.F0103)
                    .HasName("F0103");

                entity.HasIndex(e => e.F0407)
                    .HasName("F0407");

                entity.HasIndex(e => e.Format)
                    .HasName("FORMAT");

                entity.HasIndex(e => e.Mark)
                    .HasName("MAR");

                entity.HasIndex(e => e.Series)
                    .HasName("SERIES");

                entity.Property(e => e.Series)
                    .HasColumnName("SERIES")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.AccNo)
                    .IsRequired()
                    .HasColumnName("ACC_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR_2")
                    .HasMaxLength(60);

                entity.Property(e => e.Blank1)
                    .IsRequired()
                    .HasColumnName("BLANK_1")
                    .HasMaxLength(50);

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasColumnName("DATE")
                    .HasMaxLength(50);

                entity.Property(e => e.ErrMark)
                    .IsRequired()
                    .HasColumnName("ERR_MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.F0103)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.F0407)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Id1)
                    .IsRequired()
                    .HasColumnName("ID1")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcode)
                    .IsRequired()
                    .HasColumnName("IDCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasColumnName("MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.RelAmt)
                    .HasColumnName("REL_AMT")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TOk).HasColumnName("T_OK");

                entity.Property(e => e.TaxAmt)
                    .HasColumnName("TAX_AMT")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.TotAmt)
                    .HasColumnName("TOT_AMT")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasColumnName("YEAR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<人事系統加班資料表>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_加班資料表");

                entity.Property(e => e.上班卡).HasMaxLength(50);

                entity.Property(e => e.下班卡).HasMaxLength(50);

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.出勤班別).HasMaxLength(50);

                entity.Property(e => e.出勤班別名稱).HasMaxLength(50);

                entity.Property(e => e.到職日期).HasColumnType("datetime");

                entity.Property(e => e.加班原因).HasMaxLength(50);

                entity.Property(e => e.加班日期).HasColumnType("datetime");

                entity.Property(e => e.加班時數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.加班班別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.加班班別名稱).HasMaxLength(50);

                entity.Property(e => e.加班總時數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.加班費).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.加班起時間)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.加班迄時間)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員別代碼).HasMaxLength(50);

                entity.Property(e => e.員別員稱).HasMaxLength(50);

                entity.Property(e => e.員工姓名).HasMaxLength(50);

                entity.Property(e => e.基本薪資).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.工號).HasMaxLength(50);

                entity.Property(e => e.年資).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.性別).HasMaxLength(50);

                entity.Property(e => e.成本中心).HasMaxLength(50);

                entity.Property(e => e.成本代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門代碼).HasMaxLength(50);

                entity.Property(e => e.成本部門名稱).HasMaxLength(50);

                entity.Property(e => e.狀態)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.班別).HasMaxLength(50);

                entity.Property(e => e.直間接).HasMaxLength(50);

                entity.Property(e => e.職稱).HasMaxLength(50);

                entity.Property(e => e.職稱代碼).HasMaxLength(50);

                entity.Property(e => e.職等代碼).HasMaxLength(50);

                entity.Property(e => e.職等名稱).HasMaxLength(50);

                entity.Property(e => e.職類代碼).HasMaxLength(50);

                entity.Property(e => e.職類名稱).HasMaxLength(50);

                entity.Property(e => e.英文姓名).HasMaxLength(50);

                entity.Property(e => e.補休時數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.計薪年月)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.身份別).HasMaxLength(50);

                entity.Property(e => e.部門代碼).HasMaxLength(50);

                entity.Property(e => e.部門名稱).HasMaxLength(50);

                entity.Property(e => e.離職日期).HasColumnType("datetime");
            });

            modelBuilder.Entity<人事系統員工基本資料表>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_員工基本資料表");

                entity.Property(e => e.Deptalist)
                    .HasColumnName("DEPTALIST")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel00)
                    .IsRequired()
                    .HasColumnName("DEPTLEVEL00")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel10)
                    .IsRequired()
                    .HasColumnName("DEPTLEVEL10")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel20)
                    .IsRequired()
                    .HasColumnName("DEPTLEVEL20")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel30)
                    .IsRequired()
                    .HasColumnName("DEPTLEVEL30")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel40)
                    .IsRequired()
                    .HasColumnName("DEPTLEVEL40")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel50)
                    .IsRequired()
                    .HasColumnName("DEPTLEVEL50")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel60)
                    .IsRequired()
                    .HasColumnName("DEPTLEVEL60")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel70)
                    .IsRequired()
                    .HasColumnName("DEPTLEVEL70")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptlevel80)
                    .IsRequired()
                    .HasColumnName("DEPTLEVEL80")
                    .HasMaxLength(50);

                entity.Property(e => e.MiJobs)
                    .IsRequired()
                    .HasColumnName("MI_JOBS")
                    .HasMaxLength(50);

                entity.Property(e => e.Nvarchar10)
                    .HasColumnName("NVARCHAR10")
                    .HasMaxLength(50);

                entity.Property(e => e.Nvarchar8)
                    .HasColumnName("NVARCHAR8")
                    .HasMaxLength(50);

                entity.Property(e => e.Nvarchar9)
                    .HasColumnName("NVARCHAR9")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Sapcode)
                    .IsRequired()
                    .HasColumnName("SAPCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Sap据点)
                    .IsRequired()
                    .HasColumnName("SAP据点")
                    .HasMaxLength(50);

                entity.Property(e => e.业务考核)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.交通方式)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.保险缴纳地)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.停復日期).HasColumnType("datetime");

                entity.Property(e => e.停薪日期).HasColumnType("datetime");

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(180);

                entity.Property(e => e.公司名稱).HasMaxLength(50);

                entity.Property(e => e.出生日期).HasColumnType("smalldatetime");

                entity.Property(e => e.到職日期).HasColumnType("datetime");

                entity.Property(e => e.員別代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員別員稱).HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.國籍)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.國籍名稱).HasMaxLength(50);

                entity.Property(e => e.外部年资).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.大陆所得税).HasMaxLength(50);

                entity.Property(e => e.姻婚)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證到期日).HasColumnType("datetime");

                entity.Property(e => e.居留證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證起始日).HasColumnType("datetime");

                entity.Property(e => e.工作地).HasMaxLength(50);

                entity.Property(e => e.工號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.年資).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.性別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門名稱).HasMaxLength(50);

                entity.Property(e => e.戶籍地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.戶籍郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.戶籍電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.投保公司)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.教育程度)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.特休参考日期).HasColumnType("datetime");

                entity.Property(e => e.狀態).HasMaxLength(4);

                entity.Property(e => e.班別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動原因)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動失效日).HasColumnType("datetime");

                entity.Property(e => e.異動狀態)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動生效日).HasColumnType("datetime");

                entity.Property(e => e.直間接)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.签核主管姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.签核主管编号)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.联络人)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.联络人电话)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職稱).HasMaxLength(50);

                entity.Property(e => e.職稱代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等名稱).HasMaxLength(50);

                entity.Property(e => e.職類代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職類名稱).HasMaxLength(50);

                entity.Property(e => e.英文姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.薪资群组).HasMaxLength(50);

                entity.Property(e => e.血型)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.行動電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.角色)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.試用期滿日).HasColumnType("datetime");

                entity.Property(e => e.護照號碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.身份別).HasMaxLength(50);

                entity.Property(e => e.身分證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳帳號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳行號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.通訊地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.通訊郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.通訊電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門名稱).HasMaxLength(50);

                entity.Property(e => e.離職原因)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職日期).HasColumnType("datetime");

                entity.Property(e => e.電子郵件)
                    .IsRequired()
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<人事系統員工基本資料表需加異動日>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_員工基本資料表_需加異動日");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.As通訊電話)
                    .IsRequired()
                    .HasColumnName("as通訊電話")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ttscode)
                    .IsRequired()
                    .HasColumnName("TTSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.停復日期).HasColumnType("datetime");

                entity.Property(e => e.停薪日期).HasColumnType("datetime");

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(180);

                entity.Property(e => e.公司名稱).HasMaxLength(50);

                entity.Property(e => e.出生日期).HasColumnType("smalldatetime");

                entity.Property(e => e.到職日期).HasColumnType("datetime");

                entity.Property(e => e.員別代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員別員稱).HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.國籍)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.姻婚)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證到期日).HasColumnType("datetime");

                entity.Property(e => e.居留證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證起始日).HasColumnType("datetime");

                entity.Property(e => e.工號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.年資).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.性別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門名稱).HasMaxLength(50);

                entity.Property(e => e.戶籍地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.戶籍郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.戶籍電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.扶養人數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.狀態)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.班別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動原因).HasMaxLength(50);

                entity.Property(e => e.異動原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動狀態)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.直間接)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職稱).HasMaxLength(50);

                entity.Property(e => e.職稱代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等名稱).HasMaxLength(50);

                entity.Property(e => e.職類代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職類名稱).HasMaxLength(50);

                entity.Property(e => e.英文姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.血型)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.行動電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.試用期滿日).HasColumnType("datetime");

                entity.Property(e => e.護照號碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.身份別).HasMaxLength(50);

                entity.Property(e => e.身分證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳帳號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳行號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.通訊地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.通訊郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門名稱).HasMaxLength(50);

                entity.Property(e => e.離職原因)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職日期).HasColumnType("datetime");
            });

            modelBuilder.Entity<人事系統員工異動資料表>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_員工異動資料表");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.原成本部門).HasMaxLength(50);

                entity.Property(e => e.原直間接)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.原職稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.原職稱代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.原職等)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.原部門).HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.工號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.狀態)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.異動原因)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後成本部門).HasMaxLength(50);

                entity.Property(e => e.異動後成本部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後直間接)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後職稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後職稱代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後職等)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後部門).HasMaxLength(50);

                entity.Property(e => e.異動後部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.英文姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<人事系統留停人員報表>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_留停人員報表");

                entity.Property(e => e.As通訊電話)
                    .IsRequired()
                    .HasColumnName("as通訊電話")
                    .HasMaxLength(50);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.停復日期).HasColumnType("datetime");

                entity.Property(e => e.停薪日期).HasColumnType("datetime");

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(180);

                entity.Property(e => e.公司名稱).HasMaxLength(50);

                entity.Property(e => e.出生日期).HasColumnType("smalldatetime");

                entity.Property(e => e.到職日期).HasColumnType("datetime");

                entity.Property(e => e.員別代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員別員稱).HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.國籍)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.姻婚)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證到期日).HasColumnType("datetime");

                entity.Property(e => e.居留證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證起始日).HasColumnType("datetime");

                entity.Property(e => e.工作地).HasMaxLength(50);

                entity.Property(e => e.工號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.年資).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.性別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門名稱).HasMaxLength(50);

                entity.Property(e => e.戶籍地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.戶籍郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.戶籍電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.扶養人數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.狀態)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.班別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動原因).HasMaxLength(50);

                entity.Property(e => e.異動原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動狀態)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.直間接)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職稱).HasMaxLength(50);

                entity.Property(e => e.職稱代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等名稱).HasMaxLength(50);

                entity.Property(e => e.職類代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職類名稱).HasMaxLength(50);

                entity.Property(e => e.英文姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.血型)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.行動電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.試用期滿日).HasColumnType("datetime");

                entity.Property(e => e.護照號碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.身份別).HasMaxLength(50);

                entity.Property(e => e.身分證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳帳號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳行號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.通訊地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.通訊郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門名稱).HasMaxLength(50);

                entity.Property(e => e.離職原因)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職或復職日).HasColumnType("datetime");

                entity.Property(e => e.離職日期).HasColumnType("datetime");
            });

            modelBuilder.Entity<人事系統留停復職日期>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_留停復職日期");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscode)
                    .IsRequired()
                    .HasColumnName("TTSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.狀態)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.生效日).HasColumnType("datetime");

                entity.Property(e => e.離職或復職日).HasColumnType("datetime");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
